
Thermometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000748c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e40  08007620  08007620  00017620  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008460  08008460  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008460  08008460  00018460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008468  08008468  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008468  08008468  00018468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800846c  0800846c  0001846c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008470  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006b8  20000070  080084e0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000728  080084e0  00020728  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011ccb  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027cb  00000000  00000000  00031dae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001000  00000000  00000000  00034580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c48  00000000  00000000  00035580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002328e  00000000  00000000  000361c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013ba4  00000000  00000000  00059456  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5091  00000000  00000000  0006cffa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005090  00000000  00000000  0014208c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0014711c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007604 	.word	0x08007604

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08007604 	.word	0x08007604

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b970 	b.w	8000f30 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9e08      	ldr	r6, [sp, #32]
 8000c6e:	460d      	mov	r5, r1
 8000c70:	4604      	mov	r4, r0
 8000c72:	460f      	mov	r7, r1
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d14a      	bne.n	8000d0e <__udivmoddi4+0xa6>
 8000c78:	428a      	cmp	r2, r1
 8000c7a:	4694      	mov	ip, r2
 8000c7c:	d965      	bls.n	8000d4a <__udivmoddi4+0xe2>
 8000c7e:	fab2 f382 	clz	r3, r2
 8000c82:	b143      	cbz	r3, 8000c96 <__udivmoddi4+0x2e>
 8000c84:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c88:	f1c3 0220 	rsb	r2, r3, #32
 8000c8c:	409f      	lsls	r7, r3
 8000c8e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c92:	4317      	orrs	r7, r2
 8000c94:	409c      	lsls	r4, r3
 8000c96:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c9a:	fa1f f58c 	uxth.w	r5, ip
 8000c9e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ca2:	0c22      	lsrs	r2, r4, #16
 8000ca4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ca8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cac:	fb01 f005 	mul.w	r0, r1, r5
 8000cb0:	4290      	cmp	r0, r2
 8000cb2:	d90a      	bls.n	8000cca <__udivmoddi4+0x62>
 8000cb4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cb8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cbc:	f080 811c 	bcs.w	8000ef8 <__udivmoddi4+0x290>
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	f240 8119 	bls.w	8000ef8 <__udivmoddi4+0x290>
 8000cc6:	3902      	subs	r1, #2
 8000cc8:	4462      	add	r2, ip
 8000cca:	1a12      	subs	r2, r2, r0
 8000ccc:	b2a4      	uxth	r4, r4
 8000cce:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cd2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cd6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cda:	fb00 f505 	mul.w	r5, r0, r5
 8000cde:	42a5      	cmp	r5, r4
 8000ce0:	d90a      	bls.n	8000cf8 <__udivmoddi4+0x90>
 8000ce2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cea:	f080 8107 	bcs.w	8000efc <__udivmoddi4+0x294>
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	f240 8104 	bls.w	8000efc <__udivmoddi4+0x294>
 8000cf4:	4464      	add	r4, ip
 8000cf6:	3802      	subs	r0, #2
 8000cf8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cfc:	1b64      	subs	r4, r4, r5
 8000cfe:	2100      	movs	r1, #0
 8000d00:	b11e      	cbz	r6, 8000d0a <__udivmoddi4+0xa2>
 8000d02:	40dc      	lsrs	r4, r3
 8000d04:	2300      	movs	r3, #0
 8000d06:	e9c6 4300 	strd	r4, r3, [r6]
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0xbc>
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	f000 80ed 	beq.w	8000ef2 <__udivmoddi4+0x28a>
 8000d18:	2100      	movs	r1, #0
 8000d1a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d1e:	4608      	mov	r0, r1
 8000d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d24:	fab3 f183 	clz	r1, r3
 8000d28:	2900      	cmp	r1, #0
 8000d2a:	d149      	bne.n	8000dc0 <__udivmoddi4+0x158>
 8000d2c:	42ab      	cmp	r3, r5
 8000d2e:	d302      	bcc.n	8000d36 <__udivmoddi4+0xce>
 8000d30:	4282      	cmp	r2, r0
 8000d32:	f200 80f8 	bhi.w	8000f26 <__udivmoddi4+0x2be>
 8000d36:	1a84      	subs	r4, r0, r2
 8000d38:	eb65 0203 	sbc.w	r2, r5, r3
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	4617      	mov	r7, r2
 8000d40:	2e00      	cmp	r6, #0
 8000d42:	d0e2      	beq.n	8000d0a <__udivmoddi4+0xa2>
 8000d44:	e9c6 4700 	strd	r4, r7, [r6]
 8000d48:	e7df      	b.n	8000d0a <__udivmoddi4+0xa2>
 8000d4a:	b902      	cbnz	r2, 8000d4e <__udivmoddi4+0xe6>
 8000d4c:	deff      	udf	#255	; 0xff
 8000d4e:	fab2 f382 	clz	r3, r2
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	f040 8090 	bne.w	8000e78 <__udivmoddi4+0x210>
 8000d58:	1a8a      	subs	r2, r1, r2
 8000d5a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d5e:	fa1f fe8c 	uxth.w	lr, ip
 8000d62:	2101      	movs	r1, #1
 8000d64:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d68:	fb07 2015 	mls	r0, r7, r5, r2
 8000d6c:	0c22      	lsrs	r2, r4, #16
 8000d6e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d72:	fb0e f005 	mul.w	r0, lr, r5
 8000d76:	4290      	cmp	r0, r2
 8000d78:	d908      	bls.n	8000d8c <__udivmoddi4+0x124>
 8000d7a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d7e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0x122>
 8000d84:	4290      	cmp	r0, r2
 8000d86:	f200 80cb 	bhi.w	8000f20 <__udivmoddi4+0x2b8>
 8000d8a:	4645      	mov	r5, r8
 8000d8c:	1a12      	subs	r2, r2, r0
 8000d8e:	b2a4      	uxth	r4, r4
 8000d90:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d94:	fb07 2210 	mls	r2, r7, r0, r2
 8000d98:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d9c:	fb0e fe00 	mul.w	lr, lr, r0
 8000da0:	45a6      	cmp	lr, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x14e>
 8000da4:	eb1c 0404 	adds.w	r4, ip, r4
 8000da8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dac:	d202      	bcs.n	8000db4 <__udivmoddi4+0x14c>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f200 80bb 	bhi.w	8000f2a <__udivmoddi4+0x2c2>
 8000db4:	4610      	mov	r0, r2
 8000db6:	eba4 040e 	sub.w	r4, r4, lr
 8000dba:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dbe:	e79f      	b.n	8000d00 <__udivmoddi4+0x98>
 8000dc0:	f1c1 0720 	rsb	r7, r1, #32
 8000dc4:	408b      	lsls	r3, r1
 8000dc6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dca:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dce:	fa05 f401 	lsl.w	r4, r5, r1
 8000dd2:	fa20 f307 	lsr.w	r3, r0, r7
 8000dd6:	40fd      	lsrs	r5, r7
 8000dd8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ddc:	4323      	orrs	r3, r4
 8000dde:	fbb5 f8f9 	udiv	r8, r5, r9
 8000de2:	fa1f fe8c 	uxth.w	lr, ip
 8000de6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dea:	0c1c      	lsrs	r4, r3, #16
 8000dec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000df0:	fb08 f50e 	mul.w	r5, r8, lr
 8000df4:	42a5      	cmp	r5, r4
 8000df6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dfa:	fa00 f001 	lsl.w	r0, r0, r1
 8000dfe:	d90b      	bls.n	8000e18 <__udivmoddi4+0x1b0>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e08:	f080 8088 	bcs.w	8000f1c <__udivmoddi4+0x2b4>
 8000e0c:	42a5      	cmp	r5, r4
 8000e0e:	f240 8085 	bls.w	8000f1c <__udivmoddi4+0x2b4>
 8000e12:	f1a8 0802 	sub.w	r8, r8, #2
 8000e16:	4464      	add	r4, ip
 8000e18:	1b64      	subs	r4, r4, r5
 8000e1a:	b29d      	uxth	r5, r3
 8000e1c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e20:	fb09 4413 	mls	r4, r9, r3, r4
 8000e24:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e28:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e2c:	45a6      	cmp	lr, r4
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x1da>
 8000e30:	eb1c 0404 	adds.w	r4, ip, r4
 8000e34:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e38:	d26c      	bcs.n	8000f14 <__udivmoddi4+0x2ac>
 8000e3a:	45a6      	cmp	lr, r4
 8000e3c:	d96a      	bls.n	8000f14 <__udivmoddi4+0x2ac>
 8000e3e:	3b02      	subs	r3, #2
 8000e40:	4464      	add	r4, ip
 8000e42:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e46:	fba3 9502 	umull	r9, r5, r3, r2
 8000e4a:	eba4 040e 	sub.w	r4, r4, lr
 8000e4e:	42ac      	cmp	r4, r5
 8000e50:	46c8      	mov	r8, r9
 8000e52:	46ae      	mov	lr, r5
 8000e54:	d356      	bcc.n	8000f04 <__udivmoddi4+0x29c>
 8000e56:	d053      	beq.n	8000f00 <__udivmoddi4+0x298>
 8000e58:	b156      	cbz	r6, 8000e70 <__udivmoddi4+0x208>
 8000e5a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e5e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e62:	fa04 f707 	lsl.w	r7, r4, r7
 8000e66:	40ca      	lsrs	r2, r1
 8000e68:	40cc      	lsrs	r4, r1
 8000e6a:	4317      	orrs	r7, r2
 8000e6c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e70:	4618      	mov	r0, r3
 8000e72:	2100      	movs	r1, #0
 8000e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e78:	f1c3 0120 	rsb	r1, r3, #32
 8000e7c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e80:	fa20 f201 	lsr.w	r2, r0, r1
 8000e84:	fa25 f101 	lsr.w	r1, r5, r1
 8000e88:	409d      	lsls	r5, r3
 8000e8a:	432a      	orrs	r2, r5
 8000e8c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e90:	fa1f fe8c 	uxth.w	lr, ip
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1510 	mls	r5, r7, r0, r1
 8000e9c:	0c11      	lsrs	r1, r2, #16
 8000e9e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ea2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ea6:	428d      	cmp	r5, r1
 8000ea8:	fa04 f403 	lsl.w	r4, r4, r3
 8000eac:	d908      	bls.n	8000ec0 <__udivmoddi4+0x258>
 8000eae:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eb6:	d22f      	bcs.n	8000f18 <__udivmoddi4+0x2b0>
 8000eb8:	428d      	cmp	r5, r1
 8000eba:	d92d      	bls.n	8000f18 <__udivmoddi4+0x2b0>
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	4461      	add	r1, ip
 8000ec0:	1b49      	subs	r1, r1, r5
 8000ec2:	b292      	uxth	r2, r2
 8000ec4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ec8:	fb07 1115 	mls	r1, r7, r5, r1
 8000ecc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ed0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ed4:	4291      	cmp	r1, r2
 8000ed6:	d908      	bls.n	8000eea <__udivmoddi4+0x282>
 8000ed8:	eb1c 0202 	adds.w	r2, ip, r2
 8000edc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ee0:	d216      	bcs.n	8000f10 <__udivmoddi4+0x2a8>
 8000ee2:	4291      	cmp	r1, r2
 8000ee4:	d914      	bls.n	8000f10 <__udivmoddi4+0x2a8>
 8000ee6:	3d02      	subs	r5, #2
 8000ee8:	4462      	add	r2, ip
 8000eea:	1a52      	subs	r2, r2, r1
 8000eec:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ef0:	e738      	b.n	8000d64 <__udivmoddi4+0xfc>
 8000ef2:	4631      	mov	r1, r6
 8000ef4:	4630      	mov	r0, r6
 8000ef6:	e708      	b.n	8000d0a <__udivmoddi4+0xa2>
 8000ef8:	4639      	mov	r1, r7
 8000efa:	e6e6      	b.n	8000cca <__udivmoddi4+0x62>
 8000efc:	4610      	mov	r0, r2
 8000efe:	e6fb      	b.n	8000cf8 <__udivmoddi4+0x90>
 8000f00:	4548      	cmp	r0, r9
 8000f02:	d2a9      	bcs.n	8000e58 <__udivmoddi4+0x1f0>
 8000f04:	ebb9 0802 	subs.w	r8, r9, r2
 8000f08:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f0c:	3b01      	subs	r3, #1
 8000f0e:	e7a3      	b.n	8000e58 <__udivmoddi4+0x1f0>
 8000f10:	4645      	mov	r5, r8
 8000f12:	e7ea      	b.n	8000eea <__udivmoddi4+0x282>
 8000f14:	462b      	mov	r3, r5
 8000f16:	e794      	b.n	8000e42 <__udivmoddi4+0x1da>
 8000f18:	4640      	mov	r0, r8
 8000f1a:	e7d1      	b.n	8000ec0 <__udivmoddi4+0x258>
 8000f1c:	46d0      	mov	r8, sl
 8000f1e:	e77b      	b.n	8000e18 <__udivmoddi4+0x1b0>
 8000f20:	3d02      	subs	r5, #2
 8000f22:	4462      	add	r2, ip
 8000f24:	e732      	b.n	8000d8c <__udivmoddi4+0x124>
 8000f26:	4608      	mov	r0, r1
 8000f28:	e70a      	b.n	8000d40 <__udivmoddi4+0xd8>
 8000f2a:	4464      	add	r4, ip
 8000f2c:	3802      	subs	r0, #2
 8000f2e:	e742      	b.n	8000db6 <__udivmoddi4+0x14e>

08000f30 <__aeabi_idiv0>:
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop

08000f34 <ln>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
double ln(double x) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	ed87 0b00 	vstr	d0, [r7]
	return log(x);
 8000f3e:	ed97 0b00 	vldr	d0, [r7]
 8000f42:	f005 ff9d 	bl	8006e80 <log>
 8000f46:	eeb0 7a40 	vmov.f32	s14, s0
 8000f4a:	eef0 7a60 	vmov.f32	s15, s1
}
 8000f4e:	eeb0 0a47 	vmov.f32	s0, s14
 8000f52:	eef0 0a67 	vmov.f32	s1, s15
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <__io_putchar>:

int __io_putchar(int ch) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xffff);
 8000f64:	1d39      	adds	r1, r7, #4
 8000f66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	4803      	ldr	r0, [pc, #12]	; (8000f7c <__io_putchar+0x20>)
 8000f6e:	f004 f963 	bl	8005238 <HAL_UART_Transmit>
 return ch;
 8000f72:	687b      	ldr	r3, [r7, #4]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000144 	.word	0x20000144

08000f80 <ComputeTemperature>:


float ComputeTemperature(uint32_t adc)
{
 8000f80:	b5b0      	push	{r4, r5, r7, lr}
 8000f82:	b08a      	sub	sp, #40	; 0x28
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
	  float B = 4050;
 8000f88:	4b57      	ldr	r3, [pc, #348]	; (80010e8 <ComputeTemperature+0x168>)
 8000f8a:	627b      	str	r3, [r7, #36]	; 0x24
	  float R0 =10000;
 8000f8c:	4b57      	ldr	r3, [pc, #348]	; (80010ec <ComputeTemperature+0x16c>)
 8000f8e:	623b      	str	r3, [r7, #32]
	  float R1 = 10000;
 8000f90:	4b56      	ldr	r3, [pc, #344]	; (80010ec <ComputeTemperature+0x16c>)
 8000f92:	61fb      	str	r3, [r7, #28]
	  float T0 = 298.15;
 8000f94:	4b56      	ldr	r3, [pc, #344]	; (80010f0 <ComputeTemperature+0x170>)
 8000f96:	61bb      	str	r3, [r7, #24]
	  float Vpa0 =  ((float)adc*3.3)/4096;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	ee07 3a90 	vmov	s15, r3
 8000f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fa2:	ee17 0a90 	vmov	r0, s15
 8000fa6:	f7ff fac7 	bl	8000538 <__aeabi_f2d>
 8000faa:	a34b      	add	r3, pc, #300	; (adr r3, 80010d8 <ComputeTemperature+0x158>)
 8000fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb0:	f7ff fb1a 	bl	80005e8 <__aeabi_dmul>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	4610      	mov	r0, r2
 8000fba:	4619      	mov	r1, r3
 8000fbc:	f04f 0200 	mov.w	r2, #0
 8000fc0:	4b4c      	ldr	r3, [pc, #304]	; (80010f4 <ComputeTemperature+0x174>)
 8000fc2:	f7ff fc3b 	bl	800083c <__aeabi_ddiv>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	460b      	mov	r3, r1
 8000fca:	4610      	mov	r0, r2
 8000fcc:	4619      	mov	r1, r3
 8000fce:	f7ff fde3 	bl	8000b98 <__aeabi_d2f>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	617b      	str	r3, [r7, #20]
	  float R2 = (3.3*R1/Vpa0)-R1;
 8000fd6:	69f8      	ldr	r0, [r7, #28]
 8000fd8:	f7ff faae 	bl	8000538 <__aeabi_f2d>
 8000fdc:	a33e      	add	r3, pc, #248	; (adr r3, 80010d8 <ComputeTemperature+0x158>)
 8000fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe2:	f7ff fb01 	bl	80005e8 <__aeabi_dmul>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	4614      	mov	r4, r2
 8000fec:	461d      	mov	r5, r3
 8000fee:	6978      	ldr	r0, [r7, #20]
 8000ff0:	f7ff faa2 	bl	8000538 <__aeabi_f2d>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	4629      	mov	r1, r5
 8000ffc:	f7ff fc1e 	bl	800083c <__aeabi_ddiv>
 8001000:	4602      	mov	r2, r0
 8001002:	460b      	mov	r3, r1
 8001004:	4614      	mov	r4, r2
 8001006:	461d      	mov	r5, r3
 8001008:	69f8      	ldr	r0, [r7, #28]
 800100a:	f7ff fa95 	bl	8000538 <__aeabi_f2d>
 800100e:	4602      	mov	r2, r0
 8001010:	460b      	mov	r3, r1
 8001012:	4620      	mov	r0, r4
 8001014:	4629      	mov	r1, r5
 8001016:	f7ff f92f 	bl	8000278 <__aeabi_dsub>
 800101a:	4602      	mov	r2, r0
 800101c:	460b      	mov	r3, r1
 800101e:	4610      	mov	r0, r2
 8001020:	4619      	mov	r1, r3
 8001022:	f7ff fdb9 	bl	8000b98 <__aeabi_d2f>
 8001026:	4603      	mov	r3, r0
 8001028:	613b      	str	r3, [r7, #16]
	  float Rinf = R0*exp(-B/T0);
 800102a:	6a38      	ldr	r0, [r7, #32]
 800102c:	f7ff fa84 	bl	8000538 <__aeabi_f2d>
 8001030:	4604      	mov	r4, r0
 8001032:	460d      	mov	r5, r1
 8001034:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001038:	eeb1 7a67 	vneg.f32	s14, s15
 800103c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001040:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001044:	ee16 0a90 	vmov	r0, s13
 8001048:	f7ff fa76 	bl	8000538 <__aeabi_f2d>
 800104c:	4602      	mov	r2, r0
 800104e:	460b      	mov	r3, r1
 8001050:	ec43 2b10 	vmov	d0, r2, r3
 8001054:	f005 fecc 	bl	8006df0 <exp>
 8001058:	ec53 2b10 	vmov	r2, r3, d0
 800105c:	4620      	mov	r0, r4
 800105e:	4629      	mov	r1, r5
 8001060:	f7ff fac2 	bl	80005e8 <__aeabi_dmul>
 8001064:	4602      	mov	r2, r0
 8001066:	460b      	mov	r3, r1
 8001068:	4610      	mov	r0, r2
 800106a:	4619      	mov	r1, r3
 800106c:	f7ff fd94 	bl	8000b98 <__aeabi_d2f>
 8001070:	4603      	mov	r3, r0
 8001072:	60fb      	str	r3, [r7, #12]
	  return (B/ln(R2/Rinf))-273.15;
 8001074:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001076:	f7ff fa5f 	bl	8000538 <__aeabi_f2d>
 800107a:	4604      	mov	r4, r0
 800107c:	460d      	mov	r5, r1
 800107e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001082:	edd7 7a03 	vldr	s15, [r7, #12]
 8001086:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800108a:	ee16 0a90 	vmov	r0, s13
 800108e:	f7ff fa53 	bl	8000538 <__aeabi_f2d>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	ec43 2b10 	vmov	d0, r2, r3
 800109a:	f7ff ff4b 	bl	8000f34 <ln>
 800109e:	ec53 2b10 	vmov	r2, r3, d0
 80010a2:	4620      	mov	r0, r4
 80010a4:	4629      	mov	r1, r5
 80010a6:	f7ff fbc9 	bl	800083c <__aeabi_ddiv>
 80010aa:	4602      	mov	r2, r0
 80010ac:	460b      	mov	r3, r1
 80010ae:	4610      	mov	r0, r2
 80010b0:	4619      	mov	r1, r3
 80010b2:	a30b      	add	r3, pc, #44	; (adr r3, 80010e0 <ComputeTemperature+0x160>)
 80010b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b8:	f7ff f8de 	bl	8000278 <__aeabi_dsub>
 80010bc:	4602      	mov	r2, r0
 80010be:	460b      	mov	r3, r1
 80010c0:	4610      	mov	r0, r2
 80010c2:	4619      	mov	r1, r3
 80010c4:	f7ff fd68 	bl	8000b98 <__aeabi_d2f>
 80010c8:	4603      	mov	r3, r0
 80010ca:	ee07 3a90 	vmov	s15, r3
}
 80010ce:	eeb0 0a67 	vmov.f32	s0, s15
 80010d2:	3728      	adds	r7, #40	; 0x28
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bdb0      	pop	{r4, r5, r7, pc}
 80010d8:	66666666 	.word	0x66666666
 80010dc:	400a6666 	.word	0x400a6666
 80010e0:	66666666 	.word	0x66666666
 80010e4:	40711266 	.word	0x40711266
 80010e8:	457d2000 	.word	0x457d2000
 80010ec:	461c4000 	.word	0x461c4000
 80010f0:	43951333 	.word	0x43951333
 80010f4:	40b00000 	.word	0x40b00000

080010f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f8:	b590      	push	{r4, r7, lr}
 80010fa:	b089      	sub	sp, #36	; 0x24
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010fe:	f000 fe8a 	bl	8001e16 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001102:	f000 f875 	bl	80011f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001106:	f000 f9a9 	bl	800145c <MX_GPIO_Init>
  MX_ADC1_Init();
 800110a:	f000 f8d3 	bl	80012b4 <MX_ADC1_Init>
  MX_I2C1_Init();
 800110e:	f000 f935 	bl	800137c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001112:	f000 f973 	bl	80013fc <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  ssd1306_Init();
 8001116:	f000 fa35 	bl	8001584 <ssd1306_Init>
  ssd1306_SetCursor(0, 0);
 800111a:	2100      	movs	r1, #0
 800111c:	2000      	movs	r0, #0
 800111e:	f000 fbdd 	bl	80018dc <ssd1306_SetCursor>
  ssd1306_WriteString("Temperature", Font_11x18, White);
 8001122:	4a2c      	ldr	r2, [pc, #176]	; (80011d4 <main+0xdc>)
 8001124:	2301      	movs	r3, #1
 8001126:	ca06      	ldmia	r2, {r1, r2}
 8001128:	482b      	ldr	r0, [pc, #172]	; (80011d8 <main+0xe0>)
 800112a:	f000 fbb1 	bl	8001890 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 800112e:	f000 faab 	bl	8001688 <ssd1306_UpdateScreen>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  char buf[20];
	  HAL_ADC_Start(&hadc1);
 8001132:	482a      	ldr	r0, [pc, #168]	; (80011dc <main+0xe4>)
 8001134:	f001 fa12 	bl	800255c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 0xffff);
 8001138:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800113c:	4827      	ldr	r0, [pc, #156]	; (80011dc <main+0xe4>)
 800113e:	f001 fa70 	bl	8002622 <HAL_ADC_PollForConversion>
	  uint32_t adc = HAL_ADC_GetValue(&hadc1);
 8001142:	4826      	ldr	r0, [pc, #152]	; (80011dc <main+0xe4>)
 8001144:	f001 fafc 	bl	8002740 <HAL_ADC_GetValue>
 8001148:	61f8      	str	r0, [r7, #28]
	  float temp = ComputeTemperature(adc);
 800114a:	69f8      	ldr	r0, [r7, #28]
 800114c:	f7ff ff18 	bl	8000f80 <ComputeTemperature>
 8001150:	ed87 0a06 	vstr	s0, [r7, #24]
	  sprintf(buf,"%d.%02d", (int)(temp*100)/100,(int)(temp*100)%100);
 8001154:	edd7 7a06 	vldr	s15, [r7, #24]
 8001158:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80011e0 <main+0xe8>
 800115c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001160:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001164:	ee17 1a90 	vmov	r1, s15
 8001168:	4b1e      	ldr	r3, [pc, #120]	; (80011e4 <main+0xec>)
 800116a:	fb83 2301 	smull	r2, r3, r3, r1
 800116e:	115a      	asrs	r2, r3, #5
 8001170:	17cb      	asrs	r3, r1, #31
 8001172:	1ad4      	subs	r4, r2, r3
 8001174:	edd7 7a06 	vldr	s15, [r7, #24]
 8001178:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80011e0 <main+0xe8>
 800117c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001180:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001184:	ee17 2a90 	vmov	r2, s15
 8001188:	4b16      	ldr	r3, [pc, #88]	; (80011e4 <main+0xec>)
 800118a:	fb83 1302 	smull	r1, r3, r3, r2
 800118e:	1159      	asrs	r1, r3, #5
 8001190:	17d3      	asrs	r3, r2, #31
 8001192:	1acb      	subs	r3, r1, r3
 8001194:	2164      	movs	r1, #100	; 0x64
 8001196:	fb01 f303 	mul.w	r3, r1, r3
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	1d38      	adds	r0, r7, #4
 800119e:	4622      	mov	r2, r4
 80011a0:	4911      	ldr	r1, [pc, #68]	; (80011e8 <main+0xf0>)
 80011a2:	f004 fde9 	bl	8005d78 <siprintf>
	  printf("ADC = %lu; Temperature = %s\n", adc, buf);
 80011a6:	1d3b      	adds	r3, r7, #4
 80011a8:	461a      	mov	r2, r3
 80011aa:	69f9      	ldr	r1, [r7, #28]
 80011ac:	480f      	ldr	r0, [pc, #60]	; (80011ec <main+0xf4>)
 80011ae:	f004 fdd1 	bl	8005d54 <iprintf>
	  ssd1306_SetCursor(40, 40);
 80011b2:	2128      	movs	r1, #40	; 0x28
 80011b4:	2028      	movs	r0, #40	; 0x28
 80011b6:	f000 fb91 	bl	80018dc <ssd1306_SetCursor>
	  ssd1306_WriteString(buf, Font_11x18, White);
 80011ba:	4a06      	ldr	r2, [pc, #24]	; (80011d4 <main+0xdc>)
 80011bc:	1d38      	adds	r0, r7, #4
 80011be:	2301      	movs	r3, #1
 80011c0:	ca06      	ldmia	r2, {r1, r2}
 80011c2:	f000 fb65 	bl	8001890 <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 80011c6:	f000 fa5f 	bl	8001688 <ssd1306_UpdateScreen>
	  HAL_Delay(500);
 80011ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011ce:	f000 fe97 	bl	8001f00 <HAL_Delay>
  {
 80011d2:	e7ae      	b.n	8001132 <main+0x3a>
 80011d4:	20000000 	.word	0x20000000
 80011d8:	08007620 	.word	0x08007620
 80011dc:	2000008c 	.word	0x2000008c
 80011e0:	42c80000 	.word	0x42c80000
 80011e4:	51eb851f 	.word	0x51eb851f
 80011e8:	0800762c 	.word	0x0800762c
 80011ec:	08007634 	.word	0x08007634

080011f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b096      	sub	sp, #88	; 0x58
 80011f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	2244      	movs	r2, #68	; 0x44
 80011fc:	2100      	movs	r1, #0
 80011fe:	4618      	mov	r0, r3
 8001200:	f004 fe1d 	bl	8005e3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001204:	463b      	mov	r3, r7
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	60da      	str	r2, [r3, #12]
 8001210:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001212:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001216:	f002 fe3b 	bl	8003e90 <HAL_PWREx_ControlVoltageScaling>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001220:	f000 f972 	bl	8001508 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001224:	f002 fe16 	bl	8003e54 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001228:	4b21      	ldr	r3, [pc, #132]	; (80012b0 <SystemClock_Config+0xc0>)
 800122a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800122e:	4a20      	ldr	r2, [pc, #128]	; (80012b0 <SystemClock_Config+0xc0>)
 8001230:	f023 0318 	bic.w	r3, r3, #24
 8001234:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001238:	2314      	movs	r3, #20
 800123a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800123c:	2301      	movs	r3, #1
 800123e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001240:	2301      	movs	r3, #1
 8001242:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001248:	2360      	movs	r3, #96	; 0x60
 800124a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800124c:	2302      	movs	r3, #2
 800124e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001250:	2301      	movs	r3, #1
 8001252:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001254:	2301      	movs	r3, #1
 8001256:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001258:	2328      	movs	r3, #40	; 0x28
 800125a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800125c:	2307      	movs	r3, #7
 800125e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001260:	2302      	movs	r3, #2
 8001262:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001264:	2302      	movs	r3, #2
 8001266:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	4618      	mov	r0, r3
 800126e:	f002 fe65 	bl	8003f3c <HAL_RCC_OscConfig>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001278:	f000 f946 	bl	8001508 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800127c:	230f      	movs	r3, #15
 800127e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001280:	2303      	movs	r3, #3
 8001282:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001284:	2300      	movs	r3, #0
 8001286:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001288:	2300      	movs	r3, #0
 800128a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800128c:	2300      	movs	r3, #0
 800128e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001290:	463b      	mov	r3, r7
 8001292:	2104      	movs	r1, #4
 8001294:	4618      	mov	r0, r3
 8001296:	f003 fa65 	bl	8004764 <HAL_RCC_ClockConfig>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80012a0:	f000 f932 	bl	8001508 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80012a4:	f003 fe78 	bl	8004f98 <HAL_RCCEx_EnableMSIPLLMode>
}
 80012a8:	bf00      	nop
 80012aa:	3758      	adds	r7, #88	; 0x58
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40021000 	.word	0x40021000

080012b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012ba:	463b      	mov	r3, r7
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
 80012c8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012ca:	4b29      	ldr	r3, [pc, #164]	; (8001370 <MX_ADC1_Init+0xbc>)
 80012cc:	4a29      	ldr	r2, [pc, #164]	; (8001374 <MX_ADC1_Init+0xc0>)
 80012ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80012d0:	4b27      	ldr	r3, [pc, #156]	; (8001370 <MX_ADC1_Init+0xbc>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012d6:	4b26      	ldr	r3, [pc, #152]	; (8001370 <MX_ADC1_Init+0xbc>)
 80012d8:	2200      	movs	r2, #0
 80012da:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012dc:	4b24      	ldr	r3, [pc, #144]	; (8001370 <MX_ADC1_Init+0xbc>)
 80012de:	2200      	movs	r2, #0
 80012e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012e2:	4b23      	ldr	r3, [pc, #140]	; (8001370 <MX_ADC1_Init+0xbc>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012e8:	4b21      	ldr	r3, [pc, #132]	; (8001370 <MX_ADC1_Init+0xbc>)
 80012ea:	2204      	movs	r2, #4
 80012ec:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012ee:	4b20      	ldr	r3, [pc, #128]	; (8001370 <MX_ADC1_Init+0xbc>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012f4:	4b1e      	ldr	r3, [pc, #120]	; (8001370 <MX_ADC1_Init+0xbc>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80012fa:	4b1d      	ldr	r3, [pc, #116]	; (8001370 <MX_ADC1_Init+0xbc>)
 80012fc:	2201      	movs	r2, #1
 80012fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001300:	4b1b      	ldr	r3, [pc, #108]	; (8001370 <MX_ADC1_Init+0xbc>)
 8001302:	2200      	movs	r2, #0
 8001304:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001308:	4b19      	ldr	r3, [pc, #100]	; (8001370 <MX_ADC1_Init+0xbc>)
 800130a:	2200      	movs	r2, #0
 800130c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800130e:	4b18      	ldr	r3, [pc, #96]	; (8001370 <MX_ADC1_Init+0xbc>)
 8001310:	2200      	movs	r2, #0
 8001312:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001314:	4b16      	ldr	r3, [pc, #88]	; (8001370 <MX_ADC1_Init+0xbc>)
 8001316:	2200      	movs	r2, #0
 8001318:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800131c:	4b14      	ldr	r3, [pc, #80]	; (8001370 <MX_ADC1_Init+0xbc>)
 800131e:	2200      	movs	r2, #0
 8001320:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001322:	4b13      	ldr	r3, [pc, #76]	; (8001370 <MX_ADC1_Init+0xbc>)
 8001324:	2200      	movs	r2, #0
 8001326:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800132a:	4811      	ldr	r0, [pc, #68]	; (8001370 <MX_ADC1_Init+0xbc>)
 800132c:	f000 ffd4 	bl	80022d8 <HAL_ADC_Init>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001336:	f000 f8e7 	bl	8001508 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800133a:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <MX_ADC1_Init+0xc4>)
 800133c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800133e:	2306      	movs	r3, #6
 8001340:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001342:	2307      	movs	r3, #7
 8001344:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001346:	237f      	movs	r3, #127	; 0x7f
 8001348:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800134a:	2304      	movs	r3, #4
 800134c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001352:	463b      	mov	r3, r7
 8001354:	4619      	mov	r1, r3
 8001356:	4806      	ldr	r0, [pc, #24]	; (8001370 <MX_ADC1_Init+0xbc>)
 8001358:	f001 fa00 	bl	800275c <HAL_ADC_ConfigChannel>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001362:	f000 f8d1 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001366:	bf00      	nop
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	2000008c 	.word	0x2000008c
 8001374:	50040000 	.word	0x50040000
 8001378:	14f00020 	.word	0x14f00020

0800137c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001380:	4b1b      	ldr	r3, [pc, #108]	; (80013f0 <MX_I2C1_Init+0x74>)
 8001382:	4a1c      	ldr	r2, [pc, #112]	; (80013f4 <MX_I2C1_Init+0x78>)
 8001384:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 8001386:	4b1a      	ldr	r3, [pc, #104]	; (80013f0 <MX_I2C1_Init+0x74>)
 8001388:	4a1b      	ldr	r2, [pc, #108]	; (80013f8 <MX_I2C1_Init+0x7c>)
 800138a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800138c:	4b18      	ldr	r3, [pc, #96]	; (80013f0 <MX_I2C1_Init+0x74>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001392:	4b17      	ldr	r3, [pc, #92]	; (80013f0 <MX_I2C1_Init+0x74>)
 8001394:	2201      	movs	r2, #1
 8001396:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001398:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <MX_I2C1_Init+0x74>)
 800139a:	2200      	movs	r2, #0
 800139c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800139e:	4b14      	ldr	r3, [pc, #80]	; (80013f0 <MX_I2C1_Init+0x74>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013a4:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <MX_I2C1_Init+0x74>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013aa:	4b11      	ldr	r3, [pc, #68]	; (80013f0 <MX_I2C1_Init+0x74>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013b0:	4b0f      	ldr	r3, [pc, #60]	; (80013f0 <MX_I2C1_Init+0x74>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013b6:	480e      	ldr	r0, [pc, #56]	; (80013f0 <MX_I2C1_Init+0x74>)
 80013b8:	f002 f8a0 	bl	80034fc <HAL_I2C_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80013c2:	f000 f8a1 	bl	8001508 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013c6:	2100      	movs	r1, #0
 80013c8:	4809      	ldr	r0, [pc, #36]	; (80013f0 <MX_I2C1_Init+0x74>)
 80013ca:	f002 fcab 	bl	8003d24 <HAL_I2CEx_ConfigAnalogFilter>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80013d4:	f000 f898 	bl	8001508 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80013d8:	2100      	movs	r1, #0
 80013da:	4805      	ldr	r0, [pc, #20]	; (80013f0 <MX_I2C1_Init+0x74>)
 80013dc:	f002 fced 	bl	8003dba <HAL_I2CEx_ConfigDigitalFilter>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80013e6:	f000 f88f 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	200000f0 	.word	0x200000f0
 80013f4:	40005400 	.word	0x40005400
 80013f8:	00702991 	.word	0x00702991

080013fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001400:	4b14      	ldr	r3, [pc, #80]	; (8001454 <MX_USART2_UART_Init+0x58>)
 8001402:	4a15      	ldr	r2, [pc, #84]	; (8001458 <MX_USART2_UART_Init+0x5c>)
 8001404:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001406:	4b13      	ldr	r3, [pc, #76]	; (8001454 <MX_USART2_UART_Init+0x58>)
 8001408:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800140c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800140e:	4b11      	ldr	r3, [pc, #68]	; (8001454 <MX_USART2_UART_Init+0x58>)
 8001410:	2200      	movs	r2, #0
 8001412:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001414:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <MX_USART2_UART_Init+0x58>)
 8001416:	2200      	movs	r2, #0
 8001418:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800141a:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <MX_USART2_UART_Init+0x58>)
 800141c:	2200      	movs	r2, #0
 800141e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001420:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <MX_USART2_UART_Init+0x58>)
 8001422:	220c      	movs	r2, #12
 8001424:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001426:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <MX_USART2_UART_Init+0x58>)
 8001428:	2200      	movs	r2, #0
 800142a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800142c:	4b09      	ldr	r3, [pc, #36]	; (8001454 <MX_USART2_UART_Init+0x58>)
 800142e:	2200      	movs	r2, #0
 8001430:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001432:	4b08      	ldr	r3, [pc, #32]	; (8001454 <MX_USART2_UART_Init+0x58>)
 8001434:	2200      	movs	r2, #0
 8001436:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001438:	4b06      	ldr	r3, [pc, #24]	; (8001454 <MX_USART2_UART_Init+0x58>)
 800143a:	2200      	movs	r2, #0
 800143c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800143e:	4805      	ldr	r0, [pc, #20]	; (8001454 <MX_USART2_UART_Init+0x58>)
 8001440:	f003 feac 	bl	800519c <HAL_UART_Init>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800144a:	f000 f85d 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000144 	.word	0x20000144
 8001458:	40004400 	.word	0x40004400

0800145c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b088      	sub	sp, #32
 8001460:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001462:	f107 030c 	add.w	r3, r7, #12
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	60da      	str	r2, [r3, #12]
 8001470:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001472:	4b23      	ldr	r3, [pc, #140]	; (8001500 <MX_GPIO_Init+0xa4>)
 8001474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001476:	4a22      	ldr	r2, [pc, #136]	; (8001500 <MX_GPIO_Init+0xa4>)
 8001478:	f043 0304 	orr.w	r3, r3, #4
 800147c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800147e:	4b20      	ldr	r3, [pc, #128]	; (8001500 <MX_GPIO_Init+0xa4>)
 8001480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001482:	f003 0304 	and.w	r3, r3, #4
 8001486:	60bb      	str	r3, [r7, #8]
 8001488:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800148a:	4b1d      	ldr	r3, [pc, #116]	; (8001500 <MX_GPIO_Init+0xa4>)
 800148c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148e:	4a1c      	ldr	r2, [pc, #112]	; (8001500 <MX_GPIO_Init+0xa4>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001496:	4b1a      	ldr	r3, [pc, #104]	; (8001500 <MX_GPIO_Init+0xa4>)
 8001498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	607b      	str	r3, [r7, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a2:	4b17      	ldr	r3, [pc, #92]	; (8001500 <MX_GPIO_Init+0xa4>)
 80014a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a6:	4a16      	ldr	r2, [pc, #88]	; (8001500 <MX_GPIO_Init+0xa4>)
 80014a8:	f043 0302 	orr.w	r3, r3, #2
 80014ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ae:	4b14      	ldr	r3, [pc, #80]	; (8001500 <MX_GPIO_Init+0xa4>)
 80014b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	603b      	str	r3, [r7, #0]
 80014b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80014ba:	2200      	movs	r2, #0
 80014bc:	2108      	movs	r1, #8
 80014be:	4811      	ldr	r0, [pc, #68]	; (8001504 <MX_GPIO_Init+0xa8>)
 80014c0:	f002 f804 	bl	80034cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SW_Pin */
  GPIO_InitStruct.Pin = SW_Pin;
 80014c4:	2301      	movs	r3, #1
 80014c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014c8:	2300      	movs	r3, #0
 80014ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014cc:	2301      	movs	r3, #1
 80014ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 80014d0:	f107 030c 	add.w	r3, r7, #12
 80014d4:	4619      	mov	r1, r3
 80014d6:	480b      	ldr	r0, [pc, #44]	; (8001504 <MX_GPIO_Init+0xa8>)
 80014d8:	f001 fe8e 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80014dc:	2308      	movs	r3, #8
 80014de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e0:	2301      	movs	r3, #1
 80014e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e8:	2300      	movs	r3, #0
 80014ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80014ec:	f107 030c 	add.w	r3, r7, #12
 80014f0:	4619      	mov	r1, r3
 80014f2:	4804      	ldr	r0, [pc, #16]	; (8001504 <MX_GPIO_Init+0xa8>)
 80014f4:	f001 fe80 	bl	80031f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014f8:	bf00      	nop
 80014fa:	3720      	adds	r7, #32
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40021000 	.word	0x40021000
 8001504:	48000400 	.word	0x48000400

08001508 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800150c:	b672      	cpsid	i
}
 800150e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001510:	e7fe      	b.n	8001510 <Error_Handler+0x8>

08001512 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001516:	bf00      	nop
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af04      	add	r7, sp, #16
 8001526:	4603      	mov	r3, r0
 8001528:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800152a:	f04f 33ff 	mov.w	r3, #4294967295
 800152e:	9302      	str	r3, [sp, #8]
 8001530:	2301      	movs	r3, #1
 8001532:	9301      	str	r3, [sp, #4]
 8001534:	1dfb      	adds	r3, r7, #7
 8001536:	9300      	str	r3, [sp, #0]
 8001538:	2301      	movs	r3, #1
 800153a:	2200      	movs	r2, #0
 800153c:	2178      	movs	r1, #120	; 0x78
 800153e:	4803      	ldr	r0, [pc, #12]	; (800154c <ssd1306_WriteCommand+0x2c>)
 8001540:	f002 f878 	bl	8003634 <HAL_I2C_Mem_Write>
}
 8001544:	bf00      	nop
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	200000f0 	.word	0x200000f0

08001550 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af04      	add	r7, sp, #16
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	b29b      	uxth	r3, r3
 800155e:	f04f 32ff 	mov.w	r2, #4294967295
 8001562:	9202      	str	r2, [sp, #8]
 8001564:	9301      	str	r3, [sp, #4]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	9300      	str	r3, [sp, #0]
 800156a:	2301      	movs	r3, #1
 800156c:	2240      	movs	r2, #64	; 0x40
 800156e:	2178      	movs	r1, #120	; 0x78
 8001570:	4803      	ldr	r0, [pc, #12]	; (8001580 <ssd1306_WriteData+0x30>)
 8001572:	f002 f85f 	bl	8003634 <HAL_I2C_Mem_Write>
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	200000f0 	.word	0x200000f0

08001584 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001588:	f7ff ffc3 	bl	8001512 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800158c:	2064      	movs	r0, #100	; 0x64
 800158e:	f000 fcb7 	bl	8001f00 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001592:	2000      	movs	r0, #0
 8001594:	f000 f9ce 	bl	8001934 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001598:	2020      	movs	r0, #32
 800159a:	f7ff ffc1 	bl	8001520 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800159e:	2000      	movs	r0, #0
 80015a0:	f7ff ffbe 	bl	8001520 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80015a4:	20b0      	movs	r0, #176	; 0xb0
 80015a6:	f7ff ffbb 	bl	8001520 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80015aa:	20c8      	movs	r0, #200	; 0xc8
 80015ac:	f7ff ffb8 	bl	8001520 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80015b0:	2000      	movs	r0, #0
 80015b2:	f7ff ffb5 	bl	8001520 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80015b6:	2010      	movs	r0, #16
 80015b8:	f7ff ffb2 	bl	8001520 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80015bc:	2040      	movs	r0, #64	; 0x40
 80015be:	f7ff ffaf 	bl	8001520 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80015c2:	20ff      	movs	r0, #255	; 0xff
 80015c4:	f000 f9a2 	bl	800190c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80015c8:	20a1      	movs	r0, #161	; 0xa1
 80015ca:	f7ff ffa9 	bl	8001520 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80015ce:	20a6      	movs	r0, #166	; 0xa6
 80015d0:	f7ff ffa6 	bl	8001520 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80015d4:	20a8      	movs	r0, #168	; 0xa8
 80015d6:	f7ff ffa3 	bl	8001520 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80015da:	203f      	movs	r0, #63	; 0x3f
 80015dc:	f7ff ffa0 	bl	8001520 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80015e0:	20a4      	movs	r0, #164	; 0xa4
 80015e2:	f7ff ff9d 	bl	8001520 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80015e6:	20d3      	movs	r0, #211	; 0xd3
 80015e8:	f7ff ff9a 	bl	8001520 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80015ec:	2000      	movs	r0, #0
 80015ee:	f7ff ff97 	bl	8001520 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80015f2:	20d5      	movs	r0, #213	; 0xd5
 80015f4:	f7ff ff94 	bl	8001520 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80015f8:	20f0      	movs	r0, #240	; 0xf0
 80015fa:	f7ff ff91 	bl	8001520 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80015fe:	20d9      	movs	r0, #217	; 0xd9
 8001600:	f7ff ff8e 	bl	8001520 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001604:	2022      	movs	r0, #34	; 0x22
 8001606:	f7ff ff8b 	bl	8001520 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800160a:	20da      	movs	r0, #218	; 0xda
 800160c:	f7ff ff88 	bl	8001520 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001610:	2012      	movs	r0, #18
 8001612:	f7ff ff85 	bl	8001520 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001616:	20db      	movs	r0, #219	; 0xdb
 8001618:	f7ff ff82 	bl	8001520 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800161c:	2020      	movs	r0, #32
 800161e:	f7ff ff7f 	bl	8001520 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001622:	208d      	movs	r0, #141	; 0x8d
 8001624:	f7ff ff7c 	bl	8001520 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001628:	2014      	movs	r0, #20
 800162a:	f7ff ff79 	bl	8001520 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800162e:	2001      	movs	r0, #1
 8001630:	f000 f980 	bl	8001934 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001634:	2000      	movs	r0, #0
 8001636:	f000 f80f 	bl	8001658 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800163a:	f000 f825 	bl	8001688 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800163e:	4b05      	ldr	r3, [pc, #20]	; (8001654 <ssd1306_Init+0xd0>)
 8001640:	2200      	movs	r2, #0
 8001642:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001644:	4b03      	ldr	r3, [pc, #12]	; (8001654 <ssd1306_Init+0xd0>)
 8001646:	2200      	movs	r2, #0
 8001648:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800164a:	4b02      	ldr	r3, [pc, #8]	; (8001654 <ssd1306_Init+0xd0>)
 800164c:	2201      	movs	r2, #1
 800164e:	711a      	strb	r2, [r3, #4]
}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}
 8001654:	200005cc 	.word	0x200005cc

08001658 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001662:	79fb      	ldrb	r3, [r7, #7]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d101      	bne.n	800166c <ssd1306_Fill+0x14>
 8001668:	2300      	movs	r3, #0
 800166a:	e000      	b.n	800166e <ssd1306_Fill+0x16>
 800166c:	23ff      	movs	r3, #255	; 0xff
 800166e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001672:	4619      	mov	r1, r3
 8001674:	4803      	ldr	r0, [pc, #12]	; (8001684 <ssd1306_Fill+0x2c>)
 8001676:	f004 fbe2 	bl	8005e3e <memset>
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	200001cc 	.word	0x200001cc

08001688 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800168e:	2300      	movs	r3, #0
 8001690:	71fb      	strb	r3, [r7, #7]
 8001692:	e016      	b.n	80016c2 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001694:	79fb      	ldrb	r3, [r7, #7]
 8001696:	3b50      	subs	r3, #80	; 0x50
 8001698:	b2db      	uxtb	r3, r3
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff ff40 	bl	8001520 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80016a0:	2000      	movs	r0, #0
 80016a2:	f7ff ff3d 	bl	8001520 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80016a6:	2010      	movs	r0, #16
 80016a8:	f7ff ff3a 	bl	8001520 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	01db      	lsls	r3, r3, #7
 80016b0:	4a08      	ldr	r2, [pc, #32]	; (80016d4 <ssd1306_UpdateScreen+0x4c>)
 80016b2:	4413      	add	r3, r2
 80016b4:	2180      	movs	r1, #128	; 0x80
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff ff4a 	bl	8001550 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80016bc:	79fb      	ldrb	r3, [r7, #7]
 80016be:	3301      	adds	r3, #1
 80016c0:	71fb      	strb	r3, [r7, #7]
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	2b07      	cmp	r3, #7
 80016c6:	d9e5      	bls.n	8001694 <ssd1306_UpdateScreen+0xc>
    }
}
 80016c8:	bf00      	nop
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	200001cc 	.word	0x200001cc

080016d8 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	71fb      	strb	r3, [r7, #7]
 80016e2:	460b      	mov	r3, r1
 80016e4:	71bb      	strb	r3, [r7, #6]
 80016e6:	4613      	mov	r3, r2
 80016e8:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80016ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	db3d      	blt.n	800176e <ssd1306_DrawPixel+0x96>
 80016f2:	79bb      	ldrb	r3, [r7, #6]
 80016f4:	2b3f      	cmp	r3, #63	; 0x3f
 80016f6:	d83a      	bhi.n	800176e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80016f8:	797b      	ldrb	r3, [r7, #5]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d11a      	bne.n	8001734 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80016fe:	79fa      	ldrb	r2, [r7, #7]
 8001700:	79bb      	ldrb	r3, [r7, #6]
 8001702:	08db      	lsrs	r3, r3, #3
 8001704:	b2d8      	uxtb	r0, r3
 8001706:	4603      	mov	r3, r0
 8001708:	01db      	lsls	r3, r3, #7
 800170a:	4413      	add	r3, r2
 800170c:	4a1b      	ldr	r2, [pc, #108]	; (800177c <ssd1306_DrawPixel+0xa4>)
 800170e:	5cd3      	ldrb	r3, [r2, r3]
 8001710:	b25a      	sxtb	r2, r3
 8001712:	79bb      	ldrb	r3, [r7, #6]
 8001714:	f003 0307 	and.w	r3, r3, #7
 8001718:	2101      	movs	r1, #1
 800171a:	fa01 f303 	lsl.w	r3, r1, r3
 800171e:	b25b      	sxtb	r3, r3
 8001720:	4313      	orrs	r3, r2
 8001722:	b259      	sxtb	r1, r3
 8001724:	79fa      	ldrb	r2, [r7, #7]
 8001726:	4603      	mov	r3, r0
 8001728:	01db      	lsls	r3, r3, #7
 800172a:	4413      	add	r3, r2
 800172c:	b2c9      	uxtb	r1, r1
 800172e:	4a13      	ldr	r2, [pc, #76]	; (800177c <ssd1306_DrawPixel+0xa4>)
 8001730:	54d1      	strb	r1, [r2, r3]
 8001732:	e01d      	b.n	8001770 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001734:	79fa      	ldrb	r2, [r7, #7]
 8001736:	79bb      	ldrb	r3, [r7, #6]
 8001738:	08db      	lsrs	r3, r3, #3
 800173a:	b2d8      	uxtb	r0, r3
 800173c:	4603      	mov	r3, r0
 800173e:	01db      	lsls	r3, r3, #7
 8001740:	4413      	add	r3, r2
 8001742:	4a0e      	ldr	r2, [pc, #56]	; (800177c <ssd1306_DrawPixel+0xa4>)
 8001744:	5cd3      	ldrb	r3, [r2, r3]
 8001746:	b25a      	sxtb	r2, r3
 8001748:	79bb      	ldrb	r3, [r7, #6]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	2101      	movs	r1, #1
 8001750:	fa01 f303 	lsl.w	r3, r1, r3
 8001754:	b25b      	sxtb	r3, r3
 8001756:	43db      	mvns	r3, r3
 8001758:	b25b      	sxtb	r3, r3
 800175a:	4013      	ands	r3, r2
 800175c:	b259      	sxtb	r1, r3
 800175e:	79fa      	ldrb	r2, [r7, #7]
 8001760:	4603      	mov	r3, r0
 8001762:	01db      	lsls	r3, r3, #7
 8001764:	4413      	add	r3, r2
 8001766:	b2c9      	uxtb	r1, r1
 8001768:	4a04      	ldr	r2, [pc, #16]	; (800177c <ssd1306_DrawPixel+0xa4>)
 800176a:	54d1      	strb	r1, [r2, r3]
 800176c:	e000      	b.n	8001770 <ssd1306_DrawPixel+0x98>
        return;
 800176e:	bf00      	nop
    }
}
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	200001cc 	.word	0x200001cc

08001780 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001780:	b590      	push	{r4, r7, lr}
 8001782:	b089      	sub	sp, #36	; 0x24
 8001784:	af00      	add	r7, sp, #0
 8001786:	4604      	mov	r4, r0
 8001788:	1d38      	adds	r0, r7, #4
 800178a:	e880 0006 	stmia.w	r0, {r1, r2}
 800178e:	461a      	mov	r2, r3
 8001790:	4623      	mov	r3, r4
 8001792:	73fb      	strb	r3, [r7, #15]
 8001794:	4613      	mov	r3, r2
 8001796:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001798:	7bfb      	ldrb	r3, [r7, #15]
 800179a:	2b1f      	cmp	r3, #31
 800179c:	d902      	bls.n	80017a4 <ssd1306_WriteChar+0x24>
 800179e:	7bfb      	ldrb	r3, [r7, #15]
 80017a0:	2b7e      	cmp	r3, #126	; 0x7e
 80017a2:	d901      	bls.n	80017a8 <ssd1306_WriteChar+0x28>
        return 0;
 80017a4:	2300      	movs	r3, #0
 80017a6:	e06d      	b.n	8001884 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80017a8:	4b38      	ldr	r3, [pc, #224]	; (800188c <ssd1306_WriteChar+0x10c>)
 80017aa:	881b      	ldrh	r3, [r3, #0]
 80017ac:	461a      	mov	r2, r3
 80017ae:	793b      	ldrb	r3, [r7, #4]
 80017b0:	4413      	add	r3, r2
 80017b2:	2b80      	cmp	r3, #128	; 0x80
 80017b4:	dc06      	bgt.n	80017c4 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80017b6:	4b35      	ldr	r3, [pc, #212]	; (800188c <ssd1306_WriteChar+0x10c>)
 80017b8:	885b      	ldrh	r3, [r3, #2]
 80017ba:	461a      	mov	r2, r3
 80017bc:	797b      	ldrb	r3, [r7, #5]
 80017be:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80017c0:	2b40      	cmp	r3, #64	; 0x40
 80017c2:	dd01      	ble.n	80017c8 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80017c4:	2300      	movs	r3, #0
 80017c6:	e05d      	b.n	8001884 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80017c8:	2300      	movs	r3, #0
 80017ca:	61fb      	str	r3, [r7, #28]
 80017cc:	e04c      	b.n	8001868 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80017ce:	68ba      	ldr	r2, [r7, #8]
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
 80017d2:	3b20      	subs	r3, #32
 80017d4:	7979      	ldrb	r1, [r7, #5]
 80017d6:	fb01 f303 	mul.w	r3, r1, r3
 80017da:	4619      	mov	r1, r3
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	440b      	add	r3, r1
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	4413      	add	r3, r2
 80017e4:	881b      	ldrh	r3, [r3, #0]
 80017e6:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80017e8:	2300      	movs	r3, #0
 80017ea:	61bb      	str	r3, [r7, #24]
 80017ec:	e034      	b.n	8001858 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80017ee:	697a      	ldr	r2, [r7, #20]
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d012      	beq.n	8001824 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80017fe:	4b23      	ldr	r3, [pc, #140]	; (800188c <ssd1306_WriteChar+0x10c>)
 8001800:	881b      	ldrh	r3, [r3, #0]
 8001802:	b2da      	uxtb	r2, r3
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	b2db      	uxtb	r3, r3
 8001808:	4413      	add	r3, r2
 800180a:	b2d8      	uxtb	r0, r3
 800180c:	4b1f      	ldr	r3, [pc, #124]	; (800188c <ssd1306_WriteChar+0x10c>)
 800180e:	885b      	ldrh	r3, [r3, #2]
 8001810:	b2da      	uxtb	r2, r3
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	b2db      	uxtb	r3, r3
 8001816:	4413      	add	r3, r2
 8001818:	b2db      	uxtb	r3, r3
 800181a:	7bba      	ldrb	r2, [r7, #14]
 800181c:	4619      	mov	r1, r3
 800181e:	f7ff ff5b 	bl	80016d8 <ssd1306_DrawPixel>
 8001822:	e016      	b.n	8001852 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001824:	4b19      	ldr	r3, [pc, #100]	; (800188c <ssd1306_WriteChar+0x10c>)
 8001826:	881b      	ldrh	r3, [r3, #0]
 8001828:	b2da      	uxtb	r2, r3
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	b2db      	uxtb	r3, r3
 800182e:	4413      	add	r3, r2
 8001830:	b2d8      	uxtb	r0, r3
 8001832:	4b16      	ldr	r3, [pc, #88]	; (800188c <ssd1306_WriteChar+0x10c>)
 8001834:	885b      	ldrh	r3, [r3, #2]
 8001836:	b2da      	uxtb	r2, r3
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	b2db      	uxtb	r3, r3
 800183c:	4413      	add	r3, r2
 800183e:	b2d9      	uxtb	r1, r3
 8001840:	7bbb      	ldrb	r3, [r7, #14]
 8001842:	2b00      	cmp	r3, #0
 8001844:	bf0c      	ite	eq
 8001846:	2301      	moveq	r3, #1
 8001848:	2300      	movne	r3, #0
 800184a:	b2db      	uxtb	r3, r3
 800184c:	461a      	mov	r2, r3
 800184e:	f7ff ff43 	bl	80016d8 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	3301      	adds	r3, #1
 8001856:	61bb      	str	r3, [r7, #24]
 8001858:	793b      	ldrb	r3, [r7, #4]
 800185a:	461a      	mov	r2, r3
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	4293      	cmp	r3, r2
 8001860:	d3c5      	bcc.n	80017ee <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	3301      	adds	r3, #1
 8001866:	61fb      	str	r3, [r7, #28]
 8001868:	797b      	ldrb	r3, [r7, #5]
 800186a:	461a      	mov	r2, r3
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	4293      	cmp	r3, r2
 8001870:	d3ad      	bcc.n	80017ce <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001872:	4b06      	ldr	r3, [pc, #24]	; (800188c <ssd1306_WriteChar+0x10c>)
 8001874:	881a      	ldrh	r2, [r3, #0]
 8001876:	793b      	ldrb	r3, [r7, #4]
 8001878:	b29b      	uxth	r3, r3
 800187a:	4413      	add	r3, r2
 800187c:	b29a      	uxth	r2, r3
 800187e:	4b03      	ldr	r3, [pc, #12]	; (800188c <ssd1306_WriteChar+0x10c>)
 8001880:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001882:	7bfb      	ldrb	r3, [r7, #15]
}
 8001884:	4618      	mov	r0, r3
 8001886:	3724      	adds	r7, #36	; 0x24
 8001888:	46bd      	mov	sp, r7
 800188a:	bd90      	pop	{r4, r7, pc}
 800188c:	200005cc 	.word	0x200005cc

08001890 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	1d38      	adds	r0, r7, #4
 800189a:	e880 0006 	stmia.w	r0, {r1, r2}
 800189e:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 80018a0:	e012      	b.n	80018c8 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	7818      	ldrb	r0, [r3, #0]
 80018a6:	78fb      	ldrb	r3, [r7, #3]
 80018a8:	1d3a      	adds	r2, r7, #4
 80018aa:	ca06      	ldmia	r2, {r1, r2}
 80018ac:	f7ff ff68 	bl	8001780 <ssd1306_WriteChar>
 80018b0:	4603      	mov	r3, r0
 80018b2:	461a      	mov	r2, r3
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d002      	beq.n	80018c2 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	e008      	b.n	80018d4 <ssd1306_WriteString+0x44>
        }
        str++;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	3301      	adds	r3, #1
 80018c6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d1e8      	bne.n	80018a2 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	781b      	ldrb	r3, [r3, #0]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3710      	adds	r7, #16
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	460a      	mov	r2, r1
 80018e6:	71fb      	strb	r3, [r7, #7]
 80018e8:	4613      	mov	r3, r2
 80018ea:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	4b05      	ldr	r3, [pc, #20]	; (8001908 <ssd1306_SetCursor+0x2c>)
 80018f2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80018f4:	79bb      	ldrb	r3, [r7, #6]
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	4b03      	ldr	r3, [pc, #12]	; (8001908 <ssd1306_SetCursor+0x2c>)
 80018fa:	805a      	strh	r2, [r3, #2]
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	200005cc 	.word	0x200005cc

0800190c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001916:	2381      	movs	r3, #129	; 0x81
 8001918:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800191a:	7bfb      	ldrb	r3, [r7, #15]
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff fdff 	bl	8001520 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001922:	79fb      	ldrb	r3, [r7, #7]
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff fdfb 	bl	8001520 <ssd1306_WriteCommand>
}
 800192a:	bf00      	nop
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
	...

08001934 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800193e:	79fb      	ldrb	r3, [r7, #7]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d005      	beq.n	8001950 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001944:	23af      	movs	r3, #175	; 0xaf
 8001946:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001948:	4b08      	ldr	r3, [pc, #32]	; (800196c <ssd1306_SetDisplayOn+0x38>)
 800194a:	2201      	movs	r2, #1
 800194c:	715a      	strb	r2, [r3, #5]
 800194e:	e004      	b.n	800195a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001950:	23ae      	movs	r3, #174	; 0xae
 8001952:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001954:	4b05      	ldr	r3, [pc, #20]	; (800196c <ssd1306_SetDisplayOn+0x38>)
 8001956:	2200      	movs	r2, #0
 8001958:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800195a:	7bfb      	ldrb	r3, [r7, #15]
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff fddf 	bl	8001520 <ssd1306_WriteCommand>
}
 8001962:	bf00      	nop
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	200005cc 	.word	0x200005cc

08001970 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001976:	4b0f      	ldr	r3, [pc, #60]	; (80019b4 <HAL_MspInit+0x44>)
 8001978:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800197a:	4a0e      	ldr	r2, [pc, #56]	; (80019b4 <HAL_MspInit+0x44>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	6613      	str	r3, [r2, #96]	; 0x60
 8001982:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <HAL_MspInit+0x44>)
 8001984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	607b      	str	r3, [r7, #4]
 800198c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800198e:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <HAL_MspInit+0x44>)
 8001990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001992:	4a08      	ldr	r2, [pc, #32]	; (80019b4 <HAL_MspInit+0x44>)
 8001994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001998:	6593      	str	r3, [r2, #88]	; 0x58
 800199a:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <HAL_MspInit+0x44>)
 800199c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a2:	603b      	str	r3, [r7, #0]
 80019a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019a6:	bf00      	nop
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	40021000 	.word	0x40021000

080019b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b09e      	sub	sp, #120	; 0x78
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	60da      	str	r2, [r3, #12]
 80019ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019d0:	f107 0310 	add.w	r3, r7, #16
 80019d4:	2254      	movs	r2, #84	; 0x54
 80019d6:	2100      	movs	r1, #0
 80019d8:	4618      	mov	r0, r3
 80019da:	f004 fa30 	bl	8005e3e <memset>
  if(hadc->Instance==ADC1)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a25      	ldr	r2, [pc, #148]	; (8001a78 <HAL_ADC_MspInit+0xc0>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d143      	bne.n	8001a70 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80019e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019ec:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80019ee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80019f2:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80019f4:	2301      	movs	r3, #1
 80019f6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80019f8:	2301      	movs	r3, #1
 80019fa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80019fc:	2308      	movs	r3, #8
 80019fe:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001a00:	2307      	movs	r3, #7
 8001a02:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001a04:	2302      	movs	r3, #2
 8001a06:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001a0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a10:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a12:	f107 0310 	add.w	r3, r7, #16
 8001a16:	4618      	mov	r0, r3
 8001a18:	f003 f8c8 	bl	8004bac <HAL_RCCEx_PeriphCLKConfig>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8001a22:	f7ff fd71 	bl	8001508 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001a26:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <HAL_ADC_MspInit+0xc4>)
 8001a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a2a:	4a14      	ldr	r2, [pc, #80]	; (8001a7c <HAL_ADC_MspInit+0xc4>)
 8001a2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a32:	4b12      	ldr	r3, [pc, #72]	; (8001a7c <HAL_ADC_MspInit+0xc4>)
 8001a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3e:	4b0f      	ldr	r3, [pc, #60]	; (8001a7c <HAL_ADC_MspInit+0xc4>)
 8001a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a42:	4a0e      	ldr	r2, [pc, #56]	; (8001a7c <HAL_ADC_MspInit+0xc4>)
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a4a:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <HAL_ADC_MspInit+0xc4>)
 8001a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	60bb      	str	r3, [r7, #8]
 8001a54:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = Thermistor_Pin;
 8001a56:	2301      	movs	r3, #1
 8001a58:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001a5a:	230b      	movs	r3, #11
 8001a5c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(Thermistor_GPIO_Port, &GPIO_InitStruct);
 8001a62:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001a66:	4619      	mov	r1, r3
 8001a68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a6c:	f001 fbc4 	bl	80031f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a70:	bf00      	nop
 8001a72:	3778      	adds	r7, #120	; 0x78
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	50040000 	.word	0x50040000
 8001a7c:	40021000 	.word	0x40021000

08001a80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b09e      	sub	sp, #120	; 0x78
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a88:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]
 8001a96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a98:	f107 0310 	add.w	r3, r7, #16
 8001a9c:	2254      	movs	r2, #84	; 0x54
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f004 f9cc 	bl	8005e3e <memset>
  if(hi2c->Instance==I2C1)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a1e      	ldr	r2, [pc, #120]	; (8001b24 <HAL_I2C_MspInit+0xa4>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d135      	bne.n	8001b1c <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ab0:	2340      	movs	r3, #64	; 0x40
 8001ab2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ab8:	f107 0310 	add.w	r3, r7, #16
 8001abc:	4618      	mov	r0, r3
 8001abe:	f003 f875 	bl	8004bac <HAL_RCCEx_PeriphCLKConfig>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001ac8:	f7ff fd1e 	bl	8001508 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001acc:	4b16      	ldr	r3, [pc, #88]	; (8001b28 <HAL_I2C_MspInit+0xa8>)
 8001ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad0:	4a15      	ldr	r2, [pc, #84]	; (8001b28 <HAL_I2C_MspInit+0xa8>)
 8001ad2:	f043 0302 	orr.w	r3, r3, #2
 8001ad6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ad8:	4b13      	ldr	r3, [pc, #76]	; (8001b28 <HAL_I2C_MspInit+0xa8>)
 8001ada:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ae4:	23c0      	movs	r3, #192	; 0xc0
 8001ae6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ae8:	2312      	movs	r3, #18
 8001aea:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af0:	2303      	movs	r3, #3
 8001af2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001af4:	2304      	movs	r3, #4
 8001af6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001afc:	4619      	mov	r1, r3
 8001afe:	480b      	ldr	r0, [pc, #44]	; (8001b2c <HAL_I2C_MspInit+0xac>)
 8001b00:	f001 fb7a 	bl	80031f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b04:	4b08      	ldr	r3, [pc, #32]	; (8001b28 <HAL_I2C_MspInit+0xa8>)
 8001b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b08:	4a07      	ldr	r2, [pc, #28]	; (8001b28 <HAL_I2C_MspInit+0xa8>)
 8001b0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b0e:	6593      	str	r3, [r2, #88]	; 0x58
 8001b10:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <HAL_I2C_MspInit+0xa8>)
 8001b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b18:	60bb      	str	r3, [r7, #8]
 8001b1a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b1c:	bf00      	nop
 8001b1e:	3778      	adds	r7, #120	; 0x78
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40005400 	.word	0x40005400
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	48000400 	.word	0x48000400

08001b30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b09e      	sub	sp, #120	; 0x78
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b38:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	60da      	str	r2, [r3, #12]
 8001b46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b48:	f107 0310 	add.w	r3, r7, #16
 8001b4c:	2254      	movs	r2, #84	; 0x54
 8001b4e:	2100      	movs	r1, #0
 8001b50:	4618      	mov	r0, r3
 8001b52:	f004 f974 	bl	8005e3e <memset>
  if(huart->Instance==USART2)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a28      	ldr	r2, [pc, #160]	; (8001bfc <HAL_UART_MspInit+0xcc>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d148      	bne.n	8001bf2 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b60:	2302      	movs	r3, #2
 8001b62:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b64:	2300      	movs	r3, #0
 8001b66:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b68:	f107 0310 	add.w	r3, r7, #16
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f003 f81d 	bl	8004bac <HAL_RCCEx_PeriphCLKConfig>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b78:	f7ff fcc6 	bl	8001508 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b7c:	4b20      	ldr	r3, [pc, #128]	; (8001c00 <HAL_UART_MspInit+0xd0>)
 8001b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b80:	4a1f      	ldr	r2, [pc, #124]	; (8001c00 <HAL_UART_MspInit+0xd0>)
 8001b82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b86:	6593      	str	r3, [r2, #88]	; 0x58
 8001b88:	4b1d      	ldr	r3, [pc, #116]	; (8001c00 <HAL_UART_MspInit+0xd0>)
 8001b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b94:	4b1a      	ldr	r3, [pc, #104]	; (8001c00 <HAL_UART_MspInit+0xd0>)
 8001b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b98:	4a19      	ldr	r2, [pc, #100]	; (8001c00 <HAL_UART_MspInit+0xd0>)
 8001b9a:	f043 0301 	orr.w	r3, r3, #1
 8001b9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ba0:	4b17      	ldr	r3, [pc, #92]	; (8001c00 <HAL_UART_MspInit+0xd0>)
 8001ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba4:	f003 0301 	and.w	r3, r3, #1
 8001ba8:	60bb      	str	r3, [r7, #8]
 8001baa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001bac:	2304      	movs	r3, #4
 8001bae:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bbc:	2307      	movs	r3, #7
 8001bbe:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001bc0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bca:	f001 fb15 	bl	80031f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001bce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bd2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001be0:	2303      	movs	r3, #3
 8001be2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001be8:	4619      	mov	r1, r3
 8001bea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bee:	f001 fb03 	bl	80031f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001bf2:	bf00      	nop
 8001bf4:	3778      	adds	r7, #120	; 0x78
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40004400 	.word	0x40004400
 8001c00:	40021000 	.word	0x40021000

08001c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c08:	e7fe      	b.n	8001c08 <NMI_Handler+0x4>

08001c0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c0e:	e7fe      	b.n	8001c0e <HardFault_Handler+0x4>

08001c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c14:	e7fe      	b.n	8001c14 <MemManage_Handler+0x4>

08001c16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c16:	b480      	push	{r7}
 8001c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c1a:	e7fe      	b.n	8001c1a <BusFault_Handler+0x4>

08001c1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c20:	e7fe      	b.n	8001c20 <UsageFault_Handler+0x4>

08001c22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c22:	b480      	push	{r7}
 8001c24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c50:	f000 f936 	bl	8001ec0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c54:	bf00      	nop
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]
 8001c68:	e00a      	b.n	8001c80 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c6a:	f3af 8000 	nop.w
 8001c6e:	4601      	mov	r1, r0
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	1c5a      	adds	r2, r3, #1
 8001c74:	60ba      	str	r2, [r7, #8]
 8001c76:	b2ca      	uxtb	r2, r1
 8001c78:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	617b      	str	r3, [r7, #20]
 8001c80:	697a      	ldr	r2, [r7, #20]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	dbf0      	blt.n	8001c6a <_read+0x12>
  }

  return len;
 8001c88:	687b      	ldr	r3, [r7, #4]
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3718      	adds	r7, #24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b086      	sub	sp, #24
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	60f8      	str	r0, [r7, #12]
 8001c9a:	60b9      	str	r1, [r7, #8]
 8001c9c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	617b      	str	r3, [r7, #20]
 8001ca2:	e009      	b.n	8001cb8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	1c5a      	adds	r2, r3, #1
 8001ca8:	60ba      	str	r2, [r7, #8]
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff f955 	bl	8000f5c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	617b      	str	r3, [r7, #20]
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	dbf1      	blt.n	8001ca4 <_write+0x12>
  }
  return len;
 8001cc0:	687b      	ldr	r3, [r7, #4]
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3718      	adds	r7, #24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <_close>:

int _close(int file)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b083      	sub	sp, #12
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b083      	sub	sp, #12
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
 8001cea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cf2:	605a      	str	r2, [r3, #4]
  return 0;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr

08001d02 <_isatty>:

int _isatty(int file)
{
 8001d02:	b480      	push	{r7}
 8001d04:	b083      	sub	sp, #12
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d0a:	2301      	movs	r3, #1
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3714      	adds	r7, #20
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
	...

08001d34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d3c:	4a14      	ldr	r2, [pc, #80]	; (8001d90 <_sbrk+0x5c>)
 8001d3e:	4b15      	ldr	r3, [pc, #84]	; (8001d94 <_sbrk+0x60>)
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d48:	4b13      	ldr	r3, [pc, #76]	; (8001d98 <_sbrk+0x64>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d102      	bne.n	8001d56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d50:	4b11      	ldr	r3, [pc, #68]	; (8001d98 <_sbrk+0x64>)
 8001d52:	4a12      	ldr	r2, [pc, #72]	; (8001d9c <_sbrk+0x68>)
 8001d54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d56:	4b10      	ldr	r3, [pc, #64]	; (8001d98 <_sbrk+0x64>)
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d207      	bcs.n	8001d74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d64:	f004 f8ba 	bl	8005edc <__errno>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	220c      	movs	r2, #12
 8001d6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d72:	e009      	b.n	8001d88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d74:	4b08      	ldr	r3, [pc, #32]	; (8001d98 <_sbrk+0x64>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d7a:	4b07      	ldr	r3, [pc, #28]	; (8001d98 <_sbrk+0x64>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4413      	add	r3, r2
 8001d82:	4a05      	ldr	r2, [pc, #20]	; (8001d98 <_sbrk+0x64>)
 8001d84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d86:	68fb      	ldr	r3, [r7, #12]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3718      	adds	r7, #24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	20010000 	.word	0x20010000
 8001d94:	00000400 	.word	0x00000400
 8001d98:	200005d4 	.word	0x200005d4
 8001d9c:	20000728 	.word	0x20000728

08001da0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001da4:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <SystemInit+0x20>)
 8001da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001daa:	4a05      	ldr	r2, [pc, #20]	; (8001dc0 <SystemInit+0x20>)
 8001dac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001db0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001db4:	bf00      	nop
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	e000ed00 	.word	0xe000ed00

08001dc4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
   ldr   sp, =_estack    /* Set stack pointer */
 8001dc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dfc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001dc8:	f7ff ffea 	bl	8001da0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dcc:	480c      	ldr	r0, [pc, #48]	; (8001e00 <LoopForever+0x6>)
  ldr r1, =_edata
 8001dce:	490d      	ldr	r1, [pc, #52]	; (8001e04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001dd0:	4a0d      	ldr	r2, [pc, #52]	; (8001e08 <LoopForever+0xe>)
  movs r3, #0
 8001dd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dd4:	e002      	b.n	8001ddc <LoopCopyDataInit>

08001dd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dda:	3304      	adds	r3, #4

08001ddc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ddc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001de0:	d3f9      	bcc.n	8001dd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001de2:	4a0a      	ldr	r2, [pc, #40]	; (8001e0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001de4:	4c0a      	ldr	r4, [pc, #40]	; (8001e10 <LoopForever+0x16>)
  movs r3, #0
 8001de6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001de8:	e001      	b.n	8001dee <LoopFillZerobss>

08001dea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dec:	3204      	adds	r2, #4

08001dee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001df0:	d3fb      	bcc.n	8001dea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001df2:	f004 f879 	bl	8005ee8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001df6:	f7ff f97f 	bl	80010f8 <main>

08001dfa <LoopForever>:

LoopForever:
    b LoopForever
 8001dfa:	e7fe      	b.n	8001dfa <LoopForever>
   ldr   sp, =_estack    /* Set stack pointer */
 8001dfc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001e00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e04:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001e08:	08008470 	.word	0x08008470
  ldr r2, =_sbss
 8001e0c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001e10:	20000728 	.word	0x20000728

08001e14 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e14:	e7fe      	b.n	8001e14 <ADC1_IRQHandler>

08001e16 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b082      	sub	sp, #8
 8001e1a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e20:	2003      	movs	r0, #3
 8001e22:	f001 f9b5 	bl	8003190 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e26:	2000      	movs	r0, #0
 8001e28:	f000 f80e 	bl	8001e48 <HAL_InitTick>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d002      	beq.n	8001e38 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	71fb      	strb	r3, [r7, #7]
 8001e36:	e001      	b.n	8001e3c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e38:	f7ff fd9a 	bl	8001970 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e3c:	79fb      	ldrb	r3, [r7, #7]
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
	...

08001e48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e50:	2300      	movs	r3, #0
 8001e52:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e54:	4b17      	ldr	r3, [pc, #92]	; (8001eb4 <HAL_InitTick+0x6c>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d023      	beq.n	8001ea4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e5c:	4b16      	ldr	r3, [pc, #88]	; (8001eb8 <HAL_InitTick+0x70>)
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	4b14      	ldr	r3, [pc, #80]	; (8001eb4 <HAL_InitTick+0x6c>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	4619      	mov	r1, r3
 8001e66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e72:	4618      	mov	r0, r3
 8001e74:	f001 f9b3 	bl	80031de <HAL_SYSTICK_Config>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d10f      	bne.n	8001e9e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2b0f      	cmp	r3, #15
 8001e82:	d809      	bhi.n	8001e98 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e84:	2200      	movs	r2, #0
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	f04f 30ff 	mov.w	r0, #4294967295
 8001e8c:	f001 f98b 	bl	80031a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e90:	4a0a      	ldr	r2, [pc, #40]	; (8001ebc <HAL_InitTick+0x74>)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6013      	str	r3, [r2, #0]
 8001e96:	e007      	b.n	8001ea8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	73fb      	strb	r3, [r7, #15]
 8001e9c:	e004      	b.n	8001ea8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	73fb      	strb	r3, [r7, #15]
 8001ea2:	e001      	b.n	8001ea8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20000010 	.word	0x20000010
 8001eb8:	20000008 	.word	0x20000008
 8001ebc:	2000000c 	.word	0x2000000c

08001ec0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ec4:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <HAL_IncTick+0x20>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	461a      	mov	r2, r3
 8001eca:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <HAL_IncTick+0x24>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4413      	add	r3, r2
 8001ed0:	4a04      	ldr	r2, [pc, #16]	; (8001ee4 <HAL_IncTick+0x24>)
 8001ed2:	6013      	str	r3, [r2, #0]
}
 8001ed4:	bf00      	nop
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	20000010 	.word	0x20000010
 8001ee4:	200005d8 	.word	0x200005d8

08001ee8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  return uwTick;
 8001eec:	4b03      	ldr	r3, [pc, #12]	; (8001efc <HAL_GetTick+0x14>)
 8001eee:	681b      	ldr	r3, [r3, #0]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	200005d8 	.word	0x200005d8

08001f00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f08:	f7ff ffee 	bl	8001ee8 <HAL_GetTick>
 8001f0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f18:	d005      	beq.n	8001f26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001f1a:	4b0a      	ldr	r3, [pc, #40]	; (8001f44 <HAL_Delay+0x44>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	461a      	mov	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4413      	add	r3, r2
 8001f24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f26:	bf00      	nop
 8001f28:	f7ff ffde 	bl	8001ee8 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d8f7      	bhi.n	8001f28 <HAL_Delay+0x28>
  {
  }
}
 8001f38:	bf00      	nop
 8001f3a:	bf00      	nop
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	20000010 	.word	0x20000010

08001f48 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	431a      	orrs	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	609a      	str	r2, [r3, #8]
}
 8001f62:	bf00      	nop
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
 8001f76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	431a      	orrs	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	609a      	str	r2, [r3, #8]
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b087      	sub	sp, #28
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
 8001fbc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	3360      	adds	r3, #96	; 0x60
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	4413      	add	r3, r2
 8001fca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	4b08      	ldr	r3, [pc, #32]	; (8001ff4 <LL_ADC_SetOffset+0x44>)
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001fe8:	bf00      	nop
 8001fea:	371c      	adds	r7, #28
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	03fff000 	.word	0x03fff000

08001ff8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	3360      	adds	r3, #96	; 0x60
 8002006:	461a      	mov	r2, r3
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	4413      	add	r3, r2
 800200e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002018:	4618      	mov	r0, r3
 800201a:	3714      	adds	r7, #20
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002024:	b480      	push	{r7}
 8002026:	b087      	sub	sp, #28
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	3360      	adds	r3, #96	; 0x60
 8002034:	461a      	mov	r2, r3
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	4413      	add	r3, r2
 800203c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	431a      	orrs	r2, r3
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800204e:	bf00      	nop
 8002050:	371c      	adds	r7, #28
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800205a:	b480      	push	{r7}
 800205c:	b083      	sub	sp, #12
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800206a:	2b00      	cmp	r3, #0
 800206c:	d101      	bne.n	8002072 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800206e:	2301      	movs	r3, #1
 8002070:	e000      	b.n	8002074 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002080:	b480      	push	{r7}
 8002082:	b087      	sub	sp, #28
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	3330      	adds	r3, #48	; 0x30
 8002090:	461a      	mov	r2, r3
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	0a1b      	lsrs	r3, r3, #8
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	f003 030c 	and.w	r3, r3, #12
 800209c:	4413      	add	r3, r2
 800209e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	f003 031f 	and.w	r3, r3, #31
 80020aa:	211f      	movs	r1, #31
 80020ac:	fa01 f303 	lsl.w	r3, r1, r3
 80020b0:	43db      	mvns	r3, r3
 80020b2:	401a      	ands	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	0e9b      	lsrs	r3, r3, #26
 80020b8:	f003 011f 	and.w	r1, r3, #31
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	f003 031f 	and.w	r3, r3, #31
 80020c2:	fa01 f303 	lsl.w	r3, r1, r3
 80020c6:	431a      	orrs	r2, r3
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80020cc:	bf00      	nop
 80020ce:	371c      	adds	r7, #28
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80020d8:	b480      	push	{r7}
 80020da:	b087      	sub	sp, #28
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	3314      	adds	r3, #20
 80020e8:	461a      	mov	r2, r3
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	0e5b      	lsrs	r3, r3, #25
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	f003 0304 	and.w	r3, r3, #4
 80020f4:	4413      	add	r3, r2
 80020f6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	0d1b      	lsrs	r3, r3, #20
 8002100:	f003 031f 	and.w	r3, r3, #31
 8002104:	2107      	movs	r1, #7
 8002106:	fa01 f303 	lsl.w	r3, r1, r3
 800210a:	43db      	mvns	r3, r3
 800210c:	401a      	ands	r2, r3
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	0d1b      	lsrs	r3, r3, #20
 8002112:	f003 031f 	and.w	r3, r3, #31
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	fa01 f303 	lsl.w	r3, r1, r3
 800211c:	431a      	orrs	r2, r3
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002122:	bf00      	nop
 8002124:	371c      	adds	r7, #28
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
	...

08002130 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002148:	43db      	mvns	r3, r3
 800214a:	401a      	ands	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f003 0318 	and.w	r3, r3, #24
 8002152:	4908      	ldr	r1, [pc, #32]	; (8002174 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002154:	40d9      	lsrs	r1, r3
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	400b      	ands	r3, r1
 800215a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800215e:	431a      	orrs	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002166:	bf00      	nop
 8002168:	3714      	adds	r7, #20
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	0007ffff 	.word	0x0007ffff

08002178 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002188:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	6093      	str	r3, [r2, #8]
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021b0:	d101      	bne.n	80021b6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80021b2:	2301      	movs	r3, #1
 80021b4:	e000      	b.n	80021b8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80021d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021d8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002200:	d101      	bne.n	8002206 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002202:	2301      	movs	r3, #1
 8002204:	e000      	b.n	8002208 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002224:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002228:	f043 0201 	orr.w	r2, r3, #1
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002230:	bf00      	nop
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	2b01      	cmp	r3, #1
 800224e:	d101      	bne.n	8002254 <LL_ADC_IsEnabled+0x18>
 8002250:	2301      	movs	r3, #1
 8002252:	e000      	b.n	8002256 <LL_ADC_IsEnabled+0x1a>
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002262:	b480      	push	{r7}
 8002264:	b083      	sub	sp, #12
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002272:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002276:	f043 0204 	orr.w	r2, r3, #4
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800227e:	bf00      	nop
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr

0800228a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800228a:	b480      	push	{r7}
 800228c:	b083      	sub	sp, #12
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 0304 	and.w	r3, r3, #4
 800229a:	2b04      	cmp	r3, #4
 800229c:	d101      	bne.n	80022a2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800229e:	2301      	movs	r3, #1
 80022a0:	e000      	b.n	80022a4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f003 0308 	and.w	r3, r3, #8
 80022c0:	2b08      	cmp	r3, #8
 80022c2:	d101      	bne.n	80022c8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80022c4:	2301      	movs	r3, #1
 80022c6:	e000      	b.n	80022ca <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
	...

080022d8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b088      	sub	sp, #32
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022e0:	2300      	movs	r3, #0
 80022e2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80022e4:	2300      	movs	r3, #0
 80022e6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e126      	b.n	8002540 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d109      	bne.n	8002314 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f7ff fb59 	bl	80019b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff ff3f 	bl	800219c <LL_ADC_IsDeepPowerDownEnabled>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d004      	beq.n	800232e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff ff25 	bl	8002178 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4618      	mov	r0, r3
 8002334:	f7ff ff5a 	bl	80021ec <LL_ADC_IsInternalRegulatorEnabled>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d115      	bne.n	800236a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff ff3e 	bl	80021c4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002348:	4b7f      	ldr	r3, [pc, #508]	; (8002548 <HAL_ADC_Init+0x270>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	099b      	lsrs	r3, r3, #6
 800234e:	4a7f      	ldr	r2, [pc, #508]	; (800254c <HAL_ADC_Init+0x274>)
 8002350:	fba2 2303 	umull	r2, r3, r2, r3
 8002354:	099b      	lsrs	r3, r3, #6
 8002356:	3301      	adds	r3, #1
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800235c:	e002      	b.n	8002364 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	3b01      	subs	r3, #1
 8002362:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1f9      	bne.n	800235e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff ff3c 	bl	80021ec <LL_ADC_IsInternalRegulatorEnabled>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10d      	bne.n	8002396 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800237e:	f043 0210 	orr.w	r2, r3, #16
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238a:	f043 0201 	orr.w	r2, r3, #1
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff ff75 	bl	800228a <LL_ADC_REG_IsConversionOngoing>
 80023a0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a6:	f003 0310 	and.w	r3, r3, #16
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f040 80bf 	bne.w	800252e <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f040 80bb 	bne.w	800252e <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023bc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80023c0:	f043 0202 	orr.w	r2, r3, #2
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff ff35 	bl	800223c <LL_ADC_IsEnabled>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d10b      	bne.n	80023f0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023d8:	485d      	ldr	r0, [pc, #372]	; (8002550 <HAL_ADC_Init+0x278>)
 80023da:	f7ff ff2f 	bl	800223c <LL_ADC_IsEnabled>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d105      	bne.n	80023f0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	4619      	mov	r1, r3
 80023ea:	485a      	ldr	r0, [pc, #360]	; (8002554 <HAL_ADC_Init+0x27c>)
 80023ec:	f7ff fdac 	bl	8001f48 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	7e5b      	ldrb	r3, [r3, #25]
 80023f4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023fa:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002400:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002406:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800240e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002410:	4313      	orrs	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f893 3020 	ldrb.w	r3, [r3, #32]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d106      	bne.n	800242c <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002422:	3b01      	subs	r3, #1
 8002424:	045b      	lsls	r3, r3, #17
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4313      	orrs	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002430:	2b00      	cmp	r3, #0
 8002432:	d009      	beq.n	8002448 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002438:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002440:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	4313      	orrs	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68da      	ldr	r2, [r3, #12]
 800244e:	4b42      	ldr	r3, [pc, #264]	; (8002558 <HAL_ADC_Init+0x280>)
 8002450:	4013      	ands	r3, r2
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	6812      	ldr	r2, [r2, #0]
 8002456:	69b9      	ldr	r1, [r7, #24]
 8002458:	430b      	orrs	r3, r1
 800245a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff ff25 	bl	80022b0 <LL_ADC_INJ_IsConversionOngoing>
 8002466:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d13d      	bne.n	80024ea <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d13a      	bne.n	80024ea <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002478:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002480:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002482:	4313      	orrs	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002490:	f023 0302 	bic.w	r3, r3, #2
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	6812      	ldr	r2, [r2, #0]
 8002498:	69b9      	ldr	r1, [r7, #24]
 800249a:	430b      	orrs	r3, r1
 800249c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d118      	bne.n	80024da <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80024b2:	f023 0304 	bic.w	r3, r3, #4
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80024be:	4311      	orrs	r1, r2
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80024c4:	4311      	orrs	r1, r2
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80024ca:	430a      	orrs	r2, r1
 80024cc:	431a      	orrs	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f042 0201 	orr.w	r2, r2, #1
 80024d6:	611a      	str	r2, [r3, #16]
 80024d8:	e007      	b.n	80024ea <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	691a      	ldr	r2, [r3, #16]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f022 0201 	bic.w	r2, r2, #1
 80024e8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d10c      	bne.n	800250c <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f8:	f023 010f 	bic.w	r1, r3, #15
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	69db      	ldr	r3, [r3, #28]
 8002500:	1e5a      	subs	r2, r3, #1
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	430a      	orrs	r2, r1
 8002508:	631a      	str	r2, [r3, #48]	; 0x30
 800250a:	e007      	b.n	800251c <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f022 020f 	bic.w	r2, r2, #15
 800251a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002520:	f023 0303 	bic.w	r3, r3, #3
 8002524:	f043 0201 	orr.w	r2, r3, #1
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	655a      	str	r2, [r3, #84]	; 0x54
 800252c:	e007      	b.n	800253e <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002532:	f043 0210 	orr.w	r2, r3, #16
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800253e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002540:	4618      	mov	r0, r3
 8002542:	3720      	adds	r7, #32
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	20000008 	.word	0x20000008
 800254c:	053e2d63 	.word	0x053e2d63
 8002550:	50040000 	.word	0x50040000
 8002554:	50040300 	.word	0x50040300
 8002558:	fff0c007 	.word	0xfff0c007

0800255c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff fe8e 	bl	800228a <LL_ADC_REG_IsConversionOngoing>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d14f      	bne.n	8002614 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800257a:	2b01      	cmp	r3, #1
 800257c:	d101      	bne.n	8002582 <HAL_ADC_Start+0x26>
 800257e:	2302      	movs	r3, #2
 8002580:	e04b      	b.n	800261a <HAL_ADC_Start+0xbe>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 fcc8 	bl	8002f20 <ADC_Enable>
 8002590:	4603      	mov	r3, r0
 8002592:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002594:	7bfb      	ldrb	r3, [r7, #15]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d137      	bne.n	800260a <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800259e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80025a2:	f023 0301 	bic.w	r3, r3, #1
 80025a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025ba:	d106      	bne.n	80025ca <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c0:	f023 0206 	bic.w	r2, r3, #6
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	659a      	str	r2, [r3, #88]	; 0x58
 80025c8:	e002      	b.n	80025d0 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	221c      	movs	r2, #28
 80025d6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d007      	beq.n	80025fe <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025f6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff fe2d 	bl	8002262 <LL_ADC_REG_StartConversion>
 8002608:	e006      	b.n	8002618 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002612:	e001      	b.n	8002618 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002614:	2302      	movs	r3, #2
 8002616:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002618:	7bfb      	ldrb	r3, [r7, #15]
}
 800261a:	4618      	mov	r0, r3
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b086      	sub	sp, #24
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
 800262a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	695b      	ldr	r3, [r3, #20]
 8002630:	2b08      	cmp	r3, #8
 8002632:	d102      	bne.n	800263a <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002634:	2308      	movs	r3, #8
 8002636:	617b      	str	r3, [r7, #20]
 8002638:	e010      	b.n	800265c <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	2b00      	cmp	r3, #0
 8002646:	d007      	beq.n	8002658 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800264c:	f043 0220 	orr.w	r2, r3, #32
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e06f      	b.n	8002738 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8002658:	2304      	movs	r3, #4
 800265a:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800265c:	f7ff fc44 	bl	8001ee8 <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002662:	e021      	b.n	80026a8 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800266a:	d01d      	beq.n	80026a8 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800266c:	f7ff fc3c 	bl	8001ee8 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	429a      	cmp	r2, r3
 800267a:	d302      	bcc.n	8002682 <HAL_ADC_PollForConversion+0x60>
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d112      	bne.n	80026a8 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	4013      	ands	r3, r2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d10b      	bne.n	80026a8 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002694:	f043 0204 	orr.w	r2, r3, #4
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e047      	b.n	8002738 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	4013      	ands	r3, r2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0d6      	beq.n	8002664 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff fcc7 	bl	800205a <LL_ADC_REG_IsTriggerSourceSWStart>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d01c      	beq.n	800270c <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	7e5b      	ldrb	r3, [r3, #25]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d118      	bne.n	800270c <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0308 	and.w	r3, r3, #8
 80026e4:	2b08      	cmp	r3, #8
 80026e6:	d111      	bne.n	800270c <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d105      	bne.n	800270c <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002704:	f043 0201 	orr.w	r2, r3, #1
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	2b08      	cmp	r3, #8
 8002718:	d104      	bne.n	8002724 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2208      	movs	r2, #8
 8002720:	601a      	str	r2, [r3, #0]
 8002722:	e008      	b.n	8002736 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d103      	bne.n	8002736 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	220c      	movs	r2, #12
 8002734:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	3718      	adds	r7, #24
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800274e:	4618      	mov	r0, r3
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
	...

0800275c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b0b6      	sub	sp, #216	; 0xd8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002766:	2300      	movs	r3, #0
 8002768:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800276c:	2300      	movs	r3, #0
 800276e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002776:	2b01      	cmp	r3, #1
 8002778:	d101      	bne.n	800277e <HAL_ADC_ConfigChannel+0x22>
 800277a:	2302      	movs	r3, #2
 800277c:	e3bb      	b.n	8002ef6 <HAL_ADC_ConfigChannel+0x79a>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4618      	mov	r0, r3
 800278c:	f7ff fd7d 	bl	800228a <LL_ADC_REG_IsConversionOngoing>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	f040 83a0 	bne.w	8002ed8 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	2b05      	cmp	r3, #5
 80027a6:	d824      	bhi.n	80027f2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	3b02      	subs	r3, #2
 80027ae:	2b03      	cmp	r3, #3
 80027b0:	d81b      	bhi.n	80027ea <HAL_ADC_ConfigChannel+0x8e>
 80027b2:	a201      	add	r2, pc, #4	; (adr r2, 80027b8 <HAL_ADC_ConfigChannel+0x5c>)
 80027b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027b8:	080027c9 	.word	0x080027c9
 80027bc:	080027d1 	.word	0x080027d1
 80027c0:	080027d9 	.word	0x080027d9
 80027c4:	080027e1 	.word	0x080027e1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80027c8:	230c      	movs	r3, #12
 80027ca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80027ce:	e010      	b.n	80027f2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80027d0:	2312      	movs	r3, #18
 80027d2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80027d6:	e00c      	b.n	80027f2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80027d8:	2318      	movs	r3, #24
 80027da:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80027de:	e008      	b.n	80027f2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80027e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80027e8:	e003      	b.n	80027f2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80027ea:	2306      	movs	r3, #6
 80027ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80027f0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6818      	ldr	r0, [r3, #0]
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	461a      	mov	r2, r3
 80027fc:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002800:	f7ff fc3e 	bl	8002080 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4618      	mov	r0, r3
 800280a:	f7ff fd3e 	bl	800228a <LL_ADC_REG_IsConversionOngoing>
 800280e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4618      	mov	r0, r3
 8002818:	f7ff fd4a 	bl	80022b0 <LL_ADC_INJ_IsConversionOngoing>
 800281c:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002820:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002824:	2b00      	cmp	r3, #0
 8002826:	f040 81a4 	bne.w	8002b72 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800282a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800282e:	2b00      	cmp	r3, #0
 8002830:	f040 819f 	bne.w	8002b72 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6818      	ldr	r0, [r3, #0]
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	6819      	ldr	r1, [r3, #0]
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	461a      	mov	r2, r3
 8002842:	f7ff fc49 	bl	80020d8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	695a      	ldr	r2, [r3, #20]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	08db      	lsrs	r3, r3, #3
 8002852:	f003 0303 	and.w	r3, r3, #3
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	691b      	ldr	r3, [r3, #16]
 8002864:	2b04      	cmp	r3, #4
 8002866:	d00a      	beq.n	800287e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6818      	ldr	r0, [r3, #0]
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	6919      	ldr	r1, [r3, #16]
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002878:	f7ff fb9a 	bl	8001fb0 <LL_ADC_SetOffset>
 800287c:	e179      	b.n	8002b72 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2100      	movs	r1, #0
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff fbb7 	bl	8001ff8 <LL_ADC_GetOffsetChannel>
 800288a:	4603      	mov	r3, r0
 800288c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10a      	bne.n	80028aa <HAL_ADC_ConfigChannel+0x14e>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2100      	movs	r1, #0
 800289a:	4618      	mov	r0, r3
 800289c:	f7ff fbac 	bl	8001ff8 <LL_ADC_GetOffsetChannel>
 80028a0:	4603      	mov	r3, r0
 80028a2:	0e9b      	lsrs	r3, r3, #26
 80028a4:	f003 021f 	and.w	r2, r3, #31
 80028a8:	e01e      	b.n	80028e8 <HAL_ADC_ConfigChannel+0x18c>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2100      	movs	r1, #0
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff fba1 	bl	8001ff8 <LL_ADC_GetOffsetChannel>
 80028b6:	4603      	mov	r3, r0
 80028b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80028c0:	fa93 f3a3 	rbit	r3, r3
 80028c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80028c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80028cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80028d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80028d8:	2320      	movs	r3, #32
 80028da:	e004      	b.n	80028e6 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80028dc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80028e0:	fab3 f383 	clz	r3, r3
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d105      	bne.n	8002900 <HAL_ADC_ConfigChannel+0x1a4>
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	0e9b      	lsrs	r3, r3, #26
 80028fa:	f003 031f 	and.w	r3, r3, #31
 80028fe:	e018      	b.n	8002932 <HAL_ADC_ConfigChannel+0x1d6>
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002908:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800290c:	fa93 f3a3 	rbit	r3, r3
 8002910:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002914:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002918:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 800291c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002924:	2320      	movs	r3, #32
 8002926:	e004      	b.n	8002932 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002928:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800292c:	fab3 f383 	clz	r3, r3
 8002930:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002932:	429a      	cmp	r2, r3
 8002934:	d106      	bne.n	8002944 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2200      	movs	r2, #0
 800293c:	2100      	movs	r1, #0
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff fb70 	bl	8002024 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2101      	movs	r1, #1
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff fb54 	bl	8001ff8 <LL_ADC_GetOffsetChannel>
 8002950:	4603      	mov	r3, r0
 8002952:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002956:	2b00      	cmp	r3, #0
 8002958:	d10a      	bne.n	8002970 <HAL_ADC_ConfigChannel+0x214>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2101      	movs	r1, #1
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff fb49 	bl	8001ff8 <LL_ADC_GetOffsetChannel>
 8002966:	4603      	mov	r3, r0
 8002968:	0e9b      	lsrs	r3, r3, #26
 800296a:	f003 021f 	and.w	r2, r3, #31
 800296e:	e01e      	b.n	80029ae <HAL_ADC_ConfigChannel+0x252>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2101      	movs	r1, #1
 8002976:	4618      	mov	r0, r3
 8002978:	f7ff fb3e 	bl	8001ff8 <LL_ADC_GetOffsetChannel>
 800297c:	4603      	mov	r3, r0
 800297e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002982:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002986:	fa93 f3a3 	rbit	r3, r3
 800298a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800298e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002992:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002996:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800299e:	2320      	movs	r3, #32
 80029a0:	e004      	b.n	80029ac <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80029a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80029a6:	fab3 f383 	clz	r3, r3
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d105      	bne.n	80029c6 <HAL_ADC_ConfigChannel+0x26a>
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	0e9b      	lsrs	r3, r3, #26
 80029c0:	f003 031f 	and.w	r3, r3, #31
 80029c4:	e018      	b.n	80029f8 <HAL_ADC_ConfigChannel+0x29c>
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80029d2:	fa93 f3a3 	rbit	r3, r3
 80029d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80029da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80029de:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80029e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80029ea:	2320      	movs	r3, #32
 80029ec:	e004      	b.n	80029f8 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80029ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029f2:	fab3 f383 	clz	r3, r3
 80029f6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d106      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2200      	movs	r2, #0
 8002a02:	2101      	movs	r1, #1
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff fb0d 	bl	8002024 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2102      	movs	r1, #2
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff faf1 	bl	8001ff8 <LL_ADC_GetOffsetChannel>
 8002a16:	4603      	mov	r3, r0
 8002a18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d10a      	bne.n	8002a36 <HAL_ADC_ConfigChannel+0x2da>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2102      	movs	r1, #2
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff fae6 	bl	8001ff8 <LL_ADC_GetOffsetChannel>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	0e9b      	lsrs	r3, r3, #26
 8002a30:	f003 021f 	and.w	r2, r3, #31
 8002a34:	e01e      	b.n	8002a74 <HAL_ADC_ConfigChannel+0x318>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2102      	movs	r1, #2
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7ff fadb 	bl	8001ff8 <LL_ADC_GetOffsetChannel>
 8002a42:	4603      	mov	r3, r0
 8002a44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a48:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a4c:	fa93 f3a3 	rbit	r3, r3
 8002a50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002a54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002a5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d101      	bne.n	8002a68 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002a64:	2320      	movs	r3, #32
 8002a66:	e004      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002a68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a6c:	fab3 f383 	clz	r3, r3
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d105      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x330>
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	0e9b      	lsrs	r3, r3, #26
 8002a86:	f003 031f 	and.w	r3, r3, #31
 8002a8a:	e014      	b.n	8002ab6 <HAL_ADC_ConfigChannel+0x35a>
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a94:	fa93 f3a3 	rbit	r3, r3
 8002a98:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002a9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002aa0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d101      	bne.n	8002aac <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002aa8:	2320      	movs	r3, #32
 8002aaa:	e004      	b.n	8002ab6 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002aac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ab0:	fab3 f383 	clz	r3, r3
 8002ab4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d106      	bne.n	8002ac8 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	2102      	movs	r1, #2
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff faae 	bl	8002024 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2103      	movs	r1, #3
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff fa92 	bl	8001ff8 <LL_ADC_GetOffsetChannel>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10a      	bne.n	8002af4 <HAL_ADC_ConfigChannel+0x398>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2103      	movs	r1, #3
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff fa87 	bl	8001ff8 <LL_ADC_GetOffsetChannel>
 8002aea:	4603      	mov	r3, r0
 8002aec:	0e9b      	lsrs	r3, r3, #26
 8002aee:	f003 021f 	and.w	r2, r3, #31
 8002af2:	e017      	b.n	8002b24 <HAL_ADC_ConfigChannel+0x3c8>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2103      	movs	r1, #3
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff fa7c 	bl	8001ff8 <LL_ADC_GetOffsetChannel>
 8002b00:	4603      	mov	r3, r0
 8002b02:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b06:	fa93 f3a3 	rbit	r3, r3
 8002b0a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002b0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b0e:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002b10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002b16:	2320      	movs	r3, #32
 8002b18:	e003      	b.n	8002b22 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002b1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b1c:	fab3 f383 	clz	r3, r3
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d105      	bne.n	8002b3c <HAL_ADC_ConfigChannel+0x3e0>
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	0e9b      	lsrs	r3, r3, #26
 8002b36:	f003 031f 	and.w	r3, r3, #31
 8002b3a:	e011      	b.n	8002b60 <HAL_ADC_ConfigChannel+0x404>
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b44:	fa93 f3a3 	rbit	r3, r3
 8002b48:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002b4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b4c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002b4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d101      	bne.n	8002b58 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002b54:	2320      	movs	r3, #32
 8002b56:	e003      	b.n	8002b60 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002b58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b5a:	fab3 f383 	clz	r3, r3
 8002b5e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d106      	bne.n	8002b72 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	2103      	movs	r1, #3
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff fa59 	bl	8002024 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7ff fb60 	bl	800223c <LL_ADC_IsEnabled>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f040 8140 	bne.w	8002e04 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6818      	ldr	r0, [r3, #0]
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	6819      	ldr	r1, [r3, #0]
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	461a      	mov	r2, r3
 8002b92:	f7ff facd 	bl	8002130 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	4a8f      	ldr	r2, [pc, #572]	; (8002dd8 <HAL_ADC_ConfigChannel+0x67c>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	f040 8131 	bne.w	8002e04 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10b      	bne.n	8002bca <HAL_ADC_ConfigChannel+0x46e>
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	0e9b      	lsrs	r3, r3, #26
 8002bb8:	3301      	adds	r3, #1
 8002bba:	f003 031f 	and.w	r3, r3, #31
 8002bbe:	2b09      	cmp	r3, #9
 8002bc0:	bf94      	ite	ls
 8002bc2:	2301      	movls	r3, #1
 8002bc4:	2300      	movhi	r3, #0
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	e019      	b.n	8002bfe <HAL_ADC_ConfigChannel+0x4a2>
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bd2:	fa93 f3a3 	rbit	r3, r3
 8002bd6:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002bd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bda:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002bdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002be2:	2320      	movs	r3, #32
 8002be4:	e003      	b.n	8002bee <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002be6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002be8:	fab3 f383 	clz	r3, r3
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	3301      	adds	r3, #1
 8002bf0:	f003 031f 	and.w	r3, r3, #31
 8002bf4:	2b09      	cmp	r3, #9
 8002bf6:	bf94      	ite	ls
 8002bf8:	2301      	movls	r3, #1
 8002bfa:	2300      	movhi	r3, #0
 8002bfc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d079      	beq.n	8002cf6 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d107      	bne.n	8002c1e <HAL_ADC_ConfigChannel+0x4c2>
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	0e9b      	lsrs	r3, r3, #26
 8002c14:	3301      	adds	r3, #1
 8002c16:	069b      	lsls	r3, r3, #26
 8002c18:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c1c:	e015      	b.n	8002c4a <HAL_ADC_ConfigChannel+0x4ee>
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c26:	fa93 f3a3 	rbit	r3, r3
 8002c2a:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002c2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c2e:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002c30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002c36:	2320      	movs	r3, #32
 8002c38:	e003      	b.n	8002c42 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002c3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c3c:	fab3 f383 	clz	r3, r3
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	3301      	adds	r3, #1
 8002c44:	069b      	lsls	r3, r3, #26
 8002c46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d109      	bne.n	8002c6a <HAL_ADC_ConfigChannel+0x50e>
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	0e9b      	lsrs	r3, r3, #26
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	f003 031f 	and.w	r3, r3, #31
 8002c62:	2101      	movs	r1, #1
 8002c64:	fa01 f303 	lsl.w	r3, r1, r3
 8002c68:	e017      	b.n	8002c9a <HAL_ADC_ConfigChannel+0x53e>
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c72:	fa93 f3a3 	rbit	r3, r3
 8002c76:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c7a:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002c7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002c82:	2320      	movs	r3, #32
 8002c84:	e003      	b.n	8002c8e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002c86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c88:	fab3 f383 	clz	r3, r3
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	3301      	adds	r3, #1
 8002c90:	f003 031f 	and.w	r3, r3, #31
 8002c94:	2101      	movs	r1, #1
 8002c96:	fa01 f303 	lsl.w	r3, r1, r3
 8002c9a:	ea42 0103 	orr.w	r1, r2, r3
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d10a      	bne.n	8002cc0 <HAL_ADC_ConfigChannel+0x564>
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	0e9b      	lsrs	r3, r3, #26
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	f003 021f 	and.w	r2, r3, #31
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	4413      	add	r3, r2
 8002cbc:	051b      	lsls	r3, r3, #20
 8002cbe:	e018      	b.n	8002cf2 <HAL_ADC_ConfigChannel+0x596>
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cc8:	fa93 f3a3 	rbit	r3, r3
 8002ccc:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d101      	bne.n	8002cdc <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002cd8:	2320      	movs	r3, #32
 8002cda:	e003      	b.n	8002ce4 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cde:	fab3 f383 	clz	r3, r3
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	f003 021f 	and.w	r2, r3, #31
 8002cea:	4613      	mov	r3, r2
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	4413      	add	r3, r2
 8002cf0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cf2:	430b      	orrs	r3, r1
 8002cf4:	e081      	b.n	8002dfa <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d107      	bne.n	8002d12 <HAL_ADC_ConfigChannel+0x5b6>
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	0e9b      	lsrs	r3, r3, #26
 8002d08:	3301      	adds	r3, #1
 8002d0a:	069b      	lsls	r3, r3, #26
 8002d0c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d10:	e015      	b.n	8002d3e <HAL_ADC_ConfigChannel+0x5e2>
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d1a:	fa93 f3a3 	rbit	r3, r3
 8002d1e:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d22:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002d2a:	2320      	movs	r3, #32
 8002d2c:	e003      	b.n	8002d36 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d30:	fab3 f383 	clz	r3, r3
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	3301      	adds	r3, #1
 8002d38:	069b      	lsls	r3, r3, #26
 8002d3a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d109      	bne.n	8002d5e <HAL_ADC_ConfigChannel+0x602>
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	0e9b      	lsrs	r3, r3, #26
 8002d50:	3301      	adds	r3, #1
 8002d52:	f003 031f 	and.w	r3, r3, #31
 8002d56:	2101      	movs	r1, #1
 8002d58:	fa01 f303 	lsl.w	r3, r1, r3
 8002d5c:	e017      	b.n	8002d8e <HAL_ADC_ConfigChannel+0x632>
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	fa93 f3a3 	rbit	r3, r3
 8002d6a:	61bb      	str	r3, [r7, #24]
  return result;
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002d70:	6a3b      	ldr	r3, [r7, #32]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002d76:	2320      	movs	r3, #32
 8002d78:	e003      	b.n	8002d82 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002d7a:	6a3b      	ldr	r3, [r7, #32]
 8002d7c:	fab3 f383 	clz	r3, r3
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	3301      	adds	r3, #1
 8002d84:	f003 031f 	and.w	r3, r3, #31
 8002d88:	2101      	movs	r1, #1
 8002d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d8e:	ea42 0103 	orr.w	r1, r2, r3
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10d      	bne.n	8002dba <HAL_ADC_ConfigChannel+0x65e>
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	0e9b      	lsrs	r3, r3, #26
 8002da4:	3301      	adds	r3, #1
 8002da6:	f003 021f 	and.w	r2, r3, #31
 8002daa:	4613      	mov	r3, r2
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	4413      	add	r3, r2
 8002db0:	3b1e      	subs	r3, #30
 8002db2:	051b      	lsls	r3, r3, #20
 8002db4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002db8:	e01e      	b.n	8002df8 <HAL_ADC_ConfigChannel+0x69c>
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	fa93 f3a3 	rbit	r3, r3
 8002dc6:	60fb      	str	r3, [r7, #12]
  return result;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d104      	bne.n	8002ddc <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002dd2:	2320      	movs	r3, #32
 8002dd4:	e006      	b.n	8002de4 <HAL_ADC_ConfigChannel+0x688>
 8002dd6:	bf00      	nop
 8002dd8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	fab3 f383 	clz	r3, r3
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	3301      	adds	r3, #1
 8002de6:	f003 021f 	and.w	r2, r3, #31
 8002dea:	4613      	mov	r3, r2
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	4413      	add	r3, r2
 8002df0:	3b1e      	subs	r3, #30
 8002df2:	051b      	lsls	r3, r3, #20
 8002df4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002df8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dfe:	4619      	mov	r1, r3
 8002e00:	f7ff f96a 	bl	80020d8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	4b3d      	ldr	r3, [pc, #244]	; (8002f00 <HAL_ADC_ConfigChannel+0x7a4>)
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d06c      	beq.n	8002eea <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e10:	483c      	ldr	r0, [pc, #240]	; (8002f04 <HAL_ADC_ConfigChannel+0x7a8>)
 8002e12:	f7ff f8bf 	bl	8001f94 <LL_ADC_GetCommonPathInternalCh>
 8002e16:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a3a      	ldr	r2, [pc, #232]	; (8002f08 <HAL_ADC_ConfigChannel+0x7ac>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d127      	bne.n	8002e74 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002e24:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d121      	bne.n	8002e74 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a35      	ldr	r2, [pc, #212]	; (8002f0c <HAL_ADC_ConfigChannel+0x7b0>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d157      	bne.n	8002eea <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e3a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e3e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e42:	4619      	mov	r1, r3
 8002e44:	482f      	ldr	r0, [pc, #188]	; (8002f04 <HAL_ADC_ConfigChannel+0x7a8>)
 8002e46:	f7ff f892 	bl	8001f6e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e4a:	4b31      	ldr	r3, [pc, #196]	; (8002f10 <HAL_ADC_ConfigChannel+0x7b4>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	099b      	lsrs	r3, r3, #6
 8002e50:	4a30      	ldr	r2, [pc, #192]	; (8002f14 <HAL_ADC_ConfigChannel+0x7b8>)
 8002e52:	fba2 2303 	umull	r2, r3, r2, r3
 8002e56:	099b      	lsrs	r3, r3, #6
 8002e58:	1c5a      	adds	r2, r3, #1
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	4413      	add	r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002e64:	e002      	b.n	8002e6c <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1f9      	bne.n	8002e66 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e72:	e03a      	b.n	8002eea <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a27      	ldr	r2, [pc, #156]	; (8002f18 <HAL_ADC_ConfigChannel+0x7bc>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d113      	bne.n	8002ea6 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10d      	bne.n	8002ea6 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a1f      	ldr	r2, [pc, #124]	; (8002f0c <HAL_ADC_ConfigChannel+0x7b0>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d12a      	bne.n	8002eea <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e94:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4819      	ldr	r0, [pc, #100]	; (8002f04 <HAL_ADC_ConfigChannel+0x7a8>)
 8002ea0:	f7ff f865 	bl	8001f6e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ea4:	e021      	b.n	8002eea <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a1c      	ldr	r2, [pc, #112]	; (8002f1c <HAL_ADC_ConfigChannel+0x7c0>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d11c      	bne.n	8002eea <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002eb0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002eb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d116      	bne.n	8002eea <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a12      	ldr	r2, [pc, #72]	; (8002f0c <HAL_ADC_ConfigChannel+0x7b0>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d111      	bne.n	8002eea <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ec6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002eca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ece:	4619      	mov	r1, r3
 8002ed0:	480c      	ldr	r0, [pc, #48]	; (8002f04 <HAL_ADC_ConfigChannel+0x7a8>)
 8002ed2:	f7ff f84c 	bl	8001f6e <LL_ADC_SetCommonPathInternalCh>
 8002ed6:	e008      	b.n	8002eea <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002edc:	f043 0220 	orr.w	r2, r3, #32
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ef2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	37d8      	adds	r7, #216	; 0xd8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	80080000 	.word	0x80080000
 8002f04:	50040300 	.word	0x50040300
 8002f08:	c7520000 	.word	0xc7520000
 8002f0c:	50040000 	.word	0x50040000
 8002f10:	20000008 	.word	0x20000008
 8002f14:	053e2d63 	.word	0x053e2d63
 8002f18:	cb840000 	.word	0xcb840000
 8002f1c:	80000001 	.word	0x80000001

08002f20 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff f983 	bl	800223c <LL_ADC_IsEnabled>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d169      	bne.n	8003010 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	689a      	ldr	r2, [r3, #8]
 8002f42:	4b36      	ldr	r3, [pc, #216]	; (800301c <ADC_Enable+0xfc>)
 8002f44:	4013      	ands	r3, r2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00d      	beq.n	8002f66 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f4e:	f043 0210 	orr.w	r2, r3, #16
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f5a:	f043 0201 	orr.w	r2, r3, #1
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e055      	b.n	8003012 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7ff f952 	bl	8002214 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002f70:	482b      	ldr	r0, [pc, #172]	; (8003020 <ADC_Enable+0x100>)
 8002f72:	f7ff f80f 	bl	8001f94 <LL_ADC_GetCommonPathInternalCh>
 8002f76:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002f78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d013      	beq.n	8002fa8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f80:	4b28      	ldr	r3, [pc, #160]	; (8003024 <ADC_Enable+0x104>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	099b      	lsrs	r3, r3, #6
 8002f86:	4a28      	ldr	r2, [pc, #160]	; (8003028 <ADC_Enable+0x108>)
 8002f88:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8c:	099b      	lsrs	r3, r3, #6
 8002f8e:	1c5a      	adds	r2, r3, #1
 8002f90:	4613      	mov	r3, r2
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	4413      	add	r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002f9a:	e002      	b.n	8002fa2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1f9      	bne.n	8002f9c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002fa8:	f7fe ff9e 	bl	8001ee8 <HAL_GetTick>
 8002fac:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fae:	e028      	b.n	8003002 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7ff f941 	bl	800223c <LL_ADC_IsEnabled>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d104      	bne.n	8002fca <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff f925 	bl	8002214 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002fca:	f7fe ff8d 	bl	8001ee8 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d914      	bls.n	8003002 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d00d      	beq.n	8003002 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fea:	f043 0210 	orr.w	r2, r3, #16
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff6:	f043 0201 	orr.w	r2, r3, #1
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e007      	b.n	8003012 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0301 	and.w	r3, r3, #1
 800300c:	2b01      	cmp	r3, #1
 800300e:	d1cf      	bne.n	8002fb0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	8000003f 	.word	0x8000003f
 8003020:	50040300 	.word	0x50040300
 8003024:	20000008 	.word	0x20000008
 8003028:	053e2d63 	.word	0x053e2d63

0800302c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f003 0307 	and.w	r3, r3, #7
 800303a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800303c:	4b0c      	ldr	r3, [pc, #48]	; (8003070 <__NVIC_SetPriorityGrouping+0x44>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003048:	4013      	ands	r3, r2
 800304a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003054:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800305c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800305e:	4a04      	ldr	r2, [pc, #16]	; (8003070 <__NVIC_SetPriorityGrouping+0x44>)
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	60d3      	str	r3, [r2, #12]
}
 8003064:	bf00      	nop
 8003066:	3714      	adds	r7, #20
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	e000ed00 	.word	0xe000ed00

08003074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003078:	4b04      	ldr	r3, [pc, #16]	; (800308c <__NVIC_GetPriorityGrouping+0x18>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	0a1b      	lsrs	r3, r3, #8
 800307e:	f003 0307 	and.w	r3, r3, #7
}
 8003082:	4618      	mov	r0, r3
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	e000ed00 	.word	0xe000ed00

08003090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	6039      	str	r1, [r7, #0]
 800309a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800309c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	db0a      	blt.n	80030ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	b2da      	uxtb	r2, r3
 80030a8:	490c      	ldr	r1, [pc, #48]	; (80030dc <__NVIC_SetPriority+0x4c>)
 80030aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ae:	0112      	lsls	r2, r2, #4
 80030b0:	b2d2      	uxtb	r2, r2
 80030b2:	440b      	add	r3, r1
 80030b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030b8:	e00a      	b.n	80030d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	b2da      	uxtb	r2, r3
 80030be:	4908      	ldr	r1, [pc, #32]	; (80030e0 <__NVIC_SetPriority+0x50>)
 80030c0:	79fb      	ldrb	r3, [r7, #7]
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	3b04      	subs	r3, #4
 80030c8:	0112      	lsls	r2, r2, #4
 80030ca:	b2d2      	uxtb	r2, r2
 80030cc:	440b      	add	r3, r1
 80030ce:	761a      	strb	r2, [r3, #24]
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	e000e100 	.word	0xe000e100
 80030e0:	e000ed00 	.word	0xe000ed00

080030e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b089      	sub	sp, #36	; 0x24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f003 0307 	and.w	r3, r3, #7
 80030f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	f1c3 0307 	rsb	r3, r3, #7
 80030fe:	2b04      	cmp	r3, #4
 8003100:	bf28      	it	cs
 8003102:	2304      	movcs	r3, #4
 8003104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	3304      	adds	r3, #4
 800310a:	2b06      	cmp	r3, #6
 800310c:	d902      	bls.n	8003114 <NVIC_EncodePriority+0x30>
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	3b03      	subs	r3, #3
 8003112:	e000      	b.n	8003116 <NVIC_EncodePriority+0x32>
 8003114:	2300      	movs	r3, #0
 8003116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003118:	f04f 32ff 	mov.w	r2, #4294967295
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	fa02 f303 	lsl.w	r3, r2, r3
 8003122:	43da      	mvns	r2, r3
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	401a      	ands	r2, r3
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800312c:	f04f 31ff 	mov.w	r1, #4294967295
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	fa01 f303 	lsl.w	r3, r1, r3
 8003136:	43d9      	mvns	r1, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800313c:	4313      	orrs	r3, r2
         );
}
 800313e:	4618      	mov	r0, r3
 8003140:	3724      	adds	r7, #36	; 0x24
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
	...

0800314c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3b01      	subs	r3, #1
 8003158:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800315c:	d301      	bcc.n	8003162 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800315e:	2301      	movs	r3, #1
 8003160:	e00f      	b.n	8003182 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003162:	4a0a      	ldr	r2, [pc, #40]	; (800318c <SysTick_Config+0x40>)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	3b01      	subs	r3, #1
 8003168:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800316a:	210f      	movs	r1, #15
 800316c:	f04f 30ff 	mov.w	r0, #4294967295
 8003170:	f7ff ff8e 	bl	8003090 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003174:	4b05      	ldr	r3, [pc, #20]	; (800318c <SysTick_Config+0x40>)
 8003176:	2200      	movs	r2, #0
 8003178:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800317a:	4b04      	ldr	r3, [pc, #16]	; (800318c <SysTick_Config+0x40>)
 800317c:	2207      	movs	r2, #7
 800317e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	e000e010 	.word	0xe000e010

08003190 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f7ff ff47 	bl	800302c <__NVIC_SetPriorityGrouping>
}
 800319e:	bf00      	nop
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b086      	sub	sp, #24
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	4603      	mov	r3, r0
 80031ae:	60b9      	str	r1, [r7, #8]
 80031b0:	607a      	str	r2, [r7, #4]
 80031b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80031b4:	2300      	movs	r3, #0
 80031b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80031b8:	f7ff ff5c 	bl	8003074 <__NVIC_GetPriorityGrouping>
 80031bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	68b9      	ldr	r1, [r7, #8]
 80031c2:	6978      	ldr	r0, [r7, #20]
 80031c4:	f7ff ff8e 	bl	80030e4 <NVIC_EncodePriority>
 80031c8:	4602      	mov	r2, r0
 80031ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ce:	4611      	mov	r1, r2
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7ff ff5d 	bl	8003090 <__NVIC_SetPriority>
}
 80031d6:	bf00      	nop
 80031d8:	3718      	adds	r7, #24
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b082      	sub	sp, #8
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f7ff ffb0 	bl	800314c <SysTick_Config>
 80031ec:	4603      	mov	r3, r0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
	...

080031f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b087      	sub	sp, #28
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003202:	2300      	movs	r3, #0
 8003204:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003206:	e148      	b.n	800349a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	2101      	movs	r1, #1
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	fa01 f303 	lsl.w	r3, r1, r3
 8003214:	4013      	ands	r3, r2
 8003216:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2b00      	cmp	r3, #0
 800321c:	f000 813a 	beq.w	8003494 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f003 0303 	and.w	r3, r3, #3
 8003228:	2b01      	cmp	r3, #1
 800322a:	d005      	beq.n	8003238 <HAL_GPIO_Init+0x40>
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f003 0303 	and.w	r3, r3, #3
 8003234:	2b02      	cmp	r3, #2
 8003236:	d130      	bne.n	800329a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	2203      	movs	r2, #3
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	43db      	mvns	r3, r3
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	4013      	ands	r3, r2
 800324e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	68da      	ldr	r2, [r3, #12]
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	4313      	orrs	r3, r2
 8003260:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800326e:	2201      	movs	r2, #1
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	fa02 f303 	lsl.w	r3, r2, r3
 8003276:	43db      	mvns	r3, r3
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	4013      	ands	r3, r2
 800327c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	091b      	lsrs	r3, r3, #4
 8003284:	f003 0201 	and.w	r2, r3, #1
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	fa02 f303 	lsl.w	r3, r2, r3
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	4313      	orrs	r3, r2
 8003292:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f003 0303 	and.w	r3, r3, #3
 80032a2:	2b03      	cmp	r3, #3
 80032a4:	d017      	beq.n	80032d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	2203      	movs	r2, #3
 80032b2:	fa02 f303 	lsl.w	r3, r2, r3
 80032b6:	43db      	mvns	r3, r3
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	4013      	ands	r3, r2
 80032bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	689a      	ldr	r2, [r3, #8]
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f003 0303 	and.w	r3, r3, #3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d123      	bne.n	800332a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	08da      	lsrs	r2, r3, #3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	3208      	adds	r2, #8
 80032ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	f003 0307 	and.w	r3, r3, #7
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	220f      	movs	r2, #15
 80032fa:	fa02 f303 	lsl.w	r3, r2, r3
 80032fe:	43db      	mvns	r3, r3
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	4013      	ands	r3, r2
 8003304:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	691a      	ldr	r2, [r3, #16]
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	f003 0307 	and.w	r3, r3, #7
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	fa02 f303 	lsl.w	r3, r2, r3
 8003316:	693a      	ldr	r2, [r7, #16]
 8003318:	4313      	orrs	r3, r2
 800331a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	08da      	lsrs	r2, r3, #3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	3208      	adds	r2, #8
 8003324:	6939      	ldr	r1, [r7, #16]
 8003326:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	2203      	movs	r2, #3
 8003336:	fa02 f303 	lsl.w	r3, r2, r3
 800333a:	43db      	mvns	r3, r3
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	4013      	ands	r3, r2
 8003340:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f003 0203 	and.w	r2, r3, #3
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	fa02 f303 	lsl.w	r3, r2, r3
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	4313      	orrs	r3, r2
 8003356:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003366:	2b00      	cmp	r3, #0
 8003368:	f000 8094 	beq.w	8003494 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800336c:	4b52      	ldr	r3, [pc, #328]	; (80034b8 <HAL_GPIO_Init+0x2c0>)
 800336e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003370:	4a51      	ldr	r2, [pc, #324]	; (80034b8 <HAL_GPIO_Init+0x2c0>)
 8003372:	f043 0301 	orr.w	r3, r3, #1
 8003376:	6613      	str	r3, [r2, #96]	; 0x60
 8003378:	4b4f      	ldr	r3, [pc, #316]	; (80034b8 <HAL_GPIO_Init+0x2c0>)
 800337a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800337c:	f003 0301 	and.w	r3, r3, #1
 8003380:	60bb      	str	r3, [r7, #8]
 8003382:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003384:	4a4d      	ldr	r2, [pc, #308]	; (80034bc <HAL_GPIO_Init+0x2c4>)
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	089b      	lsrs	r3, r3, #2
 800338a:	3302      	adds	r3, #2
 800338c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003390:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	f003 0303 	and.w	r3, r3, #3
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	220f      	movs	r2, #15
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	43db      	mvns	r3, r3
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	4013      	ands	r3, r2
 80033a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80033ae:	d00d      	beq.n	80033cc <HAL_GPIO_Init+0x1d4>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a43      	ldr	r2, [pc, #268]	; (80034c0 <HAL_GPIO_Init+0x2c8>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d007      	beq.n	80033c8 <HAL_GPIO_Init+0x1d0>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a42      	ldr	r2, [pc, #264]	; (80034c4 <HAL_GPIO_Init+0x2cc>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d101      	bne.n	80033c4 <HAL_GPIO_Init+0x1cc>
 80033c0:	2302      	movs	r3, #2
 80033c2:	e004      	b.n	80033ce <HAL_GPIO_Init+0x1d6>
 80033c4:	2307      	movs	r3, #7
 80033c6:	e002      	b.n	80033ce <HAL_GPIO_Init+0x1d6>
 80033c8:	2301      	movs	r3, #1
 80033ca:	e000      	b.n	80033ce <HAL_GPIO_Init+0x1d6>
 80033cc:	2300      	movs	r3, #0
 80033ce:	697a      	ldr	r2, [r7, #20]
 80033d0:	f002 0203 	and.w	r2, r2, #3
 80033d4:	0092      	lsls	r2, r2, #2
 80033d6:	4093      	lsls	r3, r2
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	4313      	orrs	r3, r2
 80033dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80033de:	4937      	ldr	r1, [pc, #220]	; (80034bc <HAL_GPIO_Init+0x2c4>)
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	089b      	lsrs	r3, r3, #2
 80033e4:	3302      	adds	r3, #2
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80033ec:	4b36      	ldr	r3, [pc, #216]	; (80034c8 <HAL_GPIO_Init+0x2d0>)
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	43db      	mvns	r3, r3
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	4013      	ands	r3, r2
 80033fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d003      	beq.n	8003410 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	4313      	orrs	r3, r2
 800340e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003410:	4a2d      	ldr	r2, [pc, #180]	; (80034c8 <HAL_GPIO_Init+0x2d0>)
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003416:	4b2c      	ldr	r3, [pc, #176]	; (80034c8 <HAL_GPIO_Init+0x2d0>)
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	43db      	mvns	r3, r3
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	4013      	ands	r3, r2
 8003424:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	4313      	orrs	r3, r2
 8003438:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800343a:	4a23      	ldr	r2, [pc, #140]	; (80034c8 <HAL_GPIO_Init+0x2d0>)
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003440:	4b21      	ldr	r3, [pc, #132]	; (80034c8 <HAL_GPIO_Init+0x2d0>)
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	43db      	mvns	r3, r3
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	4013      	ands	r3, r2
 800344e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d003      	beq.n	8003464 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	4313      	orrs	r3, r2
 8003462:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003464:	4a18      	ldr	r2, [pc, #96]	; (80034c8 <HAL_GPIO_Init+0x2d0>)
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800346a:	4b17      	ldr	r3, [pc, #92]	; (80034c8 <HAL_GPIO_Init+0x2d0>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	43db      	mvns	r3, r3
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	4013      	ands	r3, r2
 8003478:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003486:	693a      	ldr	r2, [r7, #16]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	4313      	orrs	r3, r2
 800348c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800348e:	4a0e      	ldr	r2, [pc, #56]	; (80034c8 <HAL_GPIO_Init+0x2d0>)
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	3301      	adds	r3, #1
 8003498:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	fa22 f303 	lsr.w	r3, r2, r3
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f47f aeaf 	bne.w	8003208 <HAL_GPIO_Init+0x10>
  }
}
 80034aa:	bf00      	nop
 80034ac:	bf00      	nop
 80034ae:	371c      	adds	r7, #28
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr
 80034b8:	40021000 	.word	0x40021000
 80034bc:	40010000 	.word	0x40010000
 80034c0:	48000400 	.word	0x48000400
 80034c4:	48000800 	.word	0x48000800
 80034c8:	40010400 	.word	0x40010400

080034cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	460b      	mov	r3, r1
 80034d6:	807b      	strh	r3, [r7, #2]
 80034d8:	4613      	mov	r3, r2
 80034da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034dc:	787b      	ldrb	r3, [r7, #1]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d003      	beq.n	80034ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034e2:	887a      	ldrh	r2, [r7, #2]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80034e8:	e002      	b.n	80034f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80034ea:	887a      	ldrh	r2, [r7, #2]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e08d      	b.n	800362a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d106      	bne.n	8003528 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f7fe faac 	bl	8001a80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2224      	movs	r2, #36	; 0x24
 800352c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f022 0201 	bic.w	r2, r2, #1
 800353e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685a      	ldr	r2, [r3, #4]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800354c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800355c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d107      	bne.n	8003576 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	689a      	ldr	r2, [r3, #8]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003572:	609a      	str	r2, [r3, #8]
 8003574:	e006      	b.n	8003584 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	689a      	ldr	r2, [r3, #8]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003582:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	2b02      	cmp	r3, #2
 800358a:	d108      	bne.n	800359e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	685a      	ldr	r2, [r3, #4]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800359a:	605a      	str	r2, [r3, #4]
 800359c:	e007      	b.n	80035ae <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	685a      	ldr	r2, [r3, #4]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	6812      	ldr	r2, [r2, #0]
 80035b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80035bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035c0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68da      	ldr	r2, [r3, #12]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	691a      	ldr	r2, [r3, #16]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	430a      	orrs	r2, r1
 80035ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	69d9      	ldr	r1, [r3, #28]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a1a      	ldr	r2, [r3, #32]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	430a      	orrs	r2, r1
 80035fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f042 0201 	orr.w	r2, r2, #1
 800360a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2220      	movs	r2, #32
 8003616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3708      	adds	r7, #8
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
	...

08003634 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b088      	sub	sp, #32
 8003638:	af02      	add	r7, sp, #8
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	4608      	mov	r0, r1
 800363e:	4611      	mov	r1, r2
 8003640:	461a      	mov	r2, r3
 8003642:	4603      	mov	r3, r0
 8003644:	817b      	strh	r3, [r7, #10]
 8003646:	460b      	mov	r3, r1
 8003648:	813b      	strh	r3, [r7, #8]
 800364a:	4613      	mov	r3, r2
 800364c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b20      	cmp	r3, #32
 8003658:	f040 80f9 	bne.w	800384e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800365c:	6a3b      	ldr	r3, [r7, #32]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d002      	beq.n	8003668 <HAL_I2C_Mem_Write+0x34>
 8003662:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003664:	2b00      	cmp	r3, #0
 8003666:	d105      	bne.n	8003674 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800366e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e0ed      	b.n	8003850 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800367a:	2b01      	cmp	r3, #1
 800367c:	d101      	bne.n	8003682 <HAL_I2C_Mem_Write+0x4e>
 800367e:	2302      	movs	r3, #2
 8003680:	e0e6      	b.n	8003850 <HAL_I2C_Mem_Write+0x21c>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800368a:	f7fe fc2d 	bl	8001ee8 <HAL_GetTick>
 800368e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	9300      	str	r3, [sp, #0]
 8003694:	2319      	movs	r3, #25
 8003696:	2201      	movs	r2, #1
 8003698:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f000 f955 	bl	800394c <I2C_WaitOnFlagUntilTimeout>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d001      	beq.n	80036ac <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e0d1      	b.n	8003850 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2221      	movs	r2, #33	; 0x21
 80036b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2240      	movs	r2, #64	; 0x40
 80036b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6a3a      	ldr	r2, [r7, #32]
 80036c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80036cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036d4:	88f8      	ldrh	r0, [r7, #6]
 80036d6:	893a      	ldrh	r2, [r7, #8]
 80036d8:	8979      	ldrh	r1, [r7, #10]
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	9301      	str	r3, [sp, #4]
 80036de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e0:	9300      	str	r3, [sp, #0]
 80036e2:	4603      	mov	r3, r0
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f000 f8b9 	bl	800385c <I2C_RequestMemoryWrite>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d005      	beq.n	80036fc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e0a9      	b.n	8003850 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003700:	b29b      	uxth	r3, r3
 8003702:	2bff      	cmp	r3, #255	; 0xff
 8003704:	d90e      	bls.n	8003724 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	22ff      	movs	r2, #255	; 0xff
 800370a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003710:	b2da      	uxtb	r2, r3
 8003712:	8979      	ldrh	r1, [r7, #10]
 8003714:	2300      	movs	r3, #0
 8003716:	9300      	str	r3, [sp, #0]
 8003718:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800371c:	68f8      	ldr	r0, [r7, #12]
 800371e:	f000 facf 	bl	8003cc0 <I2C_TransferConfig>
 8003722:	e00f      	b.n	8003744 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003728:	b29a      	uxth	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003732:	b2da      	uxtb	r2, r3
 8003734:	8979      	ldrh	r1, [r7, #10]
 8003736:	2300      	movs	r3, #0
 8003738:	9300      	str	r3, [sp, #0]
 800373a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	f000 fabe 	bl	8003cc0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f000 f94e 	bl	80039ea <I2C_WaitOnTXISFlagUntilTimeout>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e07b      	b.n	8003850 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375c:	781a      	ldrb	r2, [r3, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003768:	1c5a      	adds	r2, r3, #1
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003772:	b29b      	uxth	r3, r3
 8003774:	3b01      	subs	r3, #1
 8003776:	b29a      	uxth	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003780:	3b01      	subs	r3, #1
 8003782:	b29a      	uxth	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800378c:	b29b      	uxth	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d034      	beq.n	80037fc <HAL_I2C_Mem_Write+0x1c8>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003796:	2b00      	cmp	r3, #0
 8003798:	d130      	bne.n	80037fc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	9300      	str	r3, [sp, #0]
 800379e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a0:	2200      	movs	r2, #0
 80037a2:	2180      	movs	r1, #128	; 0x80
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f000 f8d1 	bl	800394c <I2C_WaitOnFlagUntilTimeout>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d001      	beq.n	80037b4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e04d      	b.n	8003850 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	2bff      	cmp	r3, #255	; 0xff
 80037bc:	d90e      	bls.n	80037dc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	22ff      	movs	r2, #255	; 0xff
 80037c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037c8:	b2da      	uxtb	r2, r3
 80037ca:	8979      	ldrh	r1, [r7, #10]
 80037cc:	2300      	movs	r3, #0
 80037ce:	9300      	str	r3, [sp, #0]
 80037d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f000 fa73 	bl	8003cc0 <I2C_TransferConfig>
 80037da:	e00f      	b.n	80037fc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e0:	b29a      	uxth	r2, r3
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ea:	b2da      	uxtb	r2, r3
 80037ec:	8979      	ldrh	r1, [r7, #10]
 80037ee:	2300      	movs	r3, #0
 80037f0:	9300      	str	r3, [sp, #0]
 80037f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f000 fa62 	bl	8003cc0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003800:	b29b      	uxth	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d19e      	bne.n	8003744 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f000 f934 	bl	8003a78 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e01a      	b.n	8003850 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2220      	movs	r2, #32
 8003820:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	6859      	ldr	r1, [r3, #4]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	4b0a      	ldr	r3, [pc, #40]	; (8003858 <HAL_I2C_Mem_Write+0x224>)
 800382e:	400b      	ands	r3, r1
 8003830:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2220      	movs	r2, #32
 8003836:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800384a:	2300      	movs	r3, #0
 800384c:	e000      	b.n	8003850 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800384e:	2302      	movs	r3, #2
  }
}
 8003850:	4618      	mov	r0, r3
 8003852:	3718      	adds	r7, #24
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	fe00e800 	.word	0xfe00e800

0800385c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af02      	add	r7, sp, #8
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	4608      	mov	r0, r1
 8003866:	4611      	mov	r1, r2
 8003868:	461a      	mov	r2, r3
 800386a:	4603      	mov	r3, r0
 800386c:	817b      	strh	r3, [r7, #10]
 800386e:	460b      	mov	r3, r1
 8003870:	813b      	strh	r3, [r7, #8]
 8003872:	4613      	mov	r3, r2
 8003874:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003876:	88fb      	ldrh	r3, [r7, #6]
 8003878:	b2da      	uxtb	r2, r3
 800387a:	8979      	ldrh	r1, [r7, #10]
 800387c:	4b20      	ldr	r3, [pc, #128]	; (8003900 <I2C_RequestMemoryWrite+0xa4>)
 800387e:	9300      	str	r3, [sp, #0]
 8003880:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f000 fa1b 	bl	8003cc0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800388a:	69fa      	ldr	r2, [r7, #28]
 800388c:	69b9      	ldr	r1, [r7, #24]
 800388e:	68f8      	ldr	r0, [r7, #12]
 8003890:	f000 f8ab 	bl	80039ea <I2C_WaitOnTXISFlagUntilTimeout>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e02c      	b.n	80038f8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800389e:	88fb      	ldrh	r3, [r7, #6]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d105      	bne.n	80038b0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80038a4:	893b      	ldrh	r3, [r7, #8]
 80038a6:	b2da      	uxtb	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	629a      	str	r2, [r3, #40]	; 0x28
 80038ae:	e015      	b.n	80038dc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80038b0:	893b      	ldrh	r3, [r7, #8]
 80038b2:	0a1b      	lsrs	r3, r3, #8
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	b2da      	uxtb	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038be:	69fa      	ldr	r2, [r7, #28]
 80038c0:	69b9      	ldr	r1, [r7, #24]
 80038c2:	68f8      	ldr	r0, [r7, #12]
 80038c4:	f000 f891 	bl	80039ea <I2C_WaitOnTXISFlagUntilTimeout>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e012      	b.n	80038f8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80038d2:	893b      	ldrh	r3, [r7, #8]
 80038d4:	b2da      	uxtb	r2, r3
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	2200      	movs	r2, #0
 80038e4:	2180      	movs	r1, #128	; 0x80
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f000 f830 	bl	800394c <I2C_WaitOnFlagUntilTimeout>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e000      	b.n	80038f8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	80002000 	.word	0x80002000

08003904 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b02      	cmp	r3, #2
 8003918:	d103      	bne.n	8003922 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2200      	movs	r2, #0
 8003920:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	f003 0301 	and.w	r3, r3, #1
 800392c:	2b01      	cmp	r3, #1
 800392e:	d007      	beq.n	8003940 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	699a      	ldr	r2, [r3, #24]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f042 0201 	orr.w	r2, r2, #1
 800393e:	619a      	str	r2, [r3, #24]
  }
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	603b      	str	r3, [r7, #0]
 8003958:	4613      	mov	r3, r2
 800395a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800395c:	e031      	b.n	80039c2 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003964:	d02d      	beq.n	80039c2 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003966:	f7fe fabf 	bl	8001ee8 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	683a      	ldr	r2, [r7, #0]
 8003972:	429a      	cmp	r2, r3
 8003974:	d302      	bcc.n	800397c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d122      	bne.n	80039c2 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	699a      	ldr	r2, [r3, #24]
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	4013      	ands	r3, r2
 8003986:	68ba      	ldr	r2, [r7, #8]
 8003988:	429a      	cmp	r2, r3
 800398a:	bf0c      	ite	eq
 800398c:	2301      	moveq	r3, #1
 800398e:	2300      	movne	r3, #0
 8003990:	b2db      	uxtb	r3, r3
 8003992:	461a      	mov	r2, r3
 8003994:	79fb      	ldrb	r3, [r7, #7]
 8003996:	429a      	cmp	r2, r3
 8003998:	d113      	bne.n	80039c2 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399e:	f043 0220 	orr.w	r2, r3, #32
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2220      	movs	r2, #32
 80039aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e00f      	b.n	80039e2 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	699a      	ldr	r2, [r3, #24]
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	4013      	ands	r3, r2
 80039cc:	68ba      	ldr	r2, [r7, #8]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	bf0c      	ite	eq
 80039d2:	2301      	moveq	r3, #1
 80039d4:	2300      	movne	r3, #0
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	461a      	mov	r2, r3
 80039da:	79fb      	ldrb	r3, [r7, #7]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d0be      	beq.n	800395e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3710      	adds	r7, #16
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b084      	sub	sp, #16
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	60f8      	str	r0, [r7, #12]
 80039f2:	60b9      	str	r1, [r7, #8]
 80039f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80039f6:	e033      	b.n	8003a60 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	68b9      	ldr	r1, [r7, #8]
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f000 f87f 	bl	8003b00 <I2C_IsErrorOccurred>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d001      	beq.n	8003a0c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e031      	b.n	8003a70 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a12:	d025      	beq.n	8003a60 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a14:	f7fe fa68 	bl	8001ee8 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	68ba      	ldr	r2, [r7, #8]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d302      	bcc.n	8003a2a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d11a      	bne.n	8003a60 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	f003 0302 	and.w	r3, r3, #2
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d013      	beq.n	8003a60 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3c:	f043 0220 	orr.w	r2, r3, #32
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2220      	movs	r2, #32
 8003a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e007      	b.n	8003a70 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	f003 0302 	and.w	r3, r3, #2
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d1c4      	bne.n	80039f8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a84:	e02f      	b.n	8003ae6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	68b9      	ldr	r1, [r7, #8]
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f000 f838 	bl	8003b00 <I2C_IsErrorOccurred>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e02d      	b.n	8003af6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a9a:	f7fe fa25 	bl	8001ee8 <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	68ba      	ldr	r2, [r7, #8]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d302      	bcc.n	8003ab0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d11a      	bne.n	8003ae6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	f003 0320 	and.w	r3, r3, #32
 8003aba:	2b20      	cmp	r3, #32
 8003abc:	d013      	beq.n	8003ae6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac2:	f043 0220 	orr.w	r2, r3, #32
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2220      	movs	r2, #32
 8003ace:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e007      	b.n	8003af6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	f003 0320 	and.w	r3, r3, #32
 8003af0:	2b20      	cmp	r3, #32
 8003af2:	d1c8      	bne.n	8003a86 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3710      	adds	r7, #16
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
	...

08003b00 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b08a      	sub	sp, #40	; 0x28
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	f003 0310 	and.w	r3, r3, #16
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d068      	beq.n	8003bfe <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2210      	movs	r2, #16
 8003b32:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003b34:	e049      	b.n	8003bca <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b3c:	d045      	beq.n	8003bca <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003b3e:	f7fe f9d3 	bl	8001ee8 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	68ba      	ldr	r2, [r7, #8]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d302      	bcc.n	8003b54 <I2C_IsErrorOccurred+0x54>
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d13a      	bne.n	8003bca <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b5e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b66:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b76:	d121      	bne.n	8003bbc <I2C_IsErrorOccurred+0xbc>
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b7e:	d01d      	beq.n	8003bbc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003b80:	7cfb      	ldrb	r3, [r7, #19]
 8003b82:	2b20      	cmp	r3, #32
 8003b84:	d01a      	beq.n	8003bbc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	685a      	ldr	r2, [r3, #4]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b94:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003b96:	f7fe f9a7 	bl	8001ee8 <HAL_GetTick>
 8003b9a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b9c:	e00e      	b.n	8003bbc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003b9e:	f7fe f9a3 	bl	8001ee8 <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	2b19      	cmp	r3, #25
 8003baa:	d907      	bls.n	8003bbc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003bac:	6a3b      	ldr	r3, [r7, #32]
 8003bae:	f043 0320 	orr.w	r3, r3, #32
 8003bb2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003bba:	e006      	b.n	8003bca <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	f003 0320 	and.w	r3, r3, #32
 8003bc6:	2b20      	cmp	r3, #32
 8003bc8:	d1e9      	bne.n	8003b9e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	f003 0320 	and.w	r3, r3, #32
 8003bd4:	2b20      	cmp	r3, #32
 8003bd6:	d003      	beq.n	8003be0 <I2C_IsErrorOccurred+0xe0>
 8003bd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d0aa      	beq.n	8003b36 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003be0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d103      	bne.n	8003bf0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2220      	movs	r2, #32
 8003bee:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003bf0:	6a3b      	ldr	r3, [r7, #32]
 8003bf2:	f043 0304 	orr.w	r3, r3, #4
 8003bf6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d00b      	beq.n	8003c28 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003c10:	6a3b      	ldr	r3, [r7, #32]
 8003c12:	f043 0301 	orr.w	r3, r3, #1
 8003c16:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c20:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00b      	beq.n	8003c4a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003c32:	6a3b      	ldr	r3, [r7, #32]
 8003c34:	f043 0308 	orr.w	r3, r3, #8
 8003c38:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c42:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00b      	beq.n	8003c6c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003c54:	6a3b      	ldr	r3, [r7, #32]
 8003c56:	f043 0302 	orr.w	r3, r3, #2
 8003c5a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c64:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003c6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d01c      	beq.n	8003cae <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003c74:	68f8      	ldr	r0, [r7, #12]
 8003c76:	f7ff fe45 	bl	8003904 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	6859      	ldr	r1, [r3, #4]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	4b0d      	ldr	r3, [pc, #52]	; (8003cbc <I2C_IsErrorOccurred+0x1bc>)
 8003c86:	400b      	ands	r3, r1
 8003c88:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c8e:	6a3b      	ldr	r3, [r7, #32]
 8003c90:	431a      	orrs	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2220      	movs	r2, #32
 8003c9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003cae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3728      	adds	r7, #40	; 0x28
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	fe00e800 	.word	0xfe00e800

08003cc0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b087      	sub	sp, #28
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	607b      	str	r3, [r7, #4]
 8003cca:	460b      	mov	r3, r1
 8003ccc:	817b      	strh	r3, [r7, #10]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003cd2:	897b      	ldrh	r3, [r7, #10]
 8003cd4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003cd8:	7a7b      	ldrb	r3, [r7, #9]
 8003cda:	041b      	lsls	r3, r3, #16
 8003cdc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ce0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ce6:	6a3b      	ldr	r3, [r7, #32]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003cee:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	685a      	ldr	r2, [r3, #4]
 8003cf6:	6a3b      	ldr	r3, [r7, #32]
 8003cf8:	0d5b      	lsrs	r3, r3, #21
 8003cfa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003cfe:	4b08      	ldr	r3, [pc, #32]	; (8003d20 <I2C_TransferConfig+0x60>)
 8003d00:	430b      	orrs	r3, r1
 8003d02:	43db      	mvns	r3, r3
 8003d04:	ea02 0103 	and.w	r1, r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	697a      	ldr	r2, [r7, #20]
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003d12:	bf00      	nop
 8003d14:	371c      	adds	r7, #28
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	03ff63ff 	.word	0x03ff63ff

08003d24 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b20      	cmp	r3, #32
 8003d38:	d138      	bne.n	8003dac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d101      	bne.n	8003d48 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d44:	2302      	movs	r3, #2
 8003d46:	e032      	b.n	8003dae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2224      	movs	r2, #36	; 0x24
 8003d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f022 0201 	bic.w	r2, r2, #1
 8003d66:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d76:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6819      	ldr	r1, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	683a      	ldr	r2, [r7, #0]
 8003d84:	430a      	orrs	r2, r1
 8003d86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f042 0201 	orr.w	r2, r2, #1
 8003d96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003da8:	2300      	movs	r3, #0
 8003daa:	e000      	b.n	8003dae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003dac:	2302      	movs	r3, #2
  }
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	370c      	adds	r7, #12
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr

08003dba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003dba:	b480      	push	{r7}
 8003dbc:	b085      	sub	sp, #20
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
 8003dc2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	2b20      	cmp	r3, #32
 8003dce:	d139      	bne.n	8003e44 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d101      	bne.n	8003dde <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003dda:	2302      	movs	r3, #2
 8003ddc:	e033      	b.n	8003e46 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2201      	movs	r2, #1
 8003de2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2224      	movs	r2, #36	; 0x24
 8003dea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f022 0201 	bic.w	r2, r2, #1
 8003dfc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003e0c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	021b      	lsls	r3, r3, #8
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f042 0201 	orr.w	r2, r2, #1
 8003e2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2220      	movs	r2, #32
 8003e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e40:	2300      	movs	r3, #0
 8003e42:	e000      	b.n	8003e46 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e44:	2302      	movs	r3, #2
  }
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3714      	adds	r7, #20
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
	...

08003e54 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003e54:	b480      	push	{r7}
 8003e56:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e58:	4b05      	ldr	r3, [pc, #20]	; (8003e70 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a04      	ldr	r2, [pc, #16]	; (8003e70 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e62:	6013      	str	r3, [r2, #0]
}
 8003e64:	bf00      	nop
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	40007000 	.word	0x40007000

08003e74 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003e74:	b480      	push	{r7}
 8003e76:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003e78:	4b04      	ldr	r3, [pc, #16]	; (8003e8c <HAL_PWREx_GetVoltageRange+0x18>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	40007000 	.word	0x40007000

08003e90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e9e:	d130      	bne.n	8003f02 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ea0:	4b23      	ldr	r3, [pc, #140]	; (8003f30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ea8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003eac:	d038      	beq.n	8003f20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003eae:	4b20      	ldr	r3, [pc, #128]	; (8003f30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003eb6:	4a1e      	ldr	r2, [pc, #120]	; (8003f30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003eb8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ebc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ebe:	4b1d      	ldr	r3, [pc, #116]	; (8003f34 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2232      	movs	r2, #50	; 0x32
 8003ec4:	fb02 f303 	mul.w	r3, r2, r3
 8003ec8:	4a1b      	ldr	r2, [pc, #108]	; (8003f38 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003eca:	fba2 2303 	umull	r2, r3, r2, r3
 8003ece:	0c9b      	lsrs	r3, r3, #18
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ed4:	e002      	b.n	8003edc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003edc:	4b14      	ldr	r3, [pc, #80]	; (8003f30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ee4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ee8:	d102      	bne.n	8003ef0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1f2      	bne.n	8003ed6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ef0:	4b0f      	ldr	r3, [pc, #60]	; (8003f30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ef8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003efc:	d110      	bne.n	8003f20 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e00f      	b.n	8003f22 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f02:	4b0b      	ldr	r3, [pc, #44]	; (8003f30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f0e:	d007      	beq.n	8003f20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003f10:	4b07      	ldr	r3, [pc, #28]	; (8003f30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f18:	4a05      	ldr	r2, [pc, #20]	; (8003f30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f1e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3714      	adds	r7, #20
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	40007000 	.word	0x40007000
 8003f34:	20000008 	.word	0x20000008
 8003f38:	431bde83 	.word	0x431bde83

08003f3c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b088      	sub	sp, #32
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d102      	bne.n	8003f50 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	f000 bc02 	b.w	8004754 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f50:	4b96      	ldr	r3, [pc, #600]	; (80041ac <HAL_RCC_OscConfig+0x270>)
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f003 030c 	and.w	r3, r3, #12
 8003f58:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f5a:	4b94      	ldr	r3, [pc, #592]	; (80041ac <HAL_RCC_OscConfig+0x270>)
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	f003 0303 	and.w	r3, r3, #3
 8003f62:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0310 	and.w	r3, r3, #16
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f000 80e4 	beq.w	800413a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d007      	beq.n	8003f88 <HAL_RCC_OscConfig+0x4c>
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	2b0c      	cmp	r3, #12
 8003f7c:	f040 808b 	bne.w	8004096 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	f040 8087 	bne.w	8004096 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f88:	4b88      	ldr	r3, [pc, #544]	; (80041ac <HAL_RCC_OscConfig+0x270>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0302 	and.w	r3, r3, #2
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d005      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x64>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d101      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e3d9      	b.n	8004754 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a1a      	ldr	r2, [r3, #32]
 8003fa4:	4b81      	ldr	r3, [pc, #516]	; (80041ac <HAL_RCC_OscConfig+0x270>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0308 	and.w	r3, r3, #8
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d004      	beq.n	8003fba <HAL_RCC_OscConfig+0x7e>
 8003fb0:	4b7e      	ldr	r3, [pc, #504]	; (80041ac <HAL_RCC_OscConfig+0x270>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fb8:	e005      	b.n	8003fc6 <HAL_RCC_OscConfig+0x8a>
 8003fba:	4b7c      	ldr	r3, [pc, #496]	; (80041ac <HAL_RCC_OscConfig+0x270>)
 8003fbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fc0:	091b      	lsrs	r3, r3, #4
 8003fc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d223      	bcs.n	8004012 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f000 fd8c 	bl	8004aec <RCC_SetFlashLatencyFromMSIRange>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e3ba      	b.n	8004754 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fde:	4b73      	ldr	r3, [pc, #460]	; (80041ac <HAL_RCC_OscConfig+0x270>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a72      	ldr	r2, [pc, #456]	; (80041ac <HAL_RCC_OscConfig+0x270>)
 8003fe4:	f043 0308 	orr.w	r3, r3, #8
 8003fe8:	6013      	str	r3, [r2, #0]
 8003fea:	4b70      	ldr	r3, [pc, #448]	; (80041ac <HAL_RCC_OscConfig+0x270>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	496d      	ldr	r1, [pc, #436]	; (80041ac <HAL_RCC_OscConfig+0x270>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ffc:	4b6b      	ldr	r3, [pc, #428]	; (80041ac <HAL_RCC_OscConfig+0x270>)
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	69db      	ldr	r3, [r3, #28]
 8004008:	021b      	lsls	r3, r3, #8
 800400a:	4968      	ldr	r1, [pc, #416]	; (80041ac <HAL_RCC_OscConfig+0x270>)
 800400c:	4313      	orrs	r3, r2
 800400e:	604b      	str	r3, [r1, #4]
 8004010:	e025      	b.n	800405e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004012:	4b66      	ldr	r3, [pc, #408]	; (80041ac <HAL_RCC_OscConfig+0x270>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a65      	ldr	r2, [pc, #404]	; (80041ac <HAL_RCC_OscConfig+0x270>)
 8004018:	f043 0308 	orr.w	r3, r3, #8
 800401c:	6013      	str	r3, [r2, #0]
 800401e:	4b63      	ldr	r3, [pc, #396]	; (80041ac <HAL_RCC_OscConfig+0x270>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	4960      	ldr	r1, [pc, #384]	; (80041ac <HAL_RCC_OscConfig+0x270>)
 800402c:	4313      	orrs	r3, r2
 800402e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004030:	4b5e      	ldr	r3, [pc, #376]	; (80041ac <HAL_RCC_OscConfig+0x270>)
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	69db      	ldr	r3, [r3, #28]
 800403c:	021b      	lsls	r3, r3, #8
 800403e:	495b      	ldr	r1, [pc, #364]	; (80041ac <HAL_RCC_OscConfig+0x270>)
 8004040:	4313      	orrs	r3, r2
 8004042:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d109      	bne.n	800405e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	4618      	mov	r0, r3
 8004050:	f000 fd4c 	bl	8004aec <RCC_SetFlashLatencyFromMSIRange>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e37a      	b.n	8004754 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800405e:	f000 fc81 	bl	8004964 <HAL_RCC_GetSysClockFreq>
 8004062:	4602      	mov	r2, r0
 8004064:	4b51      	ldr	r3, [pc, #324]	; (80041ac <HAL_RCC_OscConfig+0x270>)
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	091b      	lsrs	r3, r3, #4
 800406a:	f003 030f 	and.w	r3, r3, #15
 800406e:	4950      	ldr	r1, [pc, #320]	; (80041b0 <HAL_RCC_OscConfig+0x274>)
 8004070:	5ccb      	ldrb	r3, [r1, r3]
 8004072:	f003 031f 	and.w	r3, r3, #31
 8004076:	fa22 f303 	lsr.w	r3, r2, r3
 800407a:	4a4e      	ldr	r2, [pc, #312]	; (80041b4 <HAL_RCC_OscConfig+0x278>)
 800407c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800407e:	4b4e      	ldr	r3, [pc, #312]	; (80041b8 <HAL_RCC_OscConfig+0x27c>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4618      	mov	r0, r3
 8004084:	f7fd fee0 	bl	8001e48 <HAL_InitTick>
 8004088:	4603      	mov	r3, r0
 800408a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800408c:	7bfb      	ldrb	r3, [r7, #15]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d052      	beq.n	8004138 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004092:	7bfb      	ldrb	r3, [r7, #15]
 8004094:	e35e      	b.n	8004754 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d032      	beq.n	8004104 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800409e:	4b43      	ldr	r3, [pc, #268]	; (80041ac <HAL_RCC_OscConfig+0x270>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a42      	ldr	r2, [pc, #264]	; (80041ac <HAL_RCC_OscConfig+0x270>)
 80040a4:	f043 0301 	orr.w	r3, r3, #1
 80040a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80040aa:	f7fd ff1d 	bl	8001ee8 <HAL_GetTick>
 80040ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040b0:	e008      	b.n	80040c4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040b2:	f7fd ff19 	bl	8001ee8 <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d901      	bls.n	80040c4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e347      	b.n	8004754 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040c4:	4b39      	ldr	r3, [pc, #228]	; (80041ac <HAL_RCC_OscConfig+0x270>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d0f0      	beq.n	80040b2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040d0:	4b36      	ldr	r3, [pc, #216]	; (80041ac <HAL_RCC_OscConfig+0x270>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a35      	ldr	r2, [pc, #212]	; (80041ac <HAL_RCC_OscConfig+0x270>)
 80040d6:	f043 0308 	orr.w	r3, r3, #8
 80040da:	6013      	str	r3, [r2, #0]
 80040dc:	4b33      	ldr	r3, [pc, #204]	; (80041ac <HAL_RCC_OscConfig+0x270>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a1b      	ldr	r3, [r3, #32]
 80040e8:	4930      	ldr	r1, [pc, #192]	; (80041ac <HAL_RCC_OscConfig+0x270>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040ee:	4b2f      	ldr	r3, [pc, #188]	; (80041ac <HAL_RCC_OscConfig+0x270>)
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	69db      	ldr	r3, [r3, #28]
 80040fa:	021b      	lsls	r3, r3, #8
 80040fc:	492b      	ldr	r1, [pc, #172]	; (80041ac <HAL_RCC_OscConfig+0x270>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	604b      	str	r3, [r1, #4]
 8004102:	e01a      	b.n	800413a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004104:	4b29      	ldr	r3, [pc, #164]	; (80041ac <HAL_RCC_OscConfig+0x270>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a28      	ldr	r2, [pc, #160]	; (80041ac <HAL_RCC_OscConfig+0x270>)
 800410a:	f023 0301 	bic.w	r3, r3, #1
 800410e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004110:	f7fd feea 	bl	8001ee8 <HAL_GetTick>
 8004114:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004116:	e008      	b.n	800412a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004118:	f7fd fee6 	bl	8001ee8 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b02      	cmp	r3, #2
 8004124:	d901      	bls.n	800412a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e314      	b.n	8004754 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800412a:	4b20      	ldr	r3, [pc, #128]	; (80041ac <HAL_RCC_OscConfig+0x270>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1f0      	bne.n	8004118 <HAL_RCC_OscConfig+0x1dc>
 8004136:	e000      	b.n	800413a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004138:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	2b00      	cmp	r3, #0
 8004144:	d073      	beq.n	800422e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	2b08      	cmp	r3, #8
 800414a:	d005      	beq.n	8004158 <HAL_RCC_OscConfig+0x21c>
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	2b0c      	cmp	r3, #12
 8004150:	d10e      	bne.n	8004170 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	2b03      	cmp	r3, #3
 8004156:	d10b      	bne.n	8004170 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004158:	4b14      	ldr	r3, [pc, #80]	; (80041ac <HAL_RCC_OscConfig+0x270>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d063      	beq.n	800422c <HAL_RCC_OscConfig+0x2f0>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d15f      	bne.n	800422c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e2f1      	b.n	8004754 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004178:	d106      	bne.n	8004188 <HAL_RCC_OscConfig+0x24c>
 800417a:	4b0c      	ldr	r3, [pc, #48]	; (80041ac <HAL_RCC_OscConfig+0x270>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a0b      	ldr	r2, [pc, #44]	; (80041ac <HAL_RCC_OscConfig+0x270>)
 8004180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004184:	6013      	str	r3, [r2, #0]
 8004186:	e025      	b.n	80041d4 <HAL_RCC_OscConfig+0x298>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004190:	d114      	bne.n	80041bc <HAL_RCC_OscConfig+0x280>
 8004192:	4b06      	ldr	r3, [pc, #24]	; (80041ac <HAL_RCC_OscConfig+0x270>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a05      	ldr	r2, [pc, #20]	; (80041ac <HAL_RCC_OscConfig+0x270>)
 8004198:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800419c:	6013      	str	r3, [r2, #0]
 800419e:	4b03      	ldr	r3, [pc, #12]	; (80041ac <HAL_RCC_OscConfig+0x270>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a02      	ldr	r2, [pc, #8]	; (80041ac <HAL_RCC_OscConfig+0x270>)
 80041a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041a8:	6013      	str	r3, [r2, #0]
 80041aa:	e013      	b.n	80041d4 <HAL_RCC_OscConfig+0x298>
 80041ac:	40021000 	.word	0x40021000
 80041b0:	080083b0 	.word	0x080083b0
 80041b4:	20000008 	.word	0x20000008
 80041b8:	2000000c 	.word	0x2000000c
 80041bc:	4ba0      	ldr	r3, [pc, #640]	; (8004440 <HAL_RCC_OscConfig+0x504>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a9f      	ldr	r2, [pc, #636]	; (8004440 <HAL_RCC_OscConfig+0x504>)
 80041c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041c6:	6013      	str	r3, [r2, #0]
 80041c8:	4b9d      	ldr	r3, [pc, #628]	; (8004440 <HAL_RCC_OscConfig+0x504>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a9c      	ldr	r2, [pc, #624]	; (8004440 <HAL_RCC_OscConfig+0x504>)
 80041ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d013      	beq.n	8004204 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041dc:	f7fd fe84 	bl	8001ee8 <HAL_GetTick>
 80041e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041e2:	e008      	b.n	80041f6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041e4:	f7fd fe80 	bl	8001ee8 <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	2b64      	cmp	r3, #100	; 0x64
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e2ae      	b.n	8004754 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041f6:	4b92      	ldr	r3, [pc, #584]	; (8004440 <HAL_RCC_OscConfig+0x504>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d0f0      	beq.n	80041e4 <HAL_RCC_OscConfig+0x2a8>
 8004202:	e014      	b.n	800422e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004204:	f7fd fe70 	bl	8001ee8 <HAL_GetTick>
 8004208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800420a:	e008      	b.n	800421e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800420c:	f7fd fe6c 	bl	8001ee8 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	2b64      	cmp	r3, #100	; 0x64
 8004218:	d901      	bls.n	800421e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e29a      	b.n	8004754 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800421e:	4b88      	ldr	r3, [pc, #544]	; (8004440 <HAL_RCC_OscConfig+0x504>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1f0      	bne.n	800420c <HAL_RCC_OscConfig+0x2d0>
 800422a:	e000      	b.n	800422e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800422c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d060      	beq.n	80042fc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	2b04      	cmp	r3, #4
 800423e:	d005      	beq.n	800424c <HAL_RCC_OscConfig+0x310>
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	2b0c      	cmp	r3, #12
 8004244:	d119      	bne.n	800427a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	2b02      	cmp	r3, #2
 800424a:	d116      	bne.n	800427a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800424c:	4b7c      	ldr	r3, [pc, #496]	; (8004440 <HAL_RCC_OscConfig+0x504>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004254:	2b00      	cmp	r3, #0
 8004256:	d005      	beq.n	8004264 <HAL_RCC_OscConfig+0x328>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d101      	bne.n	8004264 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e277      	b.n	8004754 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004264:	4b76      	ldr	r3, [pc, #472]	; (8004440 <HAL_RCC_OscConfig+0x504>)
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	061b      	lsls	r3, r3, #24
 8004272:	4973      	ldr	r1, [pc, #460]	; (8004440 <HAL_RCC_OscConfig+0x504>)
 8004274:	4313      	orrs	r3, r2
 8004276:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004278:	e040      	b.n	80042fc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d023      	beq.n	80042ca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004282:	4b6f      	ldr	r3, [pc, #444]	; (8004440 <HAL_RCC_OscConfig+0x504>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a6e      	ldr	r2, [pc, #440]	; (8004440 <HAL_RCC_OscConfig+0x504>)
 8004288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800428c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800428e:	f7fd fe2b 	bl	8001ee8 <HAL_GetTick>
 8004292:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004294:	e008      	b.n	80042a8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004296:	f7fd fe27 	bl	8001ee8 <HAL_GetTick>
 800429a:	4602      	mov	r2, r0
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d901      	bls.n	80042a8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e255      	b.n	8004754 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042a8:	4b65      	ldr	r3, [pc, #404]	; (8004440 <HAL_RCC_OscConfig+0x504>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d0f0      	beq.n	8004296 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042b4:	4b62      	ldr	r3, [pc, #392]	; (8004440 <HAL_RCC_OscConfig+0x504>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	061b      	lsls	r3, r3, #24
 80042c2:	495f      	ldr	r1, [pc, #380]	; (8004440 <HAL_RCC_OscConfig+0x504>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	604b      	str	r3, [r1, #4]
 80042c8:	e018      	b.n	80042fc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042ca:	4b5d      	ldr	r3, [pc, #372]	; (8004440 <HAL_RCC_OscConfig+0x504>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a5c      	ldr	r2, [pc, #368]	; (8004440 <HAL_RCC_OscConfig+0x504>)
 80042d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d6:	f7fd fe07 	bl	8001ee8 <HAL_GetTick>
 80042da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042dc:	e008      	b.n	80042f0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042de:	f7fd fe03 	bl	8001ee8 <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d901      	bls.n	80042f0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	e231      	b.n	8004754 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042f0:	4b53      	ldr	r3, [pc, #332]	; (8004440 <HAL_RCC_OscConfig+0x504>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1f0      	bne.n	80042de <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0308 	and.w	r3, r3, #8
 8004304:	2b00      	cmp	r3, #0
 8004306:	d03c      	beq.n	8004382 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	695b      	ldr	r3, [r3, #20]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d01c      	beq.n	800434a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004310:	4b4b      	ldr	r3, [pc, #300]	; (8004440 <HAL_RCC_OscConfig+0x504>)
 8004312:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004316:	4a4a      	ldr	r2, [pc, #296]	; (8004440 <HAL_RCC_OscConfig+0x504>)
 8004318:	f043 0301 	orr.w	r3, r3, #1
 800431c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004320:	f7fd fde2 	bl	8001ee8 <HAL_GetTick>
 8004324:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004326:	e008      	b.n	800433a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004328:	f7fd fdde 	bl	8001ee8 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	2b02      	cmp	r3, #2
 8004334:	d901      	bls.n	800433a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e20c      	b.n	8004754 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800433a:	4b41      	ldr	r3, [pc, #260]	; (8004440 <HAL_RCC_OscConfig+0x504>)
 800433c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004340:	f003 0302 	and.w	r3, r3, #2
 8004344:	2b00      	cmp	r3, #0
 8004346:	d0ef      	beq.n	8004328 <HAL_RCC_OscConfig+0x3ec>
 8004348:	e01b      	b.n	8004382 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800434a:	4b3d      	ldr	r3, [pc, #244]	; (8004440 <HAL_RCC_OscConfig+0x504>)
 800434c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004350:	4a3b      	ldr	r2, [pc, #236]	; (8004440 <HAL_RCC_OscConfig+0x504>)
 8004352:	f023 0301 	bic.w	r3, r3, #1
 8004356:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800435a:	f7fd fdc5 	bl	8001ee8 <HAL_GetTick>
 800435e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004360:	e008      	b.n	8004374 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004362:	f7fd fdc1 	bl	8001ee8 <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	2b02      	cmp	r3, #2
 800436e:	d901      	bls.n	8004374 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e1ef      	b.n	8004754 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004374:	4b32      	ldr	r3, [pc, #200]	; (8004440 <HAL_RCC_OscConfig+0x504>)
 8004376:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800437a:	f003 0302 	and.w	r3, r3, #2
 800437e:	2b00      	cmp	r3, #0
 8004380:	d1ef      	bne.n	8004362 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0304 	and.w	r3, r3, #4
 800438a:	2b00      	cmp	r3, #0
 800438c:	f000 80a6 	beq.w	80044dc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004390:	2300      	movs	r3, #0
 8004392:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004394:	4b2a      	ldr	r3, [pc, #168]	; (8004440 <HAL_RCC_OscConfig+0x504>)
 8004396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d10d      	bne.n	80043bc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043a0:	4b27      	ldr	r3, [pc, #156]	; (8004440 <HAL_RCC_OscConfig+0x504>)
 80043a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a4:	4a26      	ldr	r2, [pc, #152]	; (8004440 <HAL_RCC_OscConfig+0x504>)
 80043a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043aa:	6593      	str	r3, [r2, #88]	; 0x58
 80043ac:	4b24      	ldr	r3, [pc, #144]	; (8004440 <HAL_RCC_OscConfig+0x504>)
 80043ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043b4:	60bb      	str	r3, [r7, #8]
 80043b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043b8:	2301      	movs	r3, #1
 80043ba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043bc:	4b21      	ldr	r3, [pc, #132]	; (8004444 <HAL_RCC_OscConfig+0x508>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d118      	bne.n	80043fa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043c8:	4b1e      	ldr	r3, [pc, #120]	; (8004444 <HAL_RCC_OscConfig+0x508>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a1d      	ldr	r2, [pc, #116]	; (8004444 <HAL_RCC_OscConfig+0x508>)
 80043ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043d4:	f7fd fd88 	bl	8001ee8 <HAL_GetTick>
 80043d8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043da:	e008      	b.n	80043ee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043dc:	f7fd fd84 	bl	8001ee8 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d901      	bls.n	80043ee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e1b2      	b.n	8004754 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043ee:	4b15      	ldr	r3, [pc, #84]	; (8004444 <HAL_RCC_OscConfig+0x508>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d0f0      	beq.n	80043dc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d108      	bne.n	8004414 <HAL_RCC_OscConfig+0x4d8>
 8004402:	4b0f      	ldr	r3, [pc, #60]	; (8004440 <HAL_RCC_OscConfig+0x504>)
 8004404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004408:	4a0d      	ldr	r2, [pc, #52]	; (8004440 <HAL_RCC_OscConfig+0x504>)
 800440a:	f043 0301 	orr.w	r3, r3, #1
 800440e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004412:	e029      	b.n	8004468 <HAL_RCC_OscConfig+0x52c>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	2b05      	cmp	r3, #5
 800441a:	d115      	bne.n	8004448 <HAL_RCC_OscConfig+0x50c>
 800441c:	4b08      	ldr	r3, [pc, #32]	; (8004440 <HAL_RCC_OscConfig+0x504>)
 800441e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004422:	4a07      	ldr	r2, [pc, #28]	; (8004440 <HAL_RCC_OscConfig+0x504>)
 8004424:	f043 0304 	orr.w	r3, r3, #4
 8004428:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800442c:	4b04      	ldr	r3, [pc, #16]	; (8004440 <HAL_RCC_OscConfig+0x504>)
 800442e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004432:	4a03      	ldr	r2, [pc, #12]	; (8004440 <HAL_RCC_OscConfig+0x504>)
 8004434:	f043 0301 	orr.w	r3, r3, #1
 8004438:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800443c:	e014      	b.n	8004468 <HAL_RCC_OscConfig+0x52c>
 800443e:	bf00      	nop
 8004440:	40021000 	.word	0x40021000
 8004444:	40007000 	.word	0x40007000
 8004448:	4b9a      	ldr	r3, [pc, #616]	; (80046b4 <HAL_RCC_OscConfig+0x778>)
 800444a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800444e:	4a99      	ldr	r2, [pc, #612]	; (80046b4 <HAL_RCC_OscConfig+0x778>)
 8004450:	f023 0301 	bic.w	r3, r3, #1
 8004454:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004458:	4b96      	ldr	r3, [pc, #600]	; (80046b4 <HAL_RCC_OscConfig+0x778>)
 800445a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800445e:	4a95      	ldr	r2, [pc, #596]	; (80046b4 <HAL_RCC_OscConfig+0x778>)
 8004460:	f023 0304 	bic.w	r3, r3, #4
 8004464:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d016      	beq.n	800449e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004470:	f7fd fd3a 	bl	8001ee8 <HAL_GetTick>
 8004474:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004476:	e00a      	b.n	800448e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004478:	f7fd fd36 	bl	8001ee8 <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	f241 3288 	movw	r2, #5000	; 0x1388
 8004486:	4293      	cmp	r3, r2
 8004488:	d901      	bls.n	800448e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e162      	b.n	8004754 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800448e:	4b89      	ldr	r3, [pc, #548]	; (80046b4 <HAL_RCC_OscConfig+0x778>)
 8004490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d0ed      	beq.n	8004478 <HAL_RCC_OscConfig+0x53c>
 800449c:	e015      	b.n	80044ca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800449e:	f7fd fd23 	bl	8001ee8 <HAL_GetTick>
 80044a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044a4:	e00a      	b.n	80044bc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044a6:	f7fd fd1f 	bl	8001ee8 <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d901      	bls.n	80044bc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e14b      	b.n	8004754 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044bc:	4b7d      	ldr	r3, [pc, #500]	; (80046b4 <HAL_RCC_OscConfig+0x778>)
 80044be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1ed      	bne.n	80044a6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044ca:	7ffb      	ldrb	r3, [r7, #31]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d105      	bne.n	80044dc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044d0:	4b78      	ldr	r3, [pc, #480]	; (80046b4 <HAL_RCC_OscConfig+0x778>)
 80044d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044d4:	4a77      	ldr	r2, [pc, #476]	; (80046b4 <HAL_RCC_OscConfig+0x778>)
 80044d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044da:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0320 	and.w	r3, r3, #32
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d03c      	beq.n	8004562 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d01c      	beq.n	800452a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80044f0:	4b70      	ldr	r3, [pc, #448]	; (80046b4 <HAL_RCC_OscConfig+0x778>)
 80044f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044f6:	4a6f      	ldr	r2, [pc, #444]	; (80046b4 <HAL_RCC_OscConfig+0x778>)
 80044f8:	f043 0301 	orr.w	r3, r3, #1
 80044fc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004500:	f7fd fcf2 	bl	8001ee8 <HAL_GetTick>
 8004504:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004506:	e008      	b.n	800451a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004508:	f7fd fcee 	bl	8001ee8 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b02      	cmp	r3, #2
 8004514:	d901      	bls.n	800451a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e11c      	b.n	8004754 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800451a:	4b66      	ldr	r3, [pc, #408]	; (80046b4 <HAL_RCC_OscConfig+0x778>)
 800451c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004520:	f003 0302 	and.w	r3, r3, #2
 8004524:	2b00      	cmp	r3, #0
 8004526:	d0ef      	beq.n	8004508 <HAL_RCC_OscConfig+0x5cc>
 8004528:	e01b      	b.n	8004562 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800452a:	4b62      	ldr	r3, [pc, #392]	; (80046b4 <HAL_RCC_OscConfig+0x778>)
 800452c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004530:	4a60      	ldr	r2, [pc, #384]	; (80046b4 <HAL_RCC_OscConfig+0x778>)
 8004532:	f023 0301 	bic.w	r3, r3, #1
 8004536:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800453a:	f7fd fcd5 	bl	8001ee8 <HAL_GetTick>
 800453e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004540:	e008      	b.n	8004554 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004542:	f7fd fcd1 	bl	8001ee8 <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2b02      	cmp	r3, #2
 800454e:	d901      	bls.n	8004554 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e0ff      	b.n	8004754 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004554:	4b57      	ldr	r3, [pc, #348]	; (80046b4 <HAL_RCC_OscConfig+0x778>)
 8004556:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1ef      	bne.n	8004542 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004566:	2b00      	cmp	r3, #0
 8004568:	f000 80f3 	beq.w	8004752 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004570:	2b02      	cmp	r3, #2
 8004572:	f040 80c9 	bne.w	8004708 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004576:	4b4f      	ldr	r3, [pc, #316]	; (80046b4 <HAL_RCC_OscConfig+0x778>)
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	f003 0203 	and.w	r2, r3, #3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004586:	429a      	cmp	r2, r3
 8004588:	d12c      	bne.n	80045e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004594:	3b01      	subs	r3, #1
 8004596:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004598:	429a      	cmp	r2, r3
 800459a:	d123      	bne.n	80045e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045a6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d11b      	bne.n	80045e4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d113      	bne.n	80045e4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c6:	085b      	lsrs	r3, r3, #1
 80045c8:	3b01      	subs	r3, #1
 80045ca:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d109      	bne.n	80045e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045da:	085b      	lsrs	r3, r3, #1
 80045dc:	3b01      	subs	r3, #1
 80045de:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d06b      	beq.n	80046bc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	2b0c      	cmp	r3, #12
 80045e8:	d062      	beq.n	80046b0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80045ea:	4b32      	ldr	r3, [pc, #200]	; (80046b4 <HAL_RCC_OscConfig+0x778>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d001      	beq.n	80045fa <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e0ac      	b.n	8004754 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80045fa:	4b2e      	ldr	r3, [pc, #184]	; (80046b4 <HAL_RCC_OscConfig+0x778>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a2d      	ldr	r2, [pc, #180]	; (80046b4 <HAL_RCC_OscConfig+0x778>)
 8004600:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004604:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004606:	f7fd fc6f 	bl	8001ee8 <HAL_GetTick>
 800460a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800460c:	e008      	b.n	8004620 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800460e:	f7fd fc6b 	bl	8001ee8 <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	2b02      	cmp	r3, #2
 800461a:	d901      	bls.n	8004620 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e099      	b.n	8004754 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004620:	4b24      	ldr	r3, [pc, #144]	; (80046b4 <HAL_RCC_OscConfig+0x778>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d1f0      	bne.n	800460e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800462c:	4b21      	ldr	r3, [pc, #132]	; (80046b4 <HAL_RCC_OscConfig+0x778>)
 800462e:	68da      	ldr	r2, [r3, #12]
 8004630:	4b21      	ldr	r3, [pc, #132]	; (80046b8 <HAL_RCC_OscConfig+0x77c>)
 8004632:	4013      	ands	r3, r2
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800463c:	3a01      	subs	r2, #1
 800463e:	0112      	lsls	r2, r2, #4
 8004640:	4311      	orrs	r1, r2
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004646:	0212      	lsls	r2, r2, #8
 8004648:	4311      	orrs	r1, r2
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800464e:	0852      	lsrs	r2, r2, #1
 8004650:	3a01      	subs	r2, #1
 8004652:	0552      	lsls	r2, r2, #21
 8004654:	4311      	orrs	r1, r2
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800465a:	0852      	lsrs	r2, r2, #1
 800465c:	3a01      	subs	r2, #1
 800465e:	0652      	lsls	r2, r2, #25
 8004660:	4311      	orrs	r1, r2
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004666:	06d2      	lsls	r2, r2, #27
 8004668:	430a      	orrs	r2, r1
 800466a:	4912      	ldr	r1, [pc, #72]	; (80046b4 <HAL_RCC_OscConfig+0x778>)
 800466c:	4313      	orrs	r3, r2
 800466e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004670:	4b10      	ldr	r3, [pc, #64]	; (80046b4 <HAL_RCC_OscConfig+0x778>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a0f      	ldr	r2, [pc, #60]	; (80046b4 <HAL_RCC_OscConfig+0x778>)
 8004676:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800467a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800467c:	4b0d      	ldr	r3, [pc, #52]	; (80046b4 <HAL_RCC_OscConfig+0x778>)
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	4a0c      	ldr	r2, [pc, #48]	; (80046b4 <HAL_RCC_OscConfig+0x778>)
 8004682:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004686:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004688:	f7fd fc2e 	bl	8001ee8 <HAL_GetTick>
 800468c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800468e:	e008      	b.n	80046a2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004690:	f7fd fc2a 	bl	8001ee8 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	2b02      	cmp	r3, #2
 800469c:	d901      	bls.n	80046a2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e058      	b.n	8004754 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046a2:	4b04      	ldr	r3, [pc, #16]	; (80046b4 <HAL_RCC_OscConfig+0x778>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d0f0      	beq.n	8004690 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80046ae:	e050      	b.n	8004752 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e04f      	b.n	8004754 <HAL_RCC_OscConfig+0x818>
 80046b4:	40021000 	.word	0x40021000
 80046b8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046bc:	4b27      	ldr	r3, [pc, #156]	; (800475c <HAL_RCC_OscConfig+0x820>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d144      	bne.n	8004752 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80046c8:	4b24      	ldr	r3, [pc, #144]	; (800475c <HAL_RCC_OscConfig+0x820>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a23      	ldr	r2, [pc, #140]	; (800475c <HAL_RCC_OscConfig+0x820>)
 80046ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046d2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80046d4:	4b21      	ldr	r3, [pc, #132]	; (800475c <HAL_RCC_OscConfig+0x820>)
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	4a20      	ldr	r2, [pc, #128]	; (800475c <HAL_RCC_OscConfig+0x820>)
 80046da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046de:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80046e0:	f7fd fc02 	bl	8001ee8 <HAL_GetTick>
 80046e4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046e6:	e008      	b.n	80046fa <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046e8:	f7fd fbfe 	bl	8001ee8 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d901      	bls.n	80046fa <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e02c      	b.n	8004754 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046fa:	4b18      	ldr	r3, [pc, #96]	; (800475c <HAL_RCC_OscConfig+0x820>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d0f0      	beq.n	80046e8 <HAL_RCC_OscConfig+0x7ac>
 8004706:	e024      	b.n	8004752 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	2b0c      	cmp	r3, #12
 800470c:	d01f      	beq.n	800474e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800470e:	4b13      	ldr	r3, [pc, #76]	; (800475c <HAL_RCC_OscConfig+0x820>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a12      	ldr	r2, [pc, #72]	; (800475c <HAL_RCC_OscConfig+0x820>)
 8004714:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004718:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800471a:	f7fd fbe5 	bl	8001ee8 <HAL_GetTick>
 800471e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004720:	e008      	b.n	8004734 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004722:	f7fd fbe1 	bl	8001ee8 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	2b02      	cmp	r3, #2
 800472e:	d901      	bls.n	8004734 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e00f      	b.n	8004754 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004734:	4b09      	ldr	r3, [pc, #36]	; (800475c <HAL_RCC_OscConfig+0x820>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1f0      	bne.n	8004722 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004740:	4b06      	ldr	r3, [pc, #24]	; (800475c <HAL_RCC_OscConfig+0x820>)
 8004742:	68da      	ldr	r2, [r3, #12]
 8004744:	4905      	ldr	r1, [pc, #20]	; (800475c <HAL_RCC_OscConfig+0x820>)
 8004746:	4b06      	ldr	r3, [pc, #24]	; (8004760 <HAL_RCC_OscConfig+0x824>)
 8004748:	4013      	ands	r3, r2
 800474a:	60cb      	str	r3, [r1, #12]
 800474c:	e001      	b.n	8004752 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e000      	b.n	8004754 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	3720      	adds	r7, #32
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}
 800475c:	40021000 	.word	0x40021000
 8004760:	feeefffc 	.word	0xfeeefffc

08004764 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d101      	bne.n	8004778 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e0e7      	b.n	8004948 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004778:	4b75      	ldr	r3, [pc, #468]	; (8004950 <HAL_RCC_ClockConfig+0x1ec>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0307 	and.w	r3, r3, #7
 8004780:	683a      	ldr	r2, [r7, #0]
 8004782:	429a      	cmp	r2, r3
 8004784:	d910      	bls.n	80047a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004786:	4b72      	ldr	r3, [pc, #456]	; (8004950 <HAL_RCC_ClockConfig+0x1ec>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f023 0207 	bic.w	r2, r3, #7
 800478e:	4970      	ldr	r1, [pc, #448]	; (8004950 <HAL_RCC_ClockConfig+0x1ec>)
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	4313      	orrs	r3, r2
 8004794:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004796:	4b6e      	ldr	r3, [pc, #440]	; (8004950 <HAL_RCC_ClockConfig+0x1ec>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0307 	and.w	r3, r3, #7
 800479e:	683a      	ldr	r2, [r7, #0]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d001      	beq.n	80047a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e0cf      	b.n	8004948 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d010      	beq.n	80047d6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	689a      	ldr	r2, [r3, #8]
 80047b8:	4b66      	ldr	r3, [pc, #408]	; (8004954 <HAL_RCC_ClockConfig+0x1f0>)
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d908      	bls.n	80047d6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047c4:	4b63      	ldr	r3, [pc, #396]	; (8004954 <HAL_RCC_ClockConfig+0x1f0>)
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	4960      	ldr	r1, [pc, #384]	; (8004954 <HAL_RCC_ClockConfig+0x1f0>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d04c      	beq.n	800487c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	2b03      	cmp	r3, #3
 80047e8:	d107      	bne.n	80047fa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047ea:	4b5a      	ldr	r3, [pc, #360]	; (8004954 <HAL_RCC_ClockConfig+0x1f0>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d121      	bne.n	800483a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e0a6      	b.n	8004948 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d107      	bne.n	8004812 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004802:	4b54      	ldr	r3, [pc, #336]	; (8004954 <HAL_RCC_ClockConfig+0x1f0>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d115      	bne.n	800483a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e09a      	b.n	8004948 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d107      	bne.n	800482a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800481a:	4b4e      	ldr	r3, [pc, #312]	; (8004954 <HAL_RCC_ClockConfig+0x1f0>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0302 	and.w	r3, r3, #2
 8004822:	2b00      	cmp	r3, #0
 8004824:	d109      	bne.n	800483a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e08e      	b.n	8004948 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800482a:	4b4a      	ldr	r3, [pc, #296]	; (8004954 <HAL_RCC_ClockConfig+0x1f0>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004832:	2b00      	cmp	r3, #0
 8004834:	d101      	bne.n	800483a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e086      	b.n	8004948 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800483a:	4b46      	ldr	r3, [pc, #280]	; (8004954 <HAL_RCC_ClockConfig+0x1f0>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f023 0203 	bic.w	r2, r3, #3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	4943      	ldr	r1, [pc, #268]	; (8004954 <HAL_RCC_ClockConfig+0x1f0>)
 8004848:	4313      	orrs	r3, r2
 800484a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800484c:	f7fd fb4c 	bl	8001ee8 <HAL_GetTick>
 8004850:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004852:	e00a      	b.n	800486a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004854:	f7fd fb48 	bl	8001ee8 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004862:	4293      	cmp	r3, r2
 8004864:	d901      	bls.n	800486a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e06e      	b.n	8004948 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800486a:	4b3a      	ldr	r3, [pc, #232]	; (8004954 <HAL_RCC_ClockConfig+0x1f0>)
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f003 020c 	and.w	r2, r3, #12
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	429a      	cmp	r2, r3
 800487a:	d1eb      	bne.n	8004854 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0302 	and.w	r3, r3, #2
 8004884:	2b00      	cmp	r3, #0
 8004886:	d010      	beq.n	80048aa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	689a      	ldr	r2, [r3, #8]
 800488c:	4b31      	ldr	r3, [pc, #196]	; (8004954 <HAL_RCC_ClockConfig+0x1f0>)
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004894:	429a      	cmp	r2, r3
 8004896:	d208      	bcs.n	80048aa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004898:	4b2e      	ldr	r3, [pc, #184]	; (8004954 <HAL_RCC_ClockConfig+0x1f0>)
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	492b      	ldr	r1, [pc, #172]	; (8004954 <HAL_RCC_ClockConfig+0x1f0>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048aa:	4b29      	ldr	r3, [pc, #164]	; (8004950 <HAL_RCC_ClockConfig+0x1ec>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0307 	and.w	r3, r3, #7
 80048b2:	683a      	ldr	r2, [r7, #0]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d210      	bcs.n	80048da <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048b8:	4b25      	ldr	r3, [pc, #148]	; (8004950 <HAL_RCC_ClockConfig+0x1ec>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f023 0207 	bic.w	r2, r3, #7
 80048c0:	4923      	ldr	r1, [pc, #140]	; (8004950 <HAL_RCC_ClockConfig+0x1ec>)
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048c8:	4b21      	ldr	r3, [pc, #132]	; (8004950 <HAL_RCC_ClockConfig+0x1ec>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0307 	and.w	r3, r3, #7
 80048d0:	683a      	ldr	r2, [r7, #0]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d001      	beq.n	80048da <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e036      	b.n	8004948 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0304 	and.w	r3, r3, #4
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d008      	beq.n	80048f8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048e6:	4b1b      	ldr	r3, [pc, #108]	; (8004954 <HAL_RCC_ClockConfig+0x1f0>)
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	4918      	ldr	r1, [pc, #96]	; (8004954 <HAL_RCC_ClockConfig+0x1f0>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0308 	and.w	r3, r3, #8
 8004900:	2b00      	cmp	r3, #0
 8004902:	d009      	beq.n	8004918 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004904:	4b13      	ldr	r3, [pc, #76]	; (8004954 <HAL_RCC_ClockConfig+0x1f0>)
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	00db      	lsls	r3, r3, #3
 8004912:	4910      	ldr	r1, [pc, #64]	; (8004954 <HAL_RCC_ClockConfig+0x1f0>)
 8004914:	4313      	orrs	r3, r2
 8004916:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004918:	f000 f824 	bl	8004964 <HAL_RCC_GetSysClockFreq>
 800491c:	4602      	mov	r2, r0
 800491e:	4b0d      	ldr	r3, [pc, #52]	; (8004954 <HAL_RCC_ClockConfig+0x1f0>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	091b      	lsrs	r3, r3, #4
 8004924:	f003 030f 	and.w	r3, r3, #15
 8004928:	490b      	ldr	r1, [pc, #44]	; (8004958 <HAL_RCC_ClockConfig+0x1f4>)
 800492a:	5ccb      	ldrb	r3, [r1, r3]
 800492c:	f003 031f 	and.w	r3, r3, #31
 8004930:	fa22 f303 	lsr.w	r3, r2, r3
 8004934:	4a09      	ldr	r2, [pc, #36]	; (800495c <HAL_RCC_ClockConfig+0x1f8>)
 8004936:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004938:	4b09      	ldr	r3, [pc, #36]	; (8004960 <HAL_RCC_ClockConfig+0x1fc>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4618      	mov	r0, r3
 800493e:	f7fd fa83 	bl	8001e48 <HAL_InitTick>
 8004942:	4603      	mov	r3, r0
 8004944:	72fb      	strb	r3, [r7, #11]

  return status;
 8004946:	7afb      	ldrb	r3, [r7, #11]
}
 8004948:	4618      	mov	r0, r3
 800494a:	3710      	adds	r7, #16
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	40022000 	.word	0x40022000
 8004954:	40021000 	.word	0x40021000
 8004958:	080083b0 	.word	0x080083b0
 800495c:	20000008 	.word	0x20000008
 8004960:	2000000c 	.word	0x2000000c

08004964 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004964:	b480      	push	{r7}
 8004966:	b089      	sub	sp, #36	; 0x24
 8004968:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800496a:	2300      	movs	r3, #0
 800496c:	61fb      	str	r3, [r7, #28]
 800496e:	2300      	movs	r3, #0
 8004970:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004972:	4b3e      	ldr	r3, [pc, #248]	; (8004a6c <HAL_RCC_GetSysClockFreq+0x108>)
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f003 030c 	and.w	r3, r3, #12
 800497a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800497c:	4b3b      	ldr	r3, [pc, #236]	; (8004a6c <HAL_RCC_GetSysClockFreq+0x108>)
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	f003 0303 	and.w	r3, r3, #3
 8004984:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d005      	beq.n	8004998 <HAL_RCC_GetSysClockFreq+0x34>
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	2b0c      	cmp	r3, #12
 8004990:	d121      	bne.n	80049d6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2b01      	cmp	r3, #1
 8004996:	d11e      	bne.n	80049d6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004998:	4b34      	ldr	r3, [pc, #208]	; (8004a6c <HAL_RCC_GetSysClockFreq+0x108>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0308 	and.w	r3, r3, #8
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d107      	bne.n	80049b4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80049a4:	4b31      	ldr	r3, [pc, #196]	; (8004a6c <HAL_RCC_GetSysClockFreq+0x108>)
 80049a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049aa:	0a1b      	lsrs	r3, r3, #8
 80049ac:	f003 030f 	and.w	r3, r3, #15
 80049b0:	61fb      	str	r3, [r7, #28]
 80049b2:	e005      	b.n	80049c0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80049b4:	4b2d      	ldr	r3, [pc, #180]	; (8004a6c <HAL_RCC_GetSysClockFreq+0x108>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	091b      	lsrs	r3, r3, #4
 80049ba:	f003 030f 	and.w	r3, r3, #15
 80049be:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80049c0:	4a2b      	ldr	r2, [pc, #172]	; (8004a70 <HAL_RCC_GetSysClockFreq+0x10c>)
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049c8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d10d      	bne.n	80049ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80049d4:	e00a      	b.n	80049ec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	2b04      	cmp	r3, #4
 80049da:	d102      	bne.n	80049e2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80049dc:	4b25      	ldr	r3, [pc, #148]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x110>)
 80049de:	61bb      	str	r3, [r7, #24]
 80049e0:	e004      	b.n	80049ec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	2b08      	cmp	r3, #8
 80049e6:	d101      	bne.n	80049ec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80049e8:	4b23      	ldr	r3, [pc, #140]	; (8004a78 <HAL_RCC_GetSysClockFreq+0x114>)
 80049ea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	2b0c      	cmp	r3, #12
 80049f0:	d134      	bne.n	8004a5c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80049f2:	4b1e      	ldr	r3, [pc, #120]	; (8004a6c <HAL_RCC_GetSysClockFreq+0x108>)
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	f003 0303 	and.w	r3, r3, #3
 80049fa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d003      	beq.n	8004a0a <HAL_RCC_GetSysClockFreq+0xa6>
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	2b03      	cmp	r3, #3
 8004a06:	d003      	beq.n	8004a10 <HAL_RCC_GetSysClockFreq+0xac>
 8004a08:	e005      	b.n	8004a16 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004a0a:	4b1a      	ldr	r3, [pc, #104]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x110>)
 8004a0c:	617b      	str	r3, [r7, #20]
      break;
 8004a0e:	e005      	b.n	8004a1c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004a10:	4b19      	ldr	r3, [pc, #100]	; (8004a78 <HAL_RCC_GetSysClockFreq+0x114>)
 8004a12:	617b      	str	r3, [r7, #20]
      break;
 8004a14:	e002      	b.n	8004a1c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	617b      	str	r3, [r7, #20]
      break;
 8004a1a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a1c:	4b13      	ldr	r3, [pc, #76]	; (8004a6c <HAL_RCC_GetSysClockFreq+0x108>)
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	091b      	lsrs	r3, r3, #4
 8004a22:	f003 0307 	and.w	r3, r3, #7
 8004a26:	3301      	adds	r3, #1
 8004a28:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004a2a:	4b10      	ldr	r3, [pc, #64]	; (8004a6c <HAL_RCC_GetSysClockFreq+0x108>)
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	0a1b      	lsrs	r3, r3, #8
 8004a30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	fb03 f202 	mul.w	r2, r3, r2
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a40:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a42:	4b0a      	ldr	r3, [pc, #40]	; (8004a6c <HAL_RCC_GetSysClockFreq+0x108>)
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	0e5b      	lsrs	r3, r3, #25
 8004a48:	f003 0303 	and.w	r3, r3, #3
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	005b      	lsls	r3, r3, #1
 8004a50:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004a52:	697a      	ldr	r2, [r7, #20]
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a5a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004a5c:	69bb      	ldr	r3, [r7, #24]
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3724      	adds	r7, #36	; 0x24
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	40021000 	.word	0x40021000
 8004a70:	080083c8 	.word	0x080083c8
 8004a74:	00f42400 	.word	0x00f42400
 8004a78:	007a1200 	.word	0x007a1200

08004a7c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a80:	4b03      	ldr	r3, [pc, #12]	; (8004a90 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a82:	681b      	ldr	r3, [r3, #0]
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop
 8004a90:	20000008 	.word	0x20000008

08004a94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004a98:	f7ff fff0 	bl	8004a7c <HAL_RCC_GetHCLKFreq>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	4b06      	ldr	r3, [pc, #24]	; (8004ab8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	0a1b      	lsrs	r3, r3, #8
 8004aa4:	f003 0307 	and.w	r3, r3, #7
 8004aa8:	4904      	ldr	r1, [pc, #16]	; (8004abc <HAL_RCC_GetPCLK1Freq+0x28>)
 8004aaa:	5ccb      	ldrb	r3, [r1, r3]
 8004aac:	f003 031f 	and.w	r3, r3, #31
 8004ab0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	40021000 	.word	0x40021000
 8004abc:	080083c0 	.word	0x080083c0

08004ac0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004ac4:	f7ff ffda 	bl	8004a7c <HAL_RCC_GetHCLKFreq>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	4b06      	ldr	r3, [pc, #24]	; (8004ae4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	0adb      	lsrs	r3, r3, #11
 8004ad0:	f003 0307 	and.w	r3, r3, #7
 8004ad4:	4904      	ldr	r1, [pc, #16]	; (8004ae8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ad6:	5ccb      	ldrb	r3, [r1, r3]
 8004ad8:	f003 031f 	and.w	r3, r3, #31
 8004adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	40021000 	.word	0x40021000
 8004ae8:	080083c0 	.word	0x080083c0

08004aec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b086      	sub	sp, #24
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004af4:	2300      	movs	r3, #0
 8004af6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004af8:	4b2a      	ldr	r3, [pc, #168]	; (8004ba4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d003      	beq.n	8004b0c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004b04:	f7ff f9b6 	bl	8003e74 <HAL_PWREx_GetVoltageRange>
 8004b08:	6178      	str	r0, [r7, #20]
 8004b0a:	e014      	b.n	8004b36 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b0c:	4b25      	ldr	r3, [pc, #148]	; (8004ba4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b10:	4a24      	ldr	r2, [pc, #144]	; (8004ba4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b16:	6593      	str	r3, [r2, #88]	; 0x58
 8004b18:	4b22      	ldr	r3, [pc, #136]	; (8004ba4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b20:	60fb      	str	r3, [r7, #12]
 8004b22:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004b24:	f7ff f9a6 	bl	8003e74 <HAL_PWREx_GetVoltageRange>
 8004b28:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004b2a:	4b1e      	ldr	r3, [pc, #120]	; (8004ba4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b2e:	4a1d      	ldr	r2, [pc, #116]	; (8004ba4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b34:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b3c:	d10b      	bne.n	8004b56 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2b80      	cmp	r3, #128	; 0x80
 8004b42:	d919      	bls.n	8004b78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2ba0      	cmp	r3, #160	; 0xa0
 8004b48:	d902      	bls.n	8004b50 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004b4a:	2302      	movs	r3, #2
 8004b4c:	613b      	str	r3, [r7, #16]
 8004b4e:	e013      	b.n	8004b78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b50:	2301      	movs	r3, #1
 8004b52:	613b      	str	r3, [r7, #16]
 8004b54:	e010      	b.n	8004b78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2b80      	cmp	r3, #128	; 0x80
 8004b5a:	d902      	bls.n	8004b62 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	613b      	str	r3, [r7, #16]
 8004b60:	e00a      	b.n	8004b78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2b80      	cmp	r3, #128	; 0x80
 8004b66:	d102      	bne.n	8004b6e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004b68:	2302      	movs	r3, #2
 8004b6a:	613b      	str	r3, [r7, #16]
 8004b6c:	e004      	b.n	8004b78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2b70      	cmp	r3, #112	; 0x70
 8004b72:	d101      	bne.n	8004b78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b74:	2301      	movs	r3, #1
 8004b76:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004b78:	4b0b      	ldr	r3, [pc, #44]	; (8004ba8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f023 0207 	bic.w	r2, r3, #7
 8004b80:	4909      	ldr	r1, [pc, #36]	; (8004ba8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004b88:	4b07      	ldr	r3, [pc, #28]	; (8004ba8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0307 	and.w	r3, r3, #7
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d001      	beq.n	8004b9a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e000      	b.n	8004b9c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3718      	adds	r7, #24
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	40021000 	.word	0x40021000
 8004ba8:	40022000 	.word	0x40022000

08004bac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b086      	sub	sp, #24
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004bb8:	2300      	movs	r3, #0
 8004bba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d031      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bcc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004bd0:	d01a      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004bd2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004bd6:	d814      	bhi.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d009      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004bdc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004be0:	d10f      	bne.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004be2:	4b5d      	ldr	r3, [pc, #372]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	4a5c      	ldr	r2, [pc, #368]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bec:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004bee:	e00c      	b.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	3304      	adds	r3, #4
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f000 f9de 	bl	8004fb8 <RCCEx_PLLSAI1_Config>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c00:	e003      	b.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	74fb      	strb	r3, [r7, #19]
      break;
 8004c06:	e000      	b.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004c08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c0a:	7cfb      	ldrb	r3, [r7, #19]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d10b      	bne.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c10:	4b51      	ldr	r3, [pc, #324]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c16:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c1e:	494e      	ldr	r1, [pc, #312]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c20:	4313      	orrs	r3, r2
 8004c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004c26:	e001      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c28:	7cfb      	ldrb	r3, [r7, #19]
 8004c2a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f000 809e 	beq.w	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004c3e:	4b46      	ldr	r3, [pc, #280]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e000      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004c4e:	2300      	movs	r3, #0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d00d      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c54:	4b40      	ldr	r3, [pc, #256]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c58:	4a3f      	ldr	r2, [pc, #252]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c5e:	6593      	str	r3, [r2, #88]	; 0x58
 8004c60:	4b3d      	ldr	r3, [pc, #244]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c68:	60bb      	str	r3, [r7, #8]
 8004c6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c70:	4b3a      	ldr	r3, [pc, #232]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a39      	ldr	r2, [pc, #228]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c7c:	f7fd f934 	bl	8001ee8 <HAL_GetTick>
 8004c80:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004c82:	e009      	b.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c84:	f7fd f930 	bl	8001ee8 <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d902      	bls.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	74fb      	strb	r3, [r7, #19]
        break;
 8004c96:	e005      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004c98:	4b30      	ldr	r3, [pc, #192]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d0ef      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004ca4:	7cfb      	ldrb	r3, [r7, #19]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d15a      	bne.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004caa:	4b2b      	ldr	r3, [pc, #172]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cb4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d01e      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cc0:	697a      	ldr	r2, [r7, #20]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d019      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004cc6:	4b24      	ldr	r3, [pc, #144]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ccc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cd0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004cd2:	4b21      	ldr	r3, [pc, #132]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd8:	4a1f      	ldr	r2, [pc, #124]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ce2:	4b1d      	ldr	r3, [pc, #116]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ce8:	4a1b      	ldr	r2, [pc, #108]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004cf2:	4a19      	ldr	r2, [pc, #100]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	f003 0301 	and.w	r3, r3, #1
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d016      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d04:	f7fd f8f0 	bl	8001ee8 <HAL_GetTick>
 8004d08:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d0a:	e00b      	b.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d0c:	f7fd f8ec 	bl	8001ee8 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d902      	bls.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	74fb      	strb	r3, [r7, #19]
            break;
 8004d22:	e006      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d24:	4b0c      	ldr	r3, [pc, #48]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d0ec      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004d32:	7cfb      	ldrb	r3, [r7, #19]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d10b      	bne.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d38:	4b07      	ldr	r3, [pc, #28]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d3e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d46:	4904      	ldr	r1, [pc, #16]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004d4e:	e009      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d50:	7cfb      	ldrb	r3, [r7, #19]
 8004d52:	74bb      	strb	r3, [r7, #18]
 8004d54:	e006      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004d56:	bf00      	nop
 8004d58:	40021000 	.word	0x40021000
 8004d5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d60:	7cfb      	ldrb	r3, [r7, #19]
 8004d62:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d64:	7c7b      	ldrb	r3, [r7, #17]
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d105      	bne.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d6a:	4b8a      	ldr	r3, [pc, #552]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d6e:	4a89      	ldr	r2, [pc, #548]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d74:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0301 	and.w	r3, r3, #1
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00a      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d82:	4b84      	ldr	r3, [pc, #528]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d88:	f023 0203 	bic.w	r2, r3, #3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a1b      	ldr	r3, [r3, #32]
 8004d90:	4980      	ldr	r1, [pc, #512]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0302 	and.w	r3, r3, #2
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d00a      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004da4:	4b7b      	ldr	r3, [pc, #492]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004daa:	f023 020c 	bic.w	r2, r3, #12
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db2:	4978      	ldr	r1, [pc, #480]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0320 	and.w	r3, r3, #32
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00a      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004dc6:	4b73      	ldr	r3, [pc, #460]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dcc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd4:	496f      	ldr	r1, [pc, #444]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d00a      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004de8:	4b6a      	ldr	r3, [pc, #424]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dee:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004df6:	4967      	ldr	r1, [pc, #412]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00a      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004e0a:	4b62      	ldr	r3, [pc, #392]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e18:	495e      	ldr	r1, [pc, #376]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d00a      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e2c:	4b59      	ldr	r3, [pc, #356]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e32:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3a:	4956      	ldr	r1, [pc, #344]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00a      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e4e:	4b51      	ldr	r3, [pc, #324]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5c:	494d      	ldr	r1, [pc, #308]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d028      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e70:	4b48      	ldr	r3, [pc, #288]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7e:	4945      	ldr	r1, [pc, #276]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e8e:	d106      	bne.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e90:	4b40      	ldr	r3, [pc, #256]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	4a3f      	ldr	r2, [pc, #252]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e9a:	60d3      	str	r3, [r2, #12]
 8004e9c:	e011      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ea6:	d10c      	bne.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	3304      	adds	r3, #4
 8004eac:	2101      	movs	r1, #1
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f000 f882 	bl	8004fb8 <RCCEx_PLLSAI1_Config>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004eb8:	7cfb      	ldrb	r3, [r7, #19]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d001      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004ebe:	7cfb      	ldrb	r3, [r7, #19]
 8004ec0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d028      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ece:	4b31      	ldr	r3, [pc, #196]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ed4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004edc:	492d      	ldr	r1, [pc, #180]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ee8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004eec:	d106      	bne.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004eee:	4b29      	ldr	r3, [pc, #164]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	4a28      	ldr	r2, [pc, #160]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ef4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ef8:	60d3      	str	r3, [r2, #12]
 8004efa:	e011      	b.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f04:	d10c      	bne.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	3304      	adds	r3, #4
 8004f0a:	2101      	movs	r1, #1
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f000 f853 	bl	8004fb8 <RCCEx_PLLSAI1_Config>
 8004f12:	4603      	mov	r3, r0
 8004f14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f16:	7cfb      	ldrb	r3, [r7, #19]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d001      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004f1c:	7cfb      	ldrb	r3, [r7, #19]
 8004f1e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d01c      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f2c:	4b19      	ldr	r3, [pc, #100]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f32:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f3a:	4916      	ldr	r1, [pc, #88]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f4a:	d10c      	bne.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	3304      	adds	r3, #4
 8004f50:	2102      	movs	r1, #2
 8004f52:	4618      	mov	r0, r3
 8004f54:	f000 f830 	bl	8004fb8 <RCCEx_PLLSAI1_Config>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f5c:	7cfb      	ldrb	r3, [r7, #19]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d001      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8004f62:	7cfb      	ldrb	r3, [r7, #19]
 8004f64:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00a      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004f72:	4b08      	ldr	r3, [pc, #32]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f78:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f80:	4904      	ldr	r1, [pc, #16]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004f88:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3718      	adds	r7, #24
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	40021000 	.word	0x40021000

08004f98 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004f9c:	4b05      	ldr	r3, [pc, #20]	; (8004fb4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a04      	ldr	r2, [pc, #16]	; (8004fb4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004fa2:	f043 0304 	orr.w	r3, r3, #4
 8004fa6:	6013      	str	r3, [r2, #0]
}
 8004fa8:	bf00      	nop
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	40021000 	.word	0x40021000

08004fb8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004fc6:	4b74      	ldr	r3, [pc, #464]	; (8005198 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	f003 0303 	and.w	r3, r3, #3
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d018      	beq.n	8005004 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004fd2:	4b71      	ldr	r3, [pc, #452]	; (8005198 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	f003 0203 	and.w	r2, r3, #3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d10d      	bne.n	8004ffe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
       ||
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d009      	beq.n	8004ffe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004fea:	4b6b      	ldr	r3, [pc, #428]	; (8005198 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	091b      	lsrs	r3, r3, #4
 8004ff0:	f003 0307 	and.w	r3, r3, #7
 8004ff4:	1c5a      	adds	r2, r3, #1
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685b      	ldr	r3, [r3, #4]
       ||
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d047      	beq.n	800508e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	73fb      	strb	r3, [r7, #15]
 8005002:	e044      	b.n	800508e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2b03      	cmp	r3, #3
 800500a:	d018      	beq.n	800503e <RCCEx_PLLSAI1_Config+0x86>
 800500c:	2b03      	cmp	r3, #3
 800500e:	d825      	bhi.n	800505c <RCCEx_PLLSAI1_Config+0xa4>
 8005010:	2b01      	cmp	r3, #1
 8005012:	d002      	beq.n	800501a <RCCEx_PLLSAI1_Config+0x62>
 8005014:	2b02      	cmp	r3, #2
 8005016:	d009      	beq.n	800502c <RCCEx_PLLSAI1_Config+0x74>
 8005018:	e020      	b.n	800505c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800501a:	4b5f      	ldr	r3, [pc, #380]	; (8005198 <RCCEx_PLLSAI1_Config+0x1e0>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0302 	and.w	r3, r3, #2
 8005022:	2b00      	cmp	r3, #0
 8005024:	d11d      	bne.n	8005062 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800502a:	e01a      	b.n	8005062 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800502c:	4b5a      	ldr	r3, [pc, #360]	; (8005198 <RCCEx_PLLSAI1_Config+0x1e0>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005034:	2b00      	cmp	r3, #0
 8005036:	d116      	bne.n	8005066 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800503c:	e013      	b.n	8005066 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800503e:	4b56      	ldr	r3, [pc, #344]	; (8005198 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d10f      	bne.n	800506a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800504a:	4b53      	ldr	r3, [pc, #332]	; (8005198 <RCCEx_PLLSAI1_Config+0x1e0>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d109      	bne.n	800506a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800505a:	e006      	b.n	800506a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	73fb      	strb	r3, [r7, #15]
      break;
 8005060:	e004      	b.n	800506c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005062:	bf00      	nop
 8005064:	e002      	b.n	800506c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005066:	bf00      	nop
 8005068:	e000      	b.n	800506c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800506a:	bf00      	nop
    }

    if(status == HAL_OK)
 800506c:	7bfb      	ldrb	r3, [r7, #15]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d10d      	bne.n	800508e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005072:	4b49      	ldr	r3, [pc, #292]	; (8005198 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6819      	ldr	r1, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	3b01      	subs	r3, #1
 8005084:	011b      	lsls	r3, r3, #4
 8005086:	430b      	orrs	r3, r1
 8005088:	4943      	ldr	r1, [pc, #268]	; (8005198 <RCCEx_PLLSAI1_Config+0x1e0>)
 800508a:	4313      	orrs	r3, r2
 800508c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800508e:	7bfb      	ldrb	r3, [r7, #15]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d17c      	bne.n	800518e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005094:	4b40      	ldr	r3, [pc, #256]	; (8005198 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a3f      	ldr	r2, [pc, #252]	; (8005198 <RCCEx_PLLSAI1_Config+0x1e0>)
 800509a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800509e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050a0:	f7fc ff22 	bl	8001ee8 <HAL_GetTick>
 80050a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80050a6:	e009      	b.n	80050bc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050a8:	f7fc ff1e 	bl	8001ee8 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d902      	bls.n	80050bc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	73fb      	strb	r3, [r7, #15]
        break;
 80050ba:	e005      	b.n	80050c8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80050bc:	4b36      	ldr	r3, [pc, #216]	; (8005198 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1ef      	bne.n	80050a8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80050c8:	7bfb      	ldrb	r3, [r7, #15]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d15f      	bne.n	800518e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d110      	bne.n	80050f6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050d4:	4b30      	ldr	r3, [pc, #192]	; (8005198 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80050dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	6892      	ldr	r2, [r2, #8]
 80050e4:	0211      	lsls	r1, r2, #8
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	68d2      	ldr	r2, [r2, #12]
 80050ea:	06d2      	lsls	r2, r2, #27
 80050ec:	430a      	orrs	r2, r1
 80050ee:	492a      	ldr	r1, [pc, #168]	; (8005198 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	610b      	str	r3, [r1, #16]
 80050f4:	e027      	b.n	8005146 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d112      	bne.n	8005122 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050fc:	4b26      	ldr	r3, [pc, #152]	; (8005198 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005104:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	6892      	ldr	r2, [r2, #8]
 800510c:	0211      	lsls	r1, r2, #8
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	6912      	ldr	r2, [r2, #16]
 8005112:	0852      	lsrs	r2, r2, #1
 8005114:	3a01      	subs	r2, #1
 8005116:	0552      	lsls	r2, r2, #21
 8005118:	430a      	orrs	r2, r1
 800511a:	491f      	ldr	r1, [pc, #124]	; (8005198 <RCCEx_PLLSAI1_Config+0x1e0>)
 800511c:	4313      	orrs	r3, r2
 800511e:	610b      	str	r3, [r1, #16]
 8005120:	e011      	b.n	8005146 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005122:	4b1d      	ldr	r3, [pc, #116]	; (8005198 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800512a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	6892      	ldr	r2, [r2, #8]
 8005132:	0211      	lsls	r1, r2, #8
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	6952      	ldr	r2, [r2, #20]
 8005138:	0852      	lsrs	r2, r2, #1
 800513a:	3a01      	subs	r2, #1
 800513c:	0652      	lsls	r2, r2, #25
 800513e:	430a      	orrs	r2, r1
 8005140:	4915      	ldr	r1, [pc, #84]	; (8005198 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005142:	4313      	orrs	r3, r2
 8005144:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005146:	4b14      	ldr	r3, [pc, #80]	; (8005198 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a13      	ldr	r2, [pc, #76]	; (8005198 <RCCEx_PLLSAI1_Config+0x1e0>)
 800514c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005150:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005152:	f7fc fec9 	bl	8001ee8 <HAL_GetTick>
 8005156:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005158:	e009      	b.n	800516e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800515a:	f7fc fec5 	bl	8001ee8 <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	2b02      	cmp	r3, #2
 8005166:	d902      	bls.n	800516e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	73fb      	strb	r3, [r7, #15]
          break;
 800516c:	e005      	b.n	800517a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800516e:	4b0a      	ldr	r3, [pc, #40]	; (8005198 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d0ef      	beq.n	800515a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800517a:	7bfb      	ldrb	r3, [r7, #15]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d106      	bne.n	800518e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005180:	4b05      	ldr	r3, [pc, #20]	; (8005198 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005182:	691a      	ldr	r2, [r3, #16]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	4903      	ldr	r1, [pc, #12]	; (8005198 <RCCEx_PLLSAI1_Config+0x1e0>)
 800518a:	4313      	orrs	r3, r2
 800518c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800518e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005190:	4618      	mov	r0, r3
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	40021000 	.word	0x40021000

0800519c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d101      	bne.n	80051ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e040      	b.n	8005230 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d106      	bne.n	80051c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f7fc fcb6 	bl	8001b30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2224      	movs	r2, #36	; 0x24
 80051c8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f022 0201 	bic.w	r2, r2, #1
 80051d8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d002      	beq.n	80051e8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 fade 	bl	80057a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 f8af 	bl	800534c <UART_SetConfig>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d101      	bne.n	80051f8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e01b      	b.n	8005230 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	685a      	ldr	r2, [r3, #4]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005206:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	689a      	ldr	r2, [r3, #8]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005216:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f042 0201 	orr.w	r2, r2, #1
 8005226:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 fb5d 	bl	80058e8 <UART_CheckIdleState>
 800522e:	4603      	mov	r3, r0
}
 8005230:	4618      	mov	r0, r3
 8005232:	3708      	adds	r7, #8
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b08a      	sub	sp, #40	; 0x28
 800523c:	af02      	add	r7, sp, #8
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	603b      	str	r3, [r7, #0]
 8005244:	4613      	mov	r3, r2
 8005246:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800524c:	2b20      	cmp	r3, #32
 800524e:	d178      	bne.n	8005342 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d002      	beq.n	800525c <HAL_UART_Transmit+0x24>
 8005256:	88fb      	ldrh	r3, [r7, #6]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d101      	bne.n	8005260 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e071      	b.n	8005344 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2221      	movs	r2, #33	; 0x21
 800526c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800526e:	f7fc fe3b 	bl	8001ee8 <HAL_GetTick>
 8005272:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	88fa      	ldrh	r2, [r7, #6]
 8005278:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	88fa      	ldrh	r2, [r7, #6]
 8005280:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800528c:	d108      	bne.n	80052a0 <HAL_UART_Transmit+0x68>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d104      	bne.n	80052a0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005296:	2300      	movs	r3, #0
 8005298:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	61bb      	str	r3, [r7, #24]
 800529e:	e003      	b.n	80052a8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052a4:	2300      	movs	r3, #0
 80052a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80052a8:	e030      	b.n	800530c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	9300      	str	r3, [sp, #0]
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	2200      	movs	r2, #0
 80052b2:	2180      	movs	r1, #128	; 0x80
 80052b4:	68f8      	ldr	r0, [r7, #12]
 80052b6:	f000 fbbf 	bl	8005a38 <UART_WaitOnFlagUntilTimeout>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d004      	beq.n	80052ca <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2220      	movs	r2, #32
 80052c4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e03c      	b.n	8005344 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d10b      	bne.n	80052e8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	881a      	ldrh	r2, [r3, #0]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052dc:	b292      	uxth	r2, r2
 80052de:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	3302      	adds	r3, #2
 80052e4:	61bb      	str	r3, [r7, #24]
 80052e6:	e008      	b.n	80052fa <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	781a      	ldrb	r2, [r3, #0]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	b292      	uxth	r2, r2
 80052f2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	3301      	adds	r3, #1
 80052f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005300:	b29b      	uxth	r3, r3
 8005302:	3b01      	subs	r3, #1
 8005304:	b29a      	uxth	r2, r3
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005312:	b29b      	uxth	r3, r3
 8005314:	2b00      	cmp	r3, #0
 8005316:	d1c8      	bne.n	80052aa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	9300      	str	r3, [sp, #0]
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	2200      	movs	r2, #0
 8005320:	2140      	movs	r1, #64	; 0x40
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	f000 fb88 	bl	8005a38 <UART_WaitOnFlagUntilTimeout>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d004      	beq.n	8005338 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2220      	movs	r2, #32
 8005332:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	e005      	b.n	8005344 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2220      	movs	r2, #32
 800533c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800533e:	2300      	movs	r3, #0
 8005340:	e000      	b.n	8005344 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005342:	2302      	movs	r3, #2
  }
}
 8005344:	4618      	mov	r0, r3
 8005346:	3720      	adds	r7, #32
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800534c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005350:	b08a      	sub	sp, #40	; 0x28
 8005352:	af00      	add	r7, sp, #0
 8005354:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005356:	2300      	movs	r3, #0
 8005358:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	689a      	ldr	r2, [r3, #8]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	431a      	orrs	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	431a      	orrs	r2, r3
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	69db      	ldr	r3, [r3, #28]
 8005370:	4313      	orrs	r3, r2
 8005372:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	4bb4      	ldr	r3, [pc, #720]	; (800564c <UART_SetConfig+0x300>)
 800537c:	4013      	ands	r3, r2
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	6812      	ldr	r2, [r2, #0]
 8005382:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005384:	430b      	orrs	r3, r1
 8005386:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	68da      	ldr	r2, [r3, #12]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	430a      	orrs	r2, r1
 800539c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4aa9      	ldr	r2, [pc, #676]	; (8005650 <UART_SetConfig+0x304>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d004      	beq.n	80053b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6a1b      	ldr	r3, [r3, #32]
 80053b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053b4:	4313      	orrs	r3, r2
 80053b6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053c8:	430a      	orrs	r2, r1
 80053ca:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4aa0      	ldr	r2, [pc, #640]	; (8005654 <UART_SetConfig+0x308>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d126      	bne.n	8005424 <UART_SetConfig+0xd8>
 80053d6:	4ba0      	ldr	r3, [pc, #640]	; (8005658 <UART_SetConfig+0x30c>)
 80053d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053dc:	f003 0303 	and.w	r3, r3, #3
 80053e0:	2b03      	cmp	r3, #3
 80053e2:	d81b      	bhi.n	800541c <UART_SetConfig+0xd0>
 80053e4:	a201      	add	r2, pc, #4	; (adr r2, 80053ec <UART_SetConfig+0xa0>)
 80053e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ea:	bf00      	nop
 80053ec:	080053fd 	.word	0x080053fd
 80053f0:	0800540d 	.word	0x0800540d
 80053f4:	08005405 	.word	0x08005405
 80053f8:	08005415 	.word	0x08005415
 80053fc:	2301      	movs	r3, #1
 80053fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005402:	e080      	b.n	8005506 <UART_SetConfig+0x1ba>
 8005404:	2302      	movs	r3, #2
 8005406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800540a:	e07c      	b.n	8005506 <UART_SetConfig+0x1ba>
 800540c:	2304      	movs	r3, #4
 800540e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005412:	e078      	b.n	8005506 <UART_SetConfig+0x1ba>
 8005414:	2308      	movs	r3, #8
 8005416:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800541a:	e074      	b.n	8005506 <UART_SetConfig+0x1ba>
 800541c:	2310      	movs	r3, #16
 800541e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005422:	e070      	b.n	8005506 <UART_SetConfig+0x1ba>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a8c      	ldr	r2, [pc, #560]	; (800565c <UART_SetConfig+0x310>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d138      	bne.n	80054a0 <UART_SetConfig+0x154>
 800542e:	4b8a      	ldr	r3, [pc, #552]	; (8005658 <UART_SetConfig+0x30c>)
 8005430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005434:	f003 030c 	and.w	r3, r3, #12
 8005438:	2b0c      	cmp	r3, #12
 800543a:	d82d      	bhi.n	8005498 <UART_SetConfig+0x14c>
 800543c:	a201      	add	r2, pc, #4	; (adr r2, 8005444 <UART_SetConfig+0xf8>)
 800543e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005442:	bf00      	nop
 8005444:	08005479 	.word	0x08005479
 8005448:	08005499 	.word	0x08005499
 800544c:	08005499 	.word	0x08005499
 8005450:	08005499 	.word	0x08005499
 8005454:	08005489 	.word	0x08005489
 8005458:	08005499 	.word	0x08005499
 800545c:	08005499 	.word	0x08005499
 8005460:	08005499 	.word	0x08005499
 8005464:	08005481 	.word	0x08005481
 8005468:	08005499 	.word	0x08005499
 800546c:	08005499 	.word	0x08005499
 8005470:	08005499 	.word	0x08005499
 8005474:	08005491 	.word	0x08005491
 8005478:	2300      	movs	r3, #0
 800547a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800547e:	e042      	b.n	8005506 <UART_SetConfig+0x1ba>
 8005480:	2302      	movs	r3, #2
 8005482:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005486:	e03e      	b.n	8005506 <UART_SetConfig+0x1ba>
 8005488:	2304      	movs	r3, #4
 800548a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800548e:	e03a      	b.n	8005506 <UART_SetConfig+0x1ba>
 8005490:	2308      	movs	r3, #8
 8005492:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005496:	e036      	b.n	8005506 <UART_SetConfig+0x1ba>
 8005498:	2310      	movs	r3, #16
 800549a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800549e:	e032      	b.n	8005506 <UART_SetConfig+0x1ba>
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a6a      	ldr	r2, [pc, #424]	; (8005650 <UART_SetConfig+0x304>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d12a      	bne.n	8005500 <UART_SetConfig+0x1b4>
 80054aa:	4b6b      	ldr	r3, [pc, #428]	; (8005658 <UART_SetConfig+0x30c>)
 80054ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80054b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054b8:	d01a      	beq.n	80054f0 <UART_SetConfig+0x1a4>
 80054ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054be:	d81b      	bhi.n	80054f8 <UART_SetConfig+0x1ac>
 80054c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054c4:	d00c      	beq.n	80054e0 <UART_SetConfig+0x194>
 80054c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054ca:	d815      	bhi.n	80054f8 <UART_SetConfig+0x1ac>
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d003      	beq.n	80054d8 <UART_SetConfig+0x18c>
 80054d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054d4:	d008      	beq.n	80054e8 <UART_SetConfig+0x19c>
 80054d6:	e00f      	b.n	80054f8 <UART_SetConfig+0x1ac>
 80054d8:	2300      	movs	r3, #0
 80054da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054de:	e012      	b.n	8005506 <UART_SetConfig+0x1ba>
 80054e0:	2302      	movs	r3, #2
 80054e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054e6:	e00e      	b.n	8005506 <UART_SetConfig+0x1ba>
 80054e8:	2304      	movs	r3, #4
 80054ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054ee:	e00a      	b.n	8005506 <UART_SetConfig+0x1ba>
 80054f0:	2308      	movs	r3, #8
 80054f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054f6:	e006      	b.n	8005506 <UART_SetConfig+0x1ba>
 80054f8:	2310      	movs	r3, #16
 80054fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054fe:	e002      	b.n	8005506 <UART_SetConfig+0x1ba>
 8005500:	2310      	movs	r3, #16
 8005502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a51      	ldr	r2, [pc, #324]	; (8005650 <UART_SetConfig+0x304>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d17a      	bne.n	8005606 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005510:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005514:	2b08      	cmp	r3, #8
 8005516:	d824      	bhi.n	8005562 <UART_SetConfig+0x216>
 8005518:	a201      	add	r2, pc, #4	; (adr r2, 8005520 <UART_SetConfig+0x1d4>)
 800551a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800551e:	bf00      	nop
 8005520:	08005545 	.word	0x08005545
 8005524:	08005563 	.word	0x08005563
 8005528:	0800554d 	.word	0x0800554d
 800552c:	08005563 	.word	0x08005563
 8005530:	08005553 	.word	0x08005553
 8005534:	08005563 	.word	0x08005563
 8005538:	08005563 	.word	0x08005563
 800553c:	08005563 	.word	0x08005563
 8005540:	0800555b 	.word	0x0800555b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005544:	f7ff faa6 	bl	8004a94 <HAL_RCC_GetPCLK1Freq>
 8005548:	61f8      	str	r0, [r7, #28]
        break;
 800554a:	e010      	b.n	800556e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800554c:	4b44      	ldr	r3, [pc, #272]	; (8005660 <UART_SetConfig+0x314>)
 800554e:	61fb      	str	r3, [r7, #28]
        break;
 8005550:	e00d      	b.n	800556e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005552:	f7ff fa07 	bl	8004964 <HAL_RCC_GetSysClockFreq>
 8005556:	61f8      	str	r0, [r7, #28]
        break;
 8005558:	e009      	b.n	800556e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800555a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800555e:	61fb      	str	r3, [r7, #28]
        break;
 8005560:	e005      	b.n	800556e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8005562:	2300      	movs	r3, #0
 8005564:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800556c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	2b00      	cmp	r3, #0
 8005572:	f000 8107 	beq.w	8005784 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	685a      	ldr	r2, [r3, #4]
 800557a:	4613      	mov	r3, r2
 800557c:	005b      	lsls	r3, r3, #1
 800557e:	4413      	add	r3, r2
 8005580:	69fa      	ldr	r2, [r7, #28]
 8005582:	429a      	cmp	r2, r3
 8005584:	d305      	bcc.n	8005592 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800558c:	69fa      	ldr	r2, [r7, #28]
 800558e:	429a      	cmp	r2, r3
 8005590:	d903      	bls.n	800559a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005598:	e0f4      	b.n	8005784 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	2200      	movs	r2, #0
 800559e:	461c      	mov	r4, r3
 80055a0:	4615      	mov	r5, r2
 80055a2:	f04f 0200 	mov.w	r2, #0
 80055a6:	f04f 0300 	mov.w	r3, #0
 80055aa:	022b      	lsls	r3, r5, #8
 80055ac:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80055b0:	0222      	lsls	r2, r4, #8
 80055b2:	68f9      	ldr	r1, [r7, #12]
 80055b4:	6849      	ldr	r1, [r1, #4]
 80055b6:	0849      	lsrs	r1, r1, #1
 80055b8:	2000      	movs	r0, #0
 80055ba:	4688      	mov	r8, r1
 80055bc:	4681      	mov	r9, r0
 80055be:	eb12 0a08 	adds.w	sl, r2, r8
 80055c2:	eb43 0b09 	adc.w	fp, r3, r9
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	603b      	str	r3, [r7, #0]
 80055ce:	607a      	str	r2, [r7, #4]
 80055d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055d4:	4650      	mov	r0, sl
 80055d6:	4659      	mov	r1, fp
 80055d8:	f7fb fb2e 	bl	8000c38 <__aeabi_uldivmod>
 80055dc:	4602      	mov	r2, r0
 80055de:	460b      	mov	r3, r1
 80055e0:	4613      	mov	r3, r2
 80055e2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055ea:	d308      	bcc.n	80055fe <UART_SetConfig+0x2b2>
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055f2:	d204      	bcs.n	80055fe <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	69ba      	ldr	r2, [r7, #24]
 80055fa:	60da      	str	r2, [r3, #12]
 80055fc:	e0c2      	b.n	8005784 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005604:	e0be      	b.n	8005784 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	69db      	ldr	r3, [r3, #28]
 800560a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800560e:	d16a      	bne.n	80056e6 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005610:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005614:	2b08      	cmp	r3, #8
 8005616:	d834      	bhi.n	8005682 <UART_SetConfig+0x336>
 8005618:	a201      	add	r2, pc, #4	; (adr r2, 8005620 <UART_SetConfig+0x2d4>)
 800561a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800561e:	bf00      	nop
 8005620:	08005645 	.word	0x08005645
 8005624:	08005665 	.word	0x08005665
 8005628:	0800566d 	.word	0x0800566d
 800562c:	08005683 	.word	0x08005683
 8005630:	08005673 	.word	0x08005673
 8005634:	08005683 	.word	0x08005683
 8005638:	08005683 	.word	0x08005683
 800563c:	08005683 	.word	0x08005683
 8005640:	0800567b 	.word	0x0800567b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005644:	f7ff fa26 	bl	8004a94 <HAL_RCC_GetPCLK1Freq>
 8005648:	61f8      	str	r0, [r7, #28]
        break;
 800564a:	e020      	b.n	800568e <UART_SetConfig+0x342>
 800564c:	efff69f3 	.word	0xefff69f3
 8005650:	40008000 	.word	0x40008000
 8005654:	40013800 	.word	0x40013800
 8005658:	40021000 	.word	0x40021000
 800565c:	40004400 	.word	0x40004400
 8005660:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005664:	f7ff fa2c 	bl	8004ac0 <HAL_RCC_GetPCLK2Freq>
 8005668:	61f8      	str	r0, [r7, #28]
        break;
 800566a:	e010      	b.n	800568e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800566c:	4b4c      	ldr	r3, [pc, #304]	; (80057a0 <UART_SetConfig+0x454>)
 800566e:	61fb      	str	r3, [r7, #28]
        break;
 8005670:	e00d      	b.n	800568e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005672:	f7ff f977 	bl	8004964 <HAL_RCC_GetSysClockFreq>
 8005676:	61f8      	str	r0, [r7, #28]
        break;
 8005678:	e009      	b.n	800568e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800567a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800567e:	61fb      	str	r3, [r7, #28]
        break;
 8005680:	e005      	b.n	800568e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8005682:	2300      	movs	r3, #0
 8005684:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800568c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d077      	beq.n	8005784 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	005a      	lsls	r2, r3, #1
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	085b      	lsrs	r3, r3, #1
 800569e:	441a      	add	r2, r3
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	2b0f      	cmp	r3, #15
 80056ae:	d916      	bls.n	80056de <UART_SetConfig+0x392>
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056b6:	d212      	bcs.n	80056de <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	f023 030f 	bic.w	r3, r3, #15
 80056c0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	085b      	lsrs	r3, r3, #1
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	f003 0307 	and.w	r3, r3, #7
 80056cc:	b29a      	uxth	r2, r3
 80056ce:	8afb      	ldrh	r3, [r7, #22]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	8afa      	ldrh	r2, [r7, #22]
 80056da:	60da      	str	r2, [r3, #12]
 80056dc:	e052      	b.n	8005784 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80056e4:	e04e      	b.n	8005784 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80056ea:	2b08      	cmp	r3, #8
 80056ec:	d827      	bhi.n	800573e <UART_SetConfig+0x3f2>
 80056ee:	a201      	add	r2, pc, #4	; (adr r2, 80056f4 <UART_SetConfig+0x3a8>)
 80056f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f4:	08005719 	.word	0x08005719
 80056f8:	08005721 	.word	0x08005721
 80056fc:	08005729 	.word	0x08005729
 8005700:	0800573f 	.word	0x0800573f
 8005704:	0800572f 	.word	0x0800572f
 8005708:	0800573f 	.word	0x0800573f
 800570c:	0800573f 	.word	0x0800573f
 8005710:	0800573f 	.word	0x0800573f
 8005714:	08005737 	.word	0x08005737
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005718:	f7ff f9bc 	bl	8004a94 <HAL_RCC_GetPCLK1Freq>
 800571c:	61f8      	str	r0, [r7, #28]
        break;
 800571e:	e014      	b.n	800574a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005720:	f7ff f9ce 	bl	8004ac0 <HAL_RCC_GetPCLK2Freq>
 8005724:	61f8      	str	r0, [r7, #28]
        break;
 8005726:	e010      	b.n	800574a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005728:	4b1d      	ldr	r3, [pc, #116]	; (80057a0 <UART_SetConfig+0x454>)
 800572a:	61fb      	str	r3, [r7, #28]
        break;
 800572c:	e00d      	b.n	800574a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800572e:	f7ff f919 	bl	8004964 <HAL_RCC_GetSysClockFreq>
 8005732:	61f8      	str	r0, [r7, #28]
        break;
 8005734:	e009      	b.n	800574a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005736:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800573a:	61fb      	str	r3, [r7, #28]
        break;
 800573c:	e005      	b.n	800574a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800573e:	2300      	movs	r3, #0
 8005740:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005748:	bf00      	nop
    }

    if (pclk != 0U)
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d019      	beq.n	8005784 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	085a      	lsrs	r2, r3, #1
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	441a      	add	r2, r3
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005762:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005764:	69bb      	ldr	r3, [r7, #24]
 8005766:	2b0f      	cmp	r3, #15
 8005768:	d909      	bls.n	800577e <UART_SetConfig+0x432>
 800576a:	69bb      	ldr	r3, [r7, #24]
 800576c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005770:	d205      	bcs.n	800577e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005772:	69bb      	ldr	r3, [r7, #24]
 8005774:	b29a      	uxth	r2, r3
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	60da      	str	r2, [r3, #12]
 800577c:	e002      	b.n	8005784 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2200      	movs	r2, #0
 8005788:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005790:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005794:	4618      	mov	r0, r3
 8005796:	3728      	adds	r7, #40	; 0x28
 8005798:	46bd      	mov	sp, r7
 800579a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800579e:	bf00      	nop
 80057a0:	00f42400 	.word	0x00f42400

080057a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b0:	f003 0308 	and.w	r3, r3, #8
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d00a      	beq.n	80057ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	430a      	orrs	r2, r1
 80057cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d2:	f003 0301 	and.w	r3, r3, #1
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00a      	beq.n	80057f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	430a      	orrs	r2, r1
 80057ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f4:	f003 0302 	and.w	r3, r3, #2
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d00a      	beq.n	8005812 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	430a      	orrs	r2, r1
 8005810:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005816:	f003 0304 	and.w	r3, r3, #4
 800581a:	2b00      	cmp	r3, #0
 800581c:	d00a      	beq.n	8005834 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	430a      	orrs	r2, r1
 8005832:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005838:	f003 0310 	and.w	r3, r3, #16
 800583c:	2b00      	cmp	r3, #0
 800583e:	d00a      	beq.n	8005856 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	430a      	orrs	r2, r1
 8005854:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585a:	f003 0320 	and.w	r3, r3, #32
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00a      	beq.n	8005878 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	430a      	orrs	r2, r1
 8005876:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005880:	2b00      	cmp	r3, #0
 8005882:	d01a      	beq.n	80058ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	430a      	orrs	r2, r1
 8005898:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058a2:	d10a      	bne.n	80058ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	430a      	orrs	r2, r1
 80058b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00a      	beq.n	80058dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	430a      	orrs	r2, r1
 80058da:	605a      	str	r2, [r3, #4]
  }
}
 80058dc:	bf00      	nop
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b098      	sub	sp, #96	; 0x60
 80058ec:	af02      	add	r7, sp, #8
 80058ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80058f8:	f7fc faf6 	bl	8001ee8 <HAL_GetTick>
 80058fc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 0308 	and.w	r3, r3, #8
 8005908:	2b08      	cmp	r3, #8
 800590a:	d12e      	bne.n	800596a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800590c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005910:	9300      	str	r3, [sp, #0]
 8005912:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005914:	2200      	movs	r2, #0
 8005916:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 f88c 	bl	8005a38 <UART_WaitOnFlagUntilTimeout>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d021      	beq.n	800596a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800592e:	e853 3f00 	ldrex	r3, [r3]
 8005932:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005936:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800593a:	653b      	str	r3, [r7, #80]	; 0x50
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	461a      	mov	r2, r3
 8005942:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005944:	647b      	str	r3, [r7, #68]	; 0x44
 8005946:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005948:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800594a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800594c:	e841 2300 	strex	r3, r2, [r1]
 8005950:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005952:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005954:	2b00      	cmp	r3, #0
 8005956:	d1e6      	bne.n	8005926 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2220      	movs	r2, #32
 800595c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e062      	b.n	8005a30 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 0304 	and.w	r3, r3, #4
 8005974:	2b04      	cmp	r3, #4
 8005976:	d149      	bne.n	8005a0c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005978:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800597c:	9300      	str	r3, [sp, #0]
 800597e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005980:	2200      	movs	r2, #0
 8005982:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 f856 	bl	8005a38 <UART_WaitOnFlagUntilTimeout>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d03c      	beq.n	8005a0c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599a:	e853 3f00 	ldrex	r3, [r3]
 800599e:	623b      	str	r3, [r7, #32]
   return(result);
 80059a0:	6a3b      	ldr	r3, [r7, #32]
 80059a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	461a      	mov	r2, r3
 80059ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059b0:	633b      	str	r3, [r7, #48]	; 0x30
 80059b2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059b8:	e841 2300 	strex	r3, r2, [r1]
 80059bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80059be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d1e6      	bne.n	8005992 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	3308      	adds	r3, #8
 80059ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	e853 3f00 	ldrex	r3, [r3]
 80059d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f023 0301 	bic.w	r3, r3, #1
 80059da:	64bb      	str	r3, [r7, #72]	; 0x48
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	3308      	adds	r3, #8
 80059e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059e4:	61fa      	str	r2, [r7, #28]
 80059e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e8:	69b9      	ldr	r1, [r7, #24]
 80059ea:	69fa      	ldr	r2, [r7, #28]
 80059ec:	e841 2300 	strex	r3, r2, [r1]
 80059f0:	617b      	str	r3, [r7, #20]
   return(result);
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d1e5      	bne.n	80059c4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2220      	movs	r2, #32
 80059fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	e011      	b.n	8005a30 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2220      	movs	r2, #32
 8005a10:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2220      	movs	r2, #32
 8005a16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005a2e:	2300      	movs	r3, #0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3758      	adds	r7, #88	; 0x58
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	603b      	str	r3, [r7, #0]
 8005a44:	4613      	mov	r3, r2
 8005a46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a48:	e049      	b.n	8005ade <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a50:	d045      	beq.n	8005ade <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a52:	f7fc fa49 	bl	8001ee8 <HAL_GetTick>
 8005a56:	4602      	mov	r2, r0
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	1ad3      	subs	r3, r2, r3
 8005a5c:	69ba      	ldr	r2, [r7, #24]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d302      	bcc.n	8005a68 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d101      	bne.n	8005a6c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	e048      	b.n	8005afe <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 0304 	and.w	r3, r3, #4
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d031      	beq.n	8005ade <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	69db      	ldr	r3, [r3, #28]
 8005a80:	f003 0308 	and.w	r3, r3, #8
 8005a84:	2b08      	cmp	r3, #8
 8005a86:	d110      	bne.n	8005aaa <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2208      	movs	r2, #8
 8005a8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a90:	68f8      	ldr	r0, [r7, #12]
 8005a92:	f000 f838 	bl	8005b06 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2208      	movs	r2, #8
 8005a9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e029      	b.n	8005afe <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	69db      	ldr	r3, [r3, #28]
 8005ab0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ab4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ab8:	d111      	bne.n	8005ade <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ac2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ac4:	68f8      	ldr	r0, [r7, #12]
 8005ac6:	f000 f81e 	bl	8005b06 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2220      	movs	r2, #32
 8005ace:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e00f      	b.n	8005afe <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	69da      	ldr	r2, [r3, #28]
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	68ba      	ldr	r2, [r7, #8]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	bf0c      	ite	eq
 8005aee:	2301      	moveq	r3, #1
 8005af0:	2300      	movne	r3, #0
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	461a      	mov	r2, r3
 8005af6:	79fb      	ldrb	r3, [r7, #7]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d0a6      	beq.n	8005a4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3710      	adds	r7, #16
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b06:	b480      	push	{r7}
 8005b08:	b095      	sub	sp, #84	; 0x54
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b16:	e853 3f00 	ldrex	r3, [r3]
 8005b1a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	461a      	mov	r2, r3
 8005b2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b2c:	643b      	str	r3, [r7, #64]	; 0x40
 8005b2e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b30:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b34:	e841 2300 	strex	r3, r2, [r1]
 8005b38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d1e6      	bne.n	8005b0e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	3308      	adds	r3, #8
 8005b46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b48:	6a3b      	ldr	r3, [r7, #32]
 8005b4a:	e853 3f00 	ldrex	r3, [r3]
 8005b4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	f023 0301 	bic.w	r3, r3, #1
 8005b56:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	3308      	adds	r3, #8
 8005b5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b60:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b68:	e841 2300 	strex	r3, r2, [r1]
 8005b6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d1e5      	bne.n	8005b40 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d118      	bne.n	8005bae <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	e853 3f00 	ldrex	r3, [r3]
 8005b88:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	f023 0310 	bic.w	r3, r3, #16
 8005b90:	647b      	str	r3, [r7, #68]	; 0x44
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	461a      	mov	r2, r3
 8005b98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b9a:	61bb      	str	r3, [r7, #24]
 8005b9c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9e:	6979      	ldr	r1, [r7, #20]
 8005ba0:	69ba      	ldr	r2, [r7, #24]
 8005ba2:	e841 2300 	strex	r3, r2, [r1]
 8005ba6:	613b      	str	r3, [r7, #16]
   return(result);
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1e6      	bne.n	8005b7c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2220      	movs	r2, #32
 8005bb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005bc2:	bf00      	nop
 8005bc4:	3754      	adds	r7, #84	; 0x54
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
	...

08005bd0 <std>:
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	b510      	push	{r4, lr}
 8005bd4:	4604      	mov	r4, r0
 8005bd6:	e9c0 3300 	strd	r3, r3, [r0]
 8005bda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005bde:	6083      	str	r3, [r0, #8]
 8005be0:	8181      	strh	r1, [r0, #12]
 8005be2:	6643      	str	r3, [r0, #100]	; 0x64
 8005be4:	81c2      	strh	r2, [r0, #14]
 8005be6:	6183      	str	r3, [r0, #24]
 8005be8:	4619      	mov	r1, r3
 8005bea:	2208      	movs	r2, #8
 8005bec:	305c      	adds	r0, #92	; 0x5c
 8005bee:	f000 f926 	bl	8005e3e <memset>
 8005bf2:	4b0d      	ldr	r3, [pc, #52]	; (8005c28 <std+0x58>)
 8005bf4:	6263      	str	r3, [r4, #36]	; 0x24
 8005bf6:	4b0d      	ldr	r3, [pc, #52]	; (8005c2c <std+0x5c>)
 8005bf8:	62a3      	str	r3, [r4, #40]	; 0x28
 8005bfa:	4b0d      	ldr	r3, [pc, #52]	; (8005c30 <std+0x60>)
 8005bfc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005bfe:	4b0d      	ldr	r3, [pc, #52]	; (8005c34 <std+0x64>)
 8005c00:	6323      	str	r3, [r4, #48]	; 0x30
 8005c02:	4b0d      	ldr	r3, [pc, #52]	; (8005c38 <std+0x68>)
 8005c04:	6224      	str	r4, [r4, #32]
 8005c06:	429c      	cmp	r4, r3
 8005c08:	d006      	beq.n	8005c18 <std+0x48>
 8005c0a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005c0e:	4294      	cmp	r4, r2
 8005c10:	d002      	beq.n	8005c18 <std+0x48>
 8005c12:	33d0      	adds	r3, #208	; 0xd0
 8005c14:	429c      	cmp	r4, r3
 8005c16:	d105      	bne.n	8005c24 <std+0x54>
 8005c18:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005c1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c20:	f000 b986 	b.w	8005f30 <__retarget_lock_init_recursive>
 8005c24:	bd10      	pop	{r4, pc}
 8005c26:	bf00      	nop
 8005c28:	08005db9 	.word	0x08005db9
 8005c2c:	08005ddb 	.word	0x08005ddb
 8005c30:	08005e13 	.word	0x08005e13
 8005c34:	08005e37 	.word	0x08005e37
 8005c38:	200005dc 	.word	0x200005dc

08005c3c <stdio_exit_handler>:
 8005c3c:	4a02      	ldr	r2, [pc, #8]	; (8005c48 <stdio_exit_handler+0xc>)
 8005c3e:	4903      	ldr	r1, [pc, #12]	; (8005c4c <stdio_exit_handler+0x10>)
 8005c40:	4803      	ldr	r0, [pc, #12]	; (8005c50 <stdio_exit_handler+0x14>)
 8005c42:	f000 b869 	b.w	8005d18 <_fwalk_sglue>
 8005c46:	bf00      	nop
 8005c48:	20000014 	.word	0x20000014
 8005c4c:	08006aa9 	.word	0x08006aa9
 8005c50:	20000020 	.word	0x20000020

08005c54 <cleanup_stdio>:
 8005c54:	6841      	ldr	r1, [r0, #4]
 8005c56:	4b0c      	ldr	r3, [pc, #48]	; (8005c88 <cleanup_stdio+0x34>)
 8005c58:	4299      	cmp	r1, r3
 8005c5a:	b510      	push	{r4, lr}
 8005c5c:	4604      	mov	r4, r0
 8005c5e:	d001      	beq.n	8005c64 <cleanup_stdio+0x10>
 8005c60:	f000 ff22 	bl	8006aa8 <_fflush_r>
 8005c64:	68a1      	ldr	r1, [r4, #8]
 8005c66:	4b09      	ldr	r3, [pc, #36]	; (8005c8c <cleanup_stdio+0x38>)
 8005c68:	4299      	cmp	r1, r3
 8005c6a:	d002      	beq.n	8005c72 <cleanup_stdio+0x1e>
 8005c6c:	4620      	mov	r0, r4
 8005c6e:	f000 ff1b 	bl	8006aa8 <_fflush_r>
 8005c72:	68e1      	ldr	r1, [r4, #12]
 8005c74:	4b06      	ldr	r3, [pc, #24]	; (8005c90 <cleanup_stdio+0x3c>)
 8005c76:	4299      	cmp	r1, r3
 8005c78:	d004      	beq.n	8005c84 <cleanup_stdio+0x30>
 8005c7a:	4620      	mov	r0, r4
 8005c7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c80:	f000 bf12 	b.w	8006aa8 <_fflush_r>
 8005c84:	bd10      	pop	{r4, pc}
 8005c86:	bf00      	nop
 8005c88:	200005dc 	.word	0x200005dc
 8005c8c:	20000644 	.word	0x20000644
 8005c90:	200006ac 	.word	0x200006ac

08005c94 <global_stdio_init.part.0>:
 8005c94:	b510      	push	{r4, lr}
 8005c96:	4b0b      	ldr	r3, [pc, #44]	; (8005cc4 <global_stdio_init.part.0+0x30>)
 8005c98:	4c0b      	ldr	r4, [pc, #44]	; (8005cc8 <global_stdio_init.part.0+0x34>)
 8005c9a:	4a0c      	ldr	r2, [pc, #48]	; (8005ccc <global_stdio_init.part.0+0x38>)
 8005c9c:	601a      	str	r2, [r3, #0]
 8005c9e:	4620      	mov	r0, r4
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	2104      	movs	r1, #4
 8005ca4:	f7ff ff94 	bl	8005bd0 <std>
 8005ca8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005cac:	2201      	movs	r2, #1
 8005cae:	2109      	movs	r1, #9
 8005cb0:	f7ff ff8e 	bl	8005bd0 <std>
 8005cb4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005cb8:	2202      	movs	r2, #2
 8005cba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cbe:	2112      	movs	r1, #18
 8005cc0:	f7ff bf86 	b.w	8005bd0 <std>
 8005cc4:	20000714 	.word	0x20000714
 8005cc8:	200005dc 	.word	0x200005dc
 8005ccc:	08005c3d 	.word	0x08005c3d

08005cd0 <__sfp_lock_acquire>:
 8005cd0:	4801      	ldr	r0, [pc, #4]	; (8005cd8 <__sfp_lock_acquire+0x8>)
 8005cd2:	f000 b92e 	b.w	8005f32 <__retarget_lock_acquire_recursive>
 8005cd6:	bf00      	nop
 8005cd8:	2000071d 	.word	0x2000071d

08005cdc <__sfp_lock_release>:
 8005cdc:	4801      	ldr	r0, [pc, #4]	; (8005ce4 <__sfp_lock_release+0x8>)
 8005cde:	f000 b929 	b.w	8005f34 <__retarget_lock_release_recursive>
 8005ce2:	bf00      	nop
 8005ce4:	2000071d 	.word	0x2000071d

08005ce8 <__sinit>:
 8005ce8:	b510      	push	{r4, lr}
 8005cea:	4604      	mov	r4, r0
 8005cec:	f7ff fff0 	bl	8005cd0 <__sfp_lock_acquire>
 8005cf0:	6a23      	ldr	r3, [r4, #32]
 8005cf2:	b11b      	cbz	r3, 8005cfc <__sinit+0x14>
 8005cf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cf8:	f7ff bff0 	b.w	8005cdc <__sfp_lock_release>
 8005cfc:	4b04      	ldr	r3, [pc, #16]	; (8005d10 <__sinit+0x28>)
 8005cfe:	6223      	str	r3, [r4, #32]
 8005d00:	4b04      	ldr	r3, [pc, #16]	; (8005d14 <__sinit+0x2c>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d1f5      	bne.n	8005cf4 <__sinit+0xc>
 8005d08:	f7ff ffc4 	bl	8005c94 <global_stdio_init.part.0>
 8005d0c:	e7f2      	b.n	8005cf4 <__sinit+0xc>
 8005d0e:	bf00      	nop
 8005d10:	08005c55 	.word	0x08005c55
 8005d14:	20000714 	.word	0x20000714

08005d18 <_fwalk_sglue>:
 8005d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d1c:	4607      	mov	r7, r0
 8005d1e:	4688      	mov	r8, r1
 8005d20:	4614      	mov	r4, r2
 8005d22:	2600      	movs	r6, #0
 8005d24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005d28:	f1b9 0901 	subs.w	r9, r9, #1
 8005d2c:	d505      	bpl.n	8005d3a <_fwalk_sglue+0x22>
 8005d2e:	6824      	ldr	r4, [r4, #0]
 8005d30:	2c00      	cmp	r4, #0
 8005d32:	d1f7      	bne.n	8005d24 <_fwalk_sglue+0xc>
 8005d34:	4630      	mov	r0, r6
 8005d36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d3a:	89ab      	ldrh	r3, [r5, #12]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d907      	bls.n	8005d50 <_fwalk_sglue+0x38>
 8005d40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d44:	3301      	adds	r3, #1
 8005d46:	d003      	beq.n	8005d50 <_fwalk_sglue+0x38>
 8005d48:	4629      	mov	r1, r5
 8005d4a:	4638      	mov	r0, r7
 8005d4c:	47c0      	blx	r8
 8005d4e:	4306      	orrs	r6, r0
 8005d50:	3568      	adds	r5, #104	; 0x68
 8005d52:	e7e9      	b.n	8005d28 <_fwalk_sglue+0x10>

08005d54 <iprintf>:
 8005d54:	b40f      	push	{r0, r1, r2, r3}
 8005d56:	b507      	push	{r0, r1, r2, lr}
 8005d58:	4906      	ldr	r1, [pc, #24]	; (8005d74 <iprintf+0x20>)
 8005d5a:	ab04      	add	r3, sp, #16
 8005d5c:	6808      	ldr	r0, [r1, #0]
 8005d5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d62:	6881      	ldr	r1, [r0, #8]
 8005d64:	9301      	str	r3, [sp, #4]
 8005d66:	f000 fb6f 	bl	8006448 <_vfiprintf_r>
 8005d6a:	b003      	add	sp, #12
 8005d6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d70:	b004      	add	sp, #16
 8005d72:	4770      	bx	lr
 8005d74:	2000006c 	.word	0x2000006c

08005d78 <siprintf>:
 8005d78:	b40e      	push	{r1, r2, r3}
 8005d7a:	b500      	push	{lr}
 8005d7c:	b09c      	sub	sp, #112	; 0x70
 8005d7e:	ab1d      	add	r3, sp, #116	; 0x74
 8005d80:	9002      	str	r0, [sp, #8]
 8005d82:	9006      	str	r0, [sp, #24]
 8005d84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005d88:	4809      	ldr	r0, [pc, #36]	; (8005db0 <siprintf+0x38>)
 8005d8a:	9107      	str	r1, [sp, #28]
 8005d8c:	9104      	str	r1, [sp, #16]
 8005d8e:	4909      	ldr	r1, [pc, #36]	; (8005db4 <siprintf+0x3c>)
 8005d90:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d94:	9105      	str	r1, [sp, #20]
 8005d96:	6800      	ldr	r0, [r0, #0]
 8005d98:	9301      	str	r3, [sp, #4]
 8005d9a:	a902      	add	r1, sp, #8
 8005d9c:	f000 fa2c 	bl	80061f8 <_svfiprintf_r>
 8005da0:	9b02      	ldr	r3, [sp, #8]
 8005da2:	2200      	movs	r2, #0
 8005da4:	701a      	strb	r2, [r3, #0]
 8005da6:	b01c      	add	sp, #112	; 0x70
 8005da8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005dac:	b003      	add	sp, #12
 8005dae:	4770      	bx	lr
 8005db0:	2000006c 	.word	0x2000006c
 8005db4:	ffff0208 	.word	0xffff0208

08005db8 <__sread>:
 8005db8:	b510      	push	{r4, lr}
 8005dba:	460c      	mov	r4, r1
 8005dbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dc0:	f000 f868 	bl	8005e94 <_read_r>
 8005dc4:	2800      	cmp	r0, #0
 8005dc6:	bfab      	itete	ge
 8005dc8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005dca:	89a3      	ldrhlt	r3, [r4, #12]
 8005dcc:	181b      	addge	r3, r3, r0
 8005dce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005dd2:	bfac      	ite	ge
 8005dd4:	6563      	strge	r3, [r4, #84]	; 0x54
 8005dd6:	81a3      	strhlt	r3, [r4, #12]
 8005dd8:	bd10      	pop	{r4, pc}

08005dda <__swrite>:
 8005dda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dde:	461f      	mov	r7, r3
 8005de0:	898b      	ldrh	r3, [r1, #12]
 8005de2:	05db      	lsls	r3, r3, #23
 8005de4:	4605      	mov	r5, r0
 8005de6:	460c      	mov	r4, r1
 8005de8:	4616      	mov	r6, r2
 8005dea:	d505      	bpl.n	8005df8 <__swrite+0x1e>
 8005dec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005df0:	2302      	movs	r3, #2
 8005df2:	2200      	movs	r2, #0
 8005df4:	f000 f83c 	bl	8005e70 <_lseek_r>
 8005df8:	89a3      	ldrh	r3, [r4, #12]
 8005dfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005dfe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e02:	81a3      	strh	r3, [r4, #12]
 8005e04:	4632      	mov	r2, r6
 8005e06:	463b      	mov	r3, r7
 8005e08:	4628      	mov	r0, r5
 8005e0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e0e:	f000 b853 	b.w	8005eb8 <_write_r>

08005e12 <__sseek>:
 8005e12:	b510      	push	{r4, lr}
 8005e14:	460c      	mov	r4, r1
 8005e16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e1a:	f000 f829 	bl	8005e70 <_lseek_r>
 8005e1e:	1c43      	adds	r3, r0, #1
 8005e20:	89a3      	ldrh	r3, [r4, #12]
 8005e22:	bf15      	itete	ne
 8005e24:	6560      	strne	r0, [r4, #84]	; 0x54
 8005e26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005e2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005e2e:	81a3      	strheq	r3, [r4, #12]
 8005e30:	bf18      	it	ne
 8005e32:	81a3      	strhne	r3, [r4, #12]
 8005e34:	bd10      	pop	{r4, pc}

08005e36 <__sclose>:
 8005e36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e3a:	f000 b809 	b.w	8005e50 <_close_r>

08005e3e <memset>:
 8005e3e:	4402      	add	r2, r0
 8005e40:	4603      	mov	r3, r0
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d100      	bne.n	8005e48 <memset+0xa>
 8005e46:	4770      	bx	lr
 8005e48:	f803 1b01 	strb.w	r1, [r3], #1
 8005e4c:	e7f9      	b.n	8005e42 <memset+0x4>
	...

08005e50 <_close_r>:
 8005e50:	b538      	push	{r3, r4, r5, lr}
 8005e52:	4d06      	ldr	r5, [pc, #24]	; (8005e6c <_close_r+0x1c>)
 8005e54:	2300      	movs	r3, #0
 8005e56:	4604      	mov	r4, r0
 8005e58:	4608      	mov	r0, r1
 8005e5a:	602b      	str	r3, [r5, #0]
 8005e5c:	f7fb ff35 	bl	8001cca <_close>
 8005e60:	1c43      	adds	r3, r0, #1
 8005e62:	d102      	bne.n	8005e6a <_close_r+0x1a>
 8005e64:	682b      	ldr	r3, [r5, #0]
 8005e66:	b103      	cbz	r3, 8005e6a <_close_r+0x1a>
 8005e68:	6023      	str	r3, [r4, #0]
 8005e6a:	bd38      	pop	{r3, r4, r5, pc}
 8005e6c:	20000718 	.word	0x20000718

08005e70 <_lseek_r>:
 8005e70:	b538      	push	{r3, r4, r5, lr}
 8005e72:	4d07      	ldr	r5, [pc, #28]	; (8005e90 <_lseek_r+0x20>)
 8005e74:	4604      	mov	r4, r0
 8005e76:	4608      	mov	r0, r1
 8005e78:	4611      	mov	r1, r2
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	602a      	str	r2, [r5, #0]
 8005e7e:	461a      	mov	r2, r3
 8005e80:	f7fb ff4a 	bl	8001d18 <_lseek>
 8005e84:	1c43      	adds	r3, r0, #1
 8005e86:	d102      	bne.n	8005e8e <_lseek_r+0x1e>
 8005e88:	682b      	ldr	r3, [r5, #0]
 8005e8a:	b103      	cbz	r3, 8005e8e <_lseek_r+0x1e>
 8005e8c:	6023      	str	r3, [r4, #0]
 8005e8e:	bd38      	pop	{r3, r4, r5, pc}
 8005e90:	20000718 	.word	0x20000718

08005e94 <_read_r>:
 8005e94:	b538      	push	{r3, r4, r5, lr}
 8005e96:	4d07      	ldr	r5, [pc, #28]	; (8005eb4 <_read_r+0x20>)
 8005e98:	4604      	mov	r4, r0
 8005e9a:	4608      	mov	r0, r1
 8005e9c:	4611      	mov	r1, r2
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	602a      	str	r2, [r5, #0]
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	f7fb fed8 	bl	8001c58 <_read>
 8005ea8:	1c43      	adds	r3, r0, #1
 8005eaa:	d102      	bne.n	8005eb2 <_read_r+0x1e>
 8005eac:	682b      	ldr	r3, [r5, #0]
 8005eae:	b103      	cbz	r3, 8005eb2 <_read_r+0x1e>
 8005eb0:	6023      	str	r3, [r4, #0]
 8005eb2:	bd38      	pop	{r3, r4, r5, pc}
 8005eb4:	20000718 	.word	0x20000718

08005eb8 <_write_r>:
 8005eb8:	b538      	push	{r3, r4, r5, lr}
 8005eba:	4d07      	ldr	r5, [pc, #28]	; (8005ed8 <_write_r+0x20>)
 8005ebc:	4604      	mov	r4, r0
 8005ebe:	4608      	mov	r0, r1
 8005ec0:	4611      	mov	r1, r2
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	602a      	str	r2, [r5, #0]
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	f7fb fee3 	bl	8001c92 <_write>
 8005ecc:	1c43      	adds	r3, r0, #1
 8005ece:	d102      	bne.n	8005ed6 <_write_r+0x1e>
 8005ed0:	682b      	ldr	r3, [r5, #0]
 8005ed2:	b103      	cbz	r3, 8005ed6 <_write_r+0x1e>
 8005ed4:	6023      	str	r3, [r4, #0]
 8005ed6:	bd38      	pop	{r3, r4, r5, pc}
 8005ed8:	20000718 	.word	0x20000718

08005edc <__errno>:
 8005edc:	4b01      	ldr	r3, [pc, #4]	; (8005ee4 <__errno+0x8>)
 8005ede:	6818      	ldr	r0, [r3, #0]
 8005ee0:	4770      	bx	lr
 8005ee2:	bf00      	nop
 8005ee4:	2000006c 	.word	0x2000006c

08005ee8 <__libc_init_array>:
 8005ee8:	b570      	push	{r4, r5, r6, lr}
 8005eea:	4d0d      	ldr	r5, [pc, #52]	; (8005f20 <__libc_init_array+0x38>)
 8005eec:	4c0d      	ldr	r4, [pc, #52]	; (8005f24 <__libc_init_array+0x3c>)
 8005eee:	1b64      	subs	r4, r4, r5
 8005ef0:	10a4      	asrs	r4, r4, #2
 8005ef2:	2600      	movs	r6, #0
 8005ef4:	42a6      	cmp	r6, r4
 8005ef6:	d109      	bne.n	8005f0c <__libc_init_array+0x24>
 8005ef8:	4d0b      	ldr	r5, [pc, #44]	; (8005f28 <__libc_init_array+0x40>)
 8005efa:	4c0c      	ldr	r4, [pc, #48]	; (8005f2c <__libc_init_array+0x44>)
 8005efc:	f001 fb82 	bl	8007604 <_init>
 8005f00:	1b64      	subs	r4, r4, r5
 8005f02:	10a4      	asrs	r4, r4, #2
 8005f04:	2600      	movs	r6, #0
 8005f06:	42a6      	cmp	r6, r4
 8005f08:	d105      	bne.n	8005f16 <__libc_init_array+0x2e>
 8005f0a:	bd70      	pop	{r4, r5, r6, pc}
 8005f0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f10:	4798      	blx	r3
 8005f12:	3601      	adds	r6, #1
 8005f14:	e7ee      	b.n	8005ef4 <__libc_init_array+0xc>
 8005f16:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f1a:	4798      	blx	r3
 8005f1c:	3601      	adds	r6, #1
 8005f1e:	e7f2      	b.n	8005f06 <__libc_init_array+0x1e>
 8005f20:	08008468 	.word	0x08008468
 8005f24:	08008468 	.word	0x08008468
 8005f28:	08008468 	.word	0x08008468
 8005f2c:	0800846c 	.word	0x0800846c

08005f30 <__retarget_lock_init_recursive>:
 8005f30:	4770      	bx	lr

08005f32 <__retarget_lock_acquire_recursive>:
 8005f32:	4770      	bx	lr

08005f34 <__retarget_lock_release_recursive>:
 8005f34:	4770      	bx	lr

08005f36 <memcpy>:
 8005f36:	440a      	add	r2, r1
 8005f38:	4291      	cmp	r1, r2
 8005f3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f3e:	d100      	bne.n	8005f42 <memcpy+0xc>
 8005f40:	4770      	bx	lr
 8005f42:	b510      	push	{r4, lr}
 8005f44:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f4c:	4291      	cmp	r1, r2
 8005f4e:	d1f9      	bne.n	8005f44 <memcpy+0xe>
 8005f50:	bd10      	pop	{r4, pc}
	...

08005f54 <_free_r>:
 8005f54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f56:	2900      	cmp	r1, #0
 8005f58:	d044      	beq.n	8005fe4 <_free_r+0x90>
 8005f5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f5e:	9001      	str	r0, [sp, #4]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	f1a1 0404 	sub.w	r4, r1, #4
 8005f66:	bfb8      	it	lt
 8005f68:	18e4      	addlt	r4, r4, r3
 8005f6a:	f000 f8df 	bl	800612c <__malloc_lock>
 8005f6e:	4a1e      	ldr	r2, [pc, #120]	; (8005fe8 <_free_r+0x94>)
 8005f70:	9801      	ldr	r0, [sp, #4]
 8005f72:	6813      	ldr	r3, [r2, #0]
 8005f74:	b933      	cbnz	r3, 8005f84 <_free_r+0x30>
 8005f76:	6063      	str	r3, [r4, #4]
 8005f78:	6014      	str	r4, [r2, #0]
 8005f7a:	b003      	add	sp, #12
 8005f7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f80:	f000 b8da 	b.w	8006138 <__malloc_unlock>
 8005f84:	42a3      	cmp	r3, r4
 8005f86:	d908      	bls.n	8005f9a <_free_r+0x46>
 8005f88:	6825      	ldr	r5, [r4, #0]
 8005f8a:	1961      	adds	r1, r4, r5
 8005f8c:	428b      	cmp	r3, r1
 8005f8e:	bf01      	itttt	eq
 8005f90:	6819      	ldreq	r1, [r3, #0]
 8005f92:	685b      	ldreq	r3, [r3, #4]
 8005f94:	1949      	addeq	r1, r1, r5
 8005f96:	6021      	streq	r1, [r4, #0]
 8005f98:	e7ed      	b.n	8005f76 <_free_r+0x22>
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	b10b      	cbz	r3, 8005fa4 <_free_r+0x50>
 8005fa0:	42a3      	cmp	r3, r4
 8005fa2:	d9fa      	bls.n	8005f9a <_free_r+0x46>
 8005fa4:	6811      	ldr	r1, [r2, #0]
 8005fa6:	1855      	adds	r5, r2, r1
 8005fa8:	42a5      	cmp	r5, r4
 8005faa:	d10b      	bne.n	8005fc4 <_free_r+0x70>
 8005fac:	6824      	ldr	r4, [r4, #0]
 8005fae:	4421      	add	r1, r4
 8005fb0:	1854      	adds	r4, r2, r1
 8005fb2:	42a3      	cmp	r3, r4
 8005fb4:	6011      	str	r1, [r2, #0]
 8005fb6:	d1e0      	bne.n	8005f7a <_free_r+0x26>
 8005fb8:	681c      	ldr	r4, [r3, #0]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	6053      	str	r3, [r2, #4]
 8005fbe:	440c      	add	r4, r1
 8005fc0:	6014      	str	r4, [r2, #0]
 8005fc2:	e7da      	b.n	8005f7a <_free_r+0x26>
 8005fc4:	d902      	bls.n	8005fcc <_free_r+0x78>
 8005fc6:	230c      	movs	r3, #12
 8005fc8:	6003      	str	r3, [r0, #0]
 8005fca:	e7d6      	b.n	8005f7a <_free_r+0x26>
 8005fcc:	6825      	ldr	r5, [r4, #0]
 8005fce:	1961      	adds	r1, r4, r5
 8005fd0:	428b      	cmp	r3, r1
 8005fd2:	bf04      	itt	eq
 8005fd4:	6819      	ldreq	r1, [r3, #0]
 8005fd6:	685b      	ldreq	r3, [r3, #4]
 8005fd8:	6063      	str	r3, [r4, #4]
 8005fda:	bf04      	itt	eq
 8005fdc:	1949      	addeq	r1, r1, r5
 8005fde:	6021      	streq	r1, [r4, #0]
 8005fe0:	6054      	str	r4, [r2, #4]
 8005fe2:	e7ca      	b.n	8005f7a <_free_r+0x26>
 8005fe4:	b003      	add	sp, #12
 8005fe6:	bd30      	pop	{r4, r5, pc}
 8005fe8:	20000720 	.word	0x20000720

08005fec <sbrk_aligned>:
 8005fec:	b570      	push	{r4, r5, r6, lr}
 8005fee:	4e0e      	ldr	r6, [pc, #56]	; (8006028 <sbrk_aligned+0x3c>)
 8005ff0:	460c      	mov	r4, r1
 8005ff2:	6831      	ldr	r1, [r6, #0]
 8005ff4:	4605      	mov	r5, r0
 8005ff6:	b911      	cbnz	r1, 8005ffe <sbrk_aligned+0x12>
 8005ff8:	f000 fe2e 	bl	8006c58 <_sbrk_r>
 8005ffc:	6030      	str	r0, [r6, #0]
 8005ffe:	4621      	mov	r1, r4
 8006000:	4628      	mov	r0, r5
 8006002:	f000 fe29 	bl	8006c58 <_sbrk_r>
 8006006:	1c43      	adds	r3, r0, #1
 8006008:	d00a      	beq.n	8006020 <sbrk_aligned+0x34>
 800600a:	1cc4      	adds	r4, r0, #3
 800600c:	f024 0403 	bic.w	r4, r4, #3
 8006010:	42a0      	cmp	r0, r4
 8006012:	d007      	beq.n	8006024 <sbrk_aligned+0x38>
 8006014:	1a21      	subs	r1, r4, r0
 8006016:	4628      	mov	r0, r5
 8006018:	f000 fe1e 	bl	8006c58 <_sbrk_r>
 800601c:	3001      	adds	r0, #1
 800601e:	d101      	bne.n	8006024 <sbrk_aligned+0x38>
 8006020:	f04f 34ff 	mov.w	r4, #4294967295
 8006024:	4620      	mov	r0, r4
 8006026:	bd70      	pop	{r4, r5, r6, pc}
 8006028:	20000724 	.word	0x20000724

0800602c <_malloc_r>:
 800602c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006030:	1ccd      	adds	r5, r1, #3
 8006032:	f025 0503 	bic.w	r5, r5, #3
 8006036:	3508      	adds	r5, #8
 8006038:	2d0c      	cmp	r5, #12
 800603a:	bf38      	it	cc
 800603c:	250c      	movcc	r5, #12
 800603e:	2d00      	cmp	r5, #0
 8006040:	4607      	mov	r7, r0
 8006042:	db01      	blt.n	8006048 <_malloc_r+0x1c>
 8006044:	42a9      	cmp	r1, r5
 8006046:	d905      	bls.n	8006054 <_malloc_r+0x28>
 8006048:	230c      	movs	r3, #12
 800604a:	603b      	str	r3, [r7, #0]
 800604c:	2600      	movs	r6, #0
 800604e:	4630      	mov	r0, r6
 8006050:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006054:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006128 <_malloc_r+0xfc>
 8006058:	f000 f868 	bl	800612c <__malloc_lock>
 800605c:	f8d8 3000 	ldr.w	r3, [r8]
 8006060:	461c      	mov	r4, r3
 8006062:	bb5c      	cbnz	r4, 80060bc <_malloc_r+0x90>
 8006064:	4629      	mov	r1, r5
 8006066:	4638      	mov	r0, r7
 8006068:	f7ff ffc0 	bl	8005fec <sbrk_aligned>
 800606c:	1c43      	adds	r3, r0, #1
 800606e:	4604      	mov	r4, r0
 8006070:	d155      	bne.n	800611e <_malloc_r+0xf2>
 8006072:	f8d8 4000 	ldr.w	r4, [r8]
 8006076:	4626      	mov	r6, r4
 8006078:	2e00      	cmp	r6, #0
 800607a:	d145      	bne.n	8006108 <_malloc_r+0xdc>
 800607c:	2c00      	cmp	r4, #0
 800607e:	d048      	beq.n	8006112 <_malloc_r+0xe6>
 8006080:	6823      	ldr	r3, [r4, #0]
 8006082:	4631      	mov	r1, r6
 8006084:	4638      	mov	r0, r7
 8006086:	eb04 0903 	add.w	r9, r4, r3
 800608a:	f000 fde5 	bl	8006c58 <_sbrk_r>
 800608e:	4581      	cmp	r9, r0
 8006090:	d13f      	bne.n	8006112 <_malloc_r+0xe6>
 8006092:	6821      	ldr	r1, [r4, #0]
 8006094:	1a6d      	subs	r5, r5, r1
 8006096:	4629      	mov	r1, r5
 8006098:	4638      	mov	r0, r7
 800609a:	f7ff ffa7 	bl	8005fec <sbrk_aligned>
 800609e:	3001      	adds	r0, #1
 80060a0:	d037      	beq.n	8006112 <_malloc_r+0xe6>
 80060a2:	6823      	ldr	r3, [r4, #0]
 80060a4:	442b      	add	r3, r5
 80060a6:	6023      	str	r3, [r4, #0]
 80060a8:	f8d8 3000 	ldr.w	r3, [r8]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d038      	beq.n	8006122 <_malloc_r+0xf6>
 80060b0:	685a      	ldr	r2, [r3, #4]
 80060b2:	42a2      	cmp	r2, r4
 80060b4:	d12b      	bne.n	800610e <_malloc_r+0xe2>
 80060b6:	2200      	movs	r2, #0
 80060b8:	605a      	str	r2, [r3, #4]
 80060ba:	e00f      	b.n	80060dc <_malloc_r+0xb0>
 80060bc:	6822      	ldr	r2, [r4, #0]
 80060be:	1b52      	subs	r2, r2, r5
 80060c0:	d41f      	bmi.n	8006102 <_malloc_r+0xd6>
 80060c2:	2a0b      	cmp	r2, #11
 80060c4:	d917      	bls.n	80060f6 <_malloc_r+0xca>
 80060c6:	1961      	adds	r1, r4, r5
 80060c8:	42a3      	cmp	r3, r4
 80060ca:	6025      	str	r5, [r4, #0]
 80060cc:	bf18      	it	ne
 80060ce:	6059      	strne	r1, [r3, #4]
 80060d0:	6863      	ldr	r3, [r4, #4]
 80060d2:	bf08      	it	eq
 80060d4:	f8c8 1000 	streq.w	r1, [r8]
 80060d8:	5162      	str	r2, [r4, r5]
 80060da:	604b      	str	r3, [r1, #4]
 80060dc:	4638      	mov	r0, r7
 80060de:	f104 060b 	add.w	r6, r4, #11
 80060e2:	f000 f829 	bl	8006138 <__malloc_unlock>
 80060e6:	f026 0607 	bic.w	r6, r6, #7
 80060ea:	1d23      	adds	r3, r4, #4
 80060ec:	1af2      	subs	r2, r6, r3
 80060ee:	d0ae      	beq.n	800604e <_malloc_r+0x22>
 80060f0:	1b9b      	subs	r3, r3, r6
 80060f2:	50a3      	str	r3, [r4, r2]
 80060f4:	e7ab      	b.n	800604e <_malloc_r+0x22>
 80060f6:	42a3      	cmp	r3, r4
 80060f8:	6862      	ldr	r2, [r4, #4]
 80060fa:	d1dd      	bne.n	80060b8 <_malloc_r+0x8c>
 80060fc:	f8c8 2000 	str.w	r2, [r8]
 8006100:	e7ec      	b.n	80060dc <_malloc_r+0xb0>
 8006102:	4623      	mov	r3, r4
 8006104:	6864      	ldr	r4, [r4, #4]
 8006106:	e7ac      	b.n	8006062 <_malloc_r+0x36>
 8006108:	4634      	mov	r4, r6
 800610a:	6876      	ldr	r6, [r6, #4]
 800610c:	e7b4      	b.n	8006078 <_malloc_r+0x4c>
 800610e:	4613      	mov	r3, r2
 8006110:	e7cc      	b.n	80060ac <_malloc_r+0x80>
 8006112:	230c      	movs	r3, #12
 8006114:	603b      	str	r3, [r7, #0]
 8006116:	4638      	mov	r0, r7
 8006118:	f000 f80e 	bl	8006138 <__malloc_unlock>
 800611c:	e797      	b.n	800604e <_malloc_r+0x22>
 800611e:	6025      	str	r5, [r4, #0]
 8006120:	e7dc      	b.n	80060dc <_malloc_r+0xb0>
 8006122:	605b      	str	r3, [r3, #4]
 8006124:	deff      	udf	#255	; 0xff
 8006126:	bf00      	nop
 8006128:	20000720 	.word	0x20000720

0800612c <__malloc_lock>:
 800612c:	4801      	ldr	r0, [pc, #4]	; (8006134 <__malloc_lock+0x8>)
 800612e:	f7ff bf00 	b.w	8005f32 <__retarget_lock_acquire_recursive>
 8006132:	bf00      	nop
 8006134:	2000071c 	.word	0x2000071c

08006138 <__malloc_unlock>:
 8006138:	4801      	ldr	r0, [pc, #4]	; (8006140 <__malloc_unlock+0x8>)
 800613a:	f7ff befb 	b.w	8005f34 <__retarget_lock_release_recursive>
 800613e:	bf00      	nop
 8006140:	2000071c 	.word	0x2000071c

08006144 <__ssputs_r>:
 8006144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006148:	688e      	ldr	r6, [r1, #8]
 800614a:	461f      	mov	r7, r3
 800614c:	42be      	cmp	r6, r7
 800614e:	680b      	ldr	r3, [r1, #0]
 8006150:	4682      	mov	sl, r0
 8006152:	460c      	mov	r4, r1
 8006154:	4690      	mov	r8, r2
 8006156:	d82c      	bhi.n	80061b2 <__ssputs_r+0x6e>
 8006158:	898a      	ldrh	r2, [r1, #12]
 800615a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800615e:	d026      	beq.n	80061ae <__ssputs_r+0x6a>
 8006160:	6965      	ldr	r5, [r4, #20]
 8006162:	6909      	ldr	r1, [r1, #16]
 8006164:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006168:	eba3 0901 	sub.w	r9, r3, r1
 800616c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006170:	1c7b      	adds	r3, r7, #1
 8006172:	444b      	add	r3, r9
 8006174:	106d      	asrs	r5, r5, #1
 8006176:	429d      	cmp	r5, r3
 8006178:	bf38      	it	cc
 800617a:	461d      	movcc	r5, r3
 800617c:	0553      	lsls	r3, r2, #21
 800617e:	d527      	bpl.n	80061d0 <__ssputs_r+0x8c>
 8006180:	4629      	mov	r1, r5
 8006182:	f7ff ff53 	bl	800602c <_malloc_r>
 8006186:	4606      	mov	r6, r0
 8006188:	b360      	cbz	r0, 80061e4 <__ssputs_r+0xa0>
 800618a:	6921      	ldr	r1, [r4, #16]
 800618c:	464a      	mov	r2, r9
 800618e:	f7ff fed2 	bl	8005f36 <memcpy>
 8006192:	89a3      	ldrh	r3, [r4, #12]
 8006194:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800619c:	81a3      	strh	r3, [r4, #12]
 800619e:	6126      	str	r6, [r4, #16]
 80061a0:	6165      	str	r5, [r4, #20]
 80061a2:	444e      	add	r6, r9
 80061a4:	eba5 0509 	sub.w	r5, r5, r9
 80061a8:	6026      	str	r6, [r4, #0]
 80061aa:	60a5      	str	r5, [r4, #8]
 80061ac:	463e      	mov	r6, r7
 80061ae:	42be      	cmp	r6, r7
 80061b0:	d900      	bls.n	80061b4 <__ssputs_r+0x70>
 80061b2:	463e      	mov	r6, r7
 80061b4:	6820      	ldr	r0, [r4, #0]
 80061b6:	4632      	mov	r2, r6
 80061b8:	4641      	mov	r1, r8
 80061ba:	f000 fd33 	bl	8006c24 <memmove>
 80061be:	68a3      	ldr	r3, [r4, #8]
 80061c0:	1b9b      	subs	r3, r3, r6
 80061c2:	60a3      	str	r3, [r4, #8]
 80061c4:	6823      	ldr	r3, [r4, #0]
 80061c6:	4433      	add	r3, r6
 80061c8:	6023      	str	r3, [r4, #0]
 80061ca:	2000      	movs	r0, #0
 80061cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061d0:	462a      	mov	r2, r5
 80061d2:	f000 fd51 	bl	8006c78 <_realloc_r>
 80061d6:	4606      	mov	r6, r0
 80061d8:	2800      	cmp	r0, #0
 80061da:	d1e0      	bne.n	800619e <__ssputs_r+0x5a>
 80061dc:	6921      	ldr	r1, [r4, #16]
 80061de:	4650      	mov	r0, sl
 80061e0:	f7ff feb8 	bl	8005f54 <_free_r>
 80061e4:	230c      	movs	r3, #12
 80061e6:	f8ca 3000 	str.w	r3, [sl]
 80061ea:	89a3      	ldrh	r3, [r4, #12]
 80061ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061f0:	81a3      	strh	r3, [r4, #12]
 80061f2:	f04f 30ff 	mov.w	r0, #4294967295
 80061f6:	e7e9      	b.n	80061cc <__ssputs_r+0x88>

080061f8 <_svfiprintf_r>:
 80061f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061fc:	4698      	mov	r8, r3
 80061fe:	898b      	ldrh	r3, [r1, #12]
 8006200:	061b      	lsls	r3, r3, #24
 8006202:	b09d      	sub	sp, #116	; 0x74
 8006204:	4607      	mov	r7, r0
 8006206:	460d      	mov	r5, r1
 8006208:	4614      	mov	r4, r2
 800620a:	d50e      	bpl.n	800622a <_svfiprintf_r+0x32>
 800620c:	690b      	ldr	r3, [r1, #16]
 800620e:	b963      	cbnz	r3, 800622a <_svfiprintf_r+0x32>
 8006210:	2140      	movs	r1, #64	; 0x40
 8006212:	f7ff ff0b 	bl	800602c <_malloc_r>
 8006216:	6028      	str	r0, [r5, #0]
 8006218:	6128      	str	r0, [r5, #16]
 800621a:	b920      	cbnz	r0, 8006226 <_svfiprintf_r+0x2e>
 800621c:	230c      	movs	r3, #12
 800621e:	603b      	str	r3, [r7, #0]
 8006220:	f04f 30ff 	mov.w	r0, #4294967295
 8006224:	e0d0      	b.n	80063c8 <_svfiprintf_r+0x1d0>
 8006226:	2340      	movs	r3, #64	; 0x40
 8006228:	616b      	str	r3, [r5, #20]
 800622a:	2300      	movs	r3, #0
 800622c:	9309      	str	r3, [sp, #36]	; 0x24
 800622e:	2320      	movs	r3, #32
 8006230:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006234:	f8cd 800c 	str.w	r8, [sp, #12]
 8006238:	2330      	movs	r3, #48	; 0x30
 800623a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80063e0 <_svfiprintf_r+0x1e8>
 800623e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006242:	f04f 0901 	mov.w	r9, #1
 8006246:	4623      	mov	r3, r4
 8006248:	469a      	mov	sl, r3
 800624a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800624e:	b10a      	cbz	r2, 8006254 <_svfiprintf_r+0x5c>
 8006250:	2a25      	cmp	r2, #37	; 0x25
 8006252:	d1f9      	bne.n	8006248 <_svfiprintf_r+0x50>
 8006254:	ebba 0b04 	subs.w	fp, sl, r4
 8006258:	d00b      	beq.n	8006272 <_svfiprintf_r+0x7a>
 800625a:	465b      	mov	r3, fp
 800625c:	4622      	mov	r2, r4
 800625e:	4629      	mov	r1, r5
 8006260:	4638      	mov	r0, r7
 8006262:	f7ff ff6f 	bl	8006144 <__ssputs_r>
 8006266:	3001      	adds	r0, #1
 8006268:	f000 80a9 	beq.w	80063be <_svfiprintf_r+0x1c6>
 800626c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800626e:	445a      	add	r2, fp
 8006270:	9209      	str	r2, [sp, #36]	; 0x24
 8006272:	f89a 3000 	ldrb.w	r3, [sl]
 8006276:	2b00      	cmp	r3, #0
 8006278:	f000 80a1 	beq.w	80063be <_svfiprintf_r+0x1c6>
 800627c:	2300      	movs	r3, #0
 800627e:	f04f 32ff 	mov.w	r2, #4294967295
 8006282:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006286:	f10a 0a01 	add.w	sl, sl, #1
 800628a:	9304      	str	r3, [sp, #16]
 800628c:	9307      	str	r3, [sp, #28]
 800628e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006292:	931a      	str	r3, [sp, #104]	; 0x68
 8006294:	4654      	mov	r4, sl
 8006296:	2205      	movs	r2, #5
 8006298:	f814 1b01 	ldrb.w	r1, [r4], #1
 800629c:	4850      	ldr	r0, [pc, #320]	; (80063e0 <_svfiprintf_r+0x1e8>)
 800629e:	f7f9 ff97 	bl	80001d0 <memchr>
 80062a2:	9a04      	ldr	r2, [sp, #16]
 80062a4:	b9d8      	cbnz	r0, 80062de <_svfiprintf_r+0xe6>
 80062a6:	06d0      	lsls	r0, r2, #27
 80062a8:	bf44      	itt	mi
 80062aa:	2320      	movmi	r3, #32
 80062ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062b0:	0711      	lsls	r1, r2, #28
 80062b2:	bf44      	itt	mi
 80062b4:	232b      	movmi	r3, #43	; 0x2b
 80062b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062ba:	f89a 3000 	ldrb.w	r3, [sl]
 80062be:	2b2a      	cmp	r3, #42	; 0x2a
 80062c0:	d015      	beq.n	80062ee <_svfiprintf_r+0xf6>
 80062c2:	9a07      	ldr	r2, [sp, #28]
 80062c4:	4654      	mov	r4, sl
 80062c6:	2000      	movs	r0, #0
 80062c8:	f04f 0c0a 	mov.w	ip, #10
 80062cc:	4621      	mov	r1, r4
 80062ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062d2:	3b30      	subs	r3, #48	; 0x30
 80062d4:	2b09      	cmp	r3, #9
 80062d6:	d94d      	bls.n	8006374 <_svfiprintf_r+0x17c>
 80062d8:	b1b0      	cbz	r0, 8006308 <_svfiprintf_r+0x110>
 80062da:	9207      	str	r2, [sp, #28]
 80062dc:	e014      	b.n	8006308 <_svfiprintf_r+0x110>
 80062de:	eba0 0308 	sub.w	r3, r0, r8
 80062e2:	fa09 f303 	lsl.w	r3, r9, r3
 80062e6:	4313      	orrs	r3, r2
 80062e8:	9304      	str	r3, [sp, #16]
 80062ea:	46a2      	mov	sl, r4
 80062ec:	e7d2      	b.n	8006294 <_svfiprintf_r+0x9c>
 80062ee:	9b03      	ldr	r3, [sp, #12]
 80062f0:	1d19      	adds	r1, r3, #4
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	9103      	str	r1, [sp, #12]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	bfbb      	ittet	lt
 80062fa:	425b      	neglt	r3, r3
 80062fc:	f042 0202 	orrlt.w	r2, r2, #2
 8006300:	9307      	strge	r3, [sp, #28]
 8006302:	9307      	strlt	r3, [sp, #28]
 8006304:	bfb8      	it	lt
 8006306:	9204      	strlt	r2, [sp, #16]
 8006308:	7823      	ldrb	r3, [r4, #0]
 800630a:	2b2e      	cmp	r3, #46	; 0x2e
 800630c:	d10c      	bne.n	8006328 <_svfiprintf_r+0x130>
 800630e:	7863      	ldrb	r3, [r4, #1]
 8006310:	2b2a      	cmp	r3, #42	; 0x2a
 8006312:	d134      	bne.n	800637e <_svfiprintf_r+0x186>
 8006314:	9b03      	ldr	r3, [sp, #12]
 8006316:	1d1a      	adds	r2, r3, #4
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	9203      	str	r2, [sp, #12]
 800631c:	2b00      	cmp	r3, #0
 800631e:	bfb8      	it	lt
 8006320:	f04f 33ff 	movlt.w	r3, #4294967295
 8006324:	3402      	adds	r4, #2
 8006326:	9305      	str	r3, [sp, #20]
 8006328:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80063f0 <_svfiprintf_r+0x1f8>
 800632c:	7821      	ldrb	r1, [r4, #0]
 800632e:	2203      	movs	r2, #3
 8006330:	4650      	mov	r0, sl
 8006332:	f7f9 ff4d 	bl	80001d0 <memchr>
 8006336:	b138      	cbz	r0, 8006348 <_svfiprintf_r+0x150>
 8006338:	9b04      	ldr	r3, [sp, #16]
 800633a:	eba0 000a 	sub.w	r0, r0, sl
 800633e:	2240      	movs	r2, #64	; 0x40
 8006340:	4082      	lsls	r2, r0
 8006342:	4313      	orrs	r3, r2
 8006344:	3401      	adds	r4, #1
 8006346:	9304      	str	r3, [sp, #16]
 8006348:	f814 1b01 	ldrb.w	r1, [r4], #1
 800634c:	4825      	ldr	r0, [pc, #148]	; (80063e4 <_svfiprintf_r+0x1ec>)
 800634e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006352:	2206      	movs	r2, #6
 8006354:	f7f9 ff3c 	bl	80001d0 <memchr>
 8006358:	2800      	cmp	r0, #0
 800635a:	d038      	beq.n	80063ce <_svfiprintf_r+0x1d6>
 800635c:	4b22      	ldr	r3, [pc, #136]	; (80063e8 <_svfiprintf_r+0x1f0>)
 800635e:	bb1b      	cbnz	r3, 80063a8 <_svfiprintf_r+0x1b0>
 8006360:	9b03      	ldr	r3, [sp, #12]
 8006362:	3307      	adds	r3, #7
 8006364:	f023 0307 	bic.w	r3, r3, #7
 8006368:	3308      	adds	r3, #8
 800636a:	9303      	str	r3, [sp, #12]
 800636c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800636e:	4433      	add	r3, r6
 8006370:	9309      	str	r3, [sp, #36]	; 0x24
 8006372:	e768      	b.n	8006246 <_svfiprintf_r+0x4e>
 8006374:	fb0c 3202 	mla	r2, ip, r2, r3
 8006378:	460c      	mov	r4, r1
 800637a:	2001      	movs	r0, #1
 800637c:	e7a6      	b.n	80062cc <_svfiprintf_r+0xd4>
 800637e:	2300      	movs	r3, #0
 8006380:	3401      	adds	r4, #1
 8006382:	9305      	str	r3, [sp, #20]
 8006384:	4619      	mov	r1, r3
 8006386:	f04f 0c0a 	mov.w	ip, #10
 800638a:	4620      	mov	r0, r4
 800638c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006390:	3a30      	subs	r2, #48	; 0x30
 8006392:	2a09      	cmp	r2, #9
 8006394:	d903      	bls.n	800639e <_svfiprintf_r+0x1a6>
 8006396:	2b00      	cmp	r3, #0
 8006398:	d0c6      	beq.n	8006328 <_svfiprintf_r+0x130>
 800639a:	9105      	str	r1, [sp, #20]
 800639c:	e7c4      	b.n	8006328 <_svfiprintf_r+0x130>
 800639e:	fb0c 2101 	mla	r1, ip, r1, r2
 80063a2:	4604      	mov	r4, r0
 80063a4:	2301      	movs	r3, #1
 80063a6:	e7f0      	b.n	800638a <_svfiprintf_r+0x192>
 80063a8:	ab03      	add	r3, sp, #12
 80063aa:	9300      	str	r3, [sp, #0]
 80063ac:	462a      	mov	r2, r5
 80063ae:	4b0f      	ldr	r3, [pc, #60]	; (80063ec <_svfiprintf_r+0x1f4>)
 80063b0:	a904      	add	r1, sp, #16
 80063b2:	4638      	mov	r0, r7
 80063b4:	f3af 8000 	nop.w
 80063b8:	1c42      	adds	r2, r0, #1
 80063ba:	4606      	mov	r6, r0
 80063bc:	d1d6      	bne.n	800636c <_svfiprintf_r+0x174>
 80063be:	89ab      	ldrh	r3, [r5, #12]
 80063c0:	065b      	lsls	r3, r3, #25
 80063c2:	f53f af2d 	bmi.w	8006220 <_svfiprintf_r+0x28>
 80063c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80063c8:	b01d      	add	sp, #116	; 0x74
 80063ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063ce:	ab03      	add	r3, sp, #12
 80063d0:	9300      	str	r3, [sp, #0]
 80063d2:	462a      	mov	r2, r5
 80063d4:	4b05      	ldr	r3, [pc, #20]	; (80063ec <_svfiprintf_r+0x1f4>)
 80063d6:	a904      	add	r1, sp, #16
 80063d8:	4638      	mov	r0, r7
 80063da:	f000 f9bd 	bl	8006758 <_printf_i>
 80063de:	e7eb      	b.n	80063b8 <_svfiprintf_r+0x1c0>
 80063e0:	080083f8 	.word	0x080083f8
 80063e4:	08008402 	.word	0x08008402
 80063e8:	00000000 	.word	0x00000000
 80063ec:	08006145 	.word	0x08006145
 80063f0:	080083fe 	.word	0x080083fe

080063f4 <__sfputc_r>:
 80063f4:	6893      	ldr	r3, [r2, #8]
 80063f6:	3b01      	subs	r3, #1
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	b410      	push	{r4}
 80063fc:	6093      	str	r3, [r2, #8]
 80063fe:	da08      	bge.n	8006412 <__sfputc_r+0x1e>
 8006400:	6994      	ldr	r4, [r2, #24]
 8006402:	42a3      	cmp	r3, r4
 8006404:	db01      	blt.n	800640a <__sfputc_r+0x16>
 8006406:	290a      	cmp	r1, #10
 8006408:	d103      	bne.n	8006412 <__sfputc_r+0x1e>
 800640a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800640e:	f000 bb73 	b.w	8006af8 <__swbuf_r>
 8006412:	6813      	ldr	r3, [r2, #0]
 8006414:	1c58      	adds	r0, r3, #1
 8006416:	6010      	str	r0, [r2, #0]
 8006418:	7019      	strb	r1, [r3, #0]
 800641a:	4608      	mov	r0, r1
 800641c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006420:	4770      	bx	lr

08006422 <__sfputs_r>:
 8006422:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006424:	4606      	mov	r6, r0
 8006426:	460f      	mov	r7, r1
 8006428:	4614      	mov	r4, r2
 800642a:	18d5      	adds	r5, r2, r3
 800642c:	42ac      	cmp	r4, r5
 800642e:	d101      	bne.n	8006434 <__sfputs_r+0x12>
 8006430:	2000      	movs	r0, #0
 8006432:	e007      	b.n	8006444 <__sfputs_r+0x22>
 8006434:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006438:	463a      	mov	r2, r7
 800643a:	4630      	mov	r0, r6
 800643c:	f7ff ffda 	bl	80063f4 <__sfputc_r>
 8006440:	1c43      	adds	r3, r0, #1
 8006442:	d1f3      	bne.n	800642c <__sfputs_r+0xa>
 8006444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006448 <_vfiprintf_r>:
 8006448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800644c:	460d      	mov	r5, r1
 800644e:	b09d      	sub	sp, #116	; 0x74
 8006450:	4614      	mov	r4, r2
 8006452:	4698      	mov	r8, r3
 8006454:	4606      	mov	r6, r0
 8006456:	b118      	cbz	r0, 8006460 <_vfiprintf_r+0x18>
 8006458:	6a03      	ldr	r3, [r0, #32]
 800645a:	b90b      	cbnz	r3, 8006460 <_vfiprintf_r+0x18>
 800645c:	f7ff fc44 	bl	8005ce8 <__sinit>
 8006460:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006462:	07d9      	lsls	r1, r3, #31
 8006464:	d405      	bmi.n	8006472 <_vfiprintf_r+0x2a>
 8006466:	89ab      	ldrh	r3, [r5, #12]
 8006468:	059a      	lsls	r2, r3, #22
 800646a:	d402      	bmi.n	8006472 <_vfiprintf_r+0x2a>
 800646c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800646e:	f7ff fd60 	bl	8005f32 <__retarget_lock_acquire_recursive>
 8006472:	89ab      	ldrh	r3, [r5, #12]
 8006474:	071b      	lsls	r3, r3, #28
 8006476:	d501      	bpl.n	800647c <_vfiprintf_r+0x34>
 8006478:	692b      	ldr	r3, [r5, #16]
 800647a:	b99b      	cbnz	r3, 80064a4 <_vfiprintf_r+0x5c>
 800647c:	4629      	mov	r1, r5
 800647e:	4630      	mov	r0, r6
 8006480:	f000 fb78 	bl	8006b74 <__swsetup_r>
 8006484:	b170      	cbz	r0, 80064a4 <_vfiprintf_r+0x5c>
 8006486:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006488:	07dc      	lsls	r4, r3, #31
 800648a:	d504      	bpl.n	8006496 <_vfiprintf_r+0x4e>
 800648c:	f04f 30ff 	mov.w	r0, #4294967295
 8006490:	b01d      	add	sp, #116	; 0x74
 8006492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006496:	89ab      	ldrh	r3, [r5, #12]
 8006498:	0598      	lsls	r0, r3, #22
 800649a:	d4f7      	bmi.n	800648c <_vfiprintf_r+0x44>
 800649c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800649e:	f7ff fd49 	bl	8005f34 <__retarget_lock_release_recursive>
 80064a2:	e7f3      	b.n	800648c <_vfiprintf_r+0x44>
 80064a4:	2300      	movs	r3, #0
 80064a6:	9309      	str	r3, [sp, #36]	; 0x24
 80064a8:	2320      	movs	r3, #32
 80064aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80064ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80064b2:	2330      	movs	r3, #48	; 0x30
 80064b4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006668 <_vfiprintf_r+0x220>
 80064b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064bc:	f04f 0901 	mov.w	r9, #1
 80064c0:	4623      	mov	r3, r4
 80064c2:	469a      	mov	sl, r3
 80064c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064c8:	b10a      	cbz	r2, 80064ce <_vfiprintf_r+0x86>
 80064ca:	2a25      	cmp	r2, #37	; 0x25
 80064cc:	d1f9      	bne.n	80064c2 <_vfiprintf_r+0x7a>
 80064ce:	ebba 0b04 	subs.w	fp, sl, r4
 80064d2:	d00b      	beq.n	80064ec <_vfiprintf_r+0xa4>
 80064d4:	465b      	mov	r3, fp
 80064d6:	4622      	mov	r2, r4
 80064d8:	4629      	mov	r1, r5
 80064da:	4630      	mov	r0, r6
 80064dc:	f7ff ffa1 	bl	8006422 <__sfputs_r>
 80064e0:	3001      	adds	r0, #1
 80064e2:	f000 80a9 	beq.w	8006638 <_vfiprintf_r+0x1f0>
 80064e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064e8:	445a      	add	r2, fp
 80064ea:	9209      	str	r2, [sp, #36]	; 0x24
 80064ec:	f89a 3000 	ldrb.w	r3, [sl]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f000 80a1 	beq.w	8006638 <_vfiprintf_r+0x1f0>
 80064f6:	2300      	movs	r3, #0
 80064f8:	f04f 32ff 	mov.w	r2, #4294967295
 80064fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006500:	f10a 0a01 	add.w	sl, sl, #1
 8006504:	9304      	str	r3, [sp, #16]
 8006506:	9307      	str	r3, [sp, #28]
 8006508:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800650c:	931a      	str	r3, [sp, #104]	; 0x68
 800650e:	4654      	mov	r4, sl
 8006510:	2205      	movs	r2, #5
 8006512:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006516:	4854      	ldr	r0, [pc, #336]	; (8006668 <_vfiprintf_r+0x220>)
 8006518:	f7f9 fe5a 	bl	80001d0 <memchr>
 800651c:	9a04      	ldr	r2, [sp, #16]
 800651e:	b9d8      	cbnz	r0, 8006558 <_vfiprintf_r+0x110>
 8006520:	06d1      	lsls	r1, r2, #27
 8006522:	bf44      	itt	mi
 8006524:	2320      	movmi	r3, #32
 8006526:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800652a:	0713      	lsls	r3, r2, #28
 800652c:	bf44      	itt	mi
 800652e:	232b      	movmi	r3, #43	; 0x2b
 8006530:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006534:	f89a 3000 	ldrb.w	r3, [sl]
 8006538:	2b2a      	cmp	r3, #42	; 0x2a
 800653a:	d015      	beq.n	8006568 <_vfiprintf_r+0x120>
 800653c:	9a07      	ldr	r2, [sp, #28]
 800653e:	4654      	mov	r4, sl
 8006540:	2000      	movs	r0, #0
 8006542:	f04f 0c0a 	mov.w	ip, #10
 8006546:	4621      	mov	r1, r4
 8006548:	f811 3b01 	ldrb.w	r3, [r1], #1
 800654c:	3b30      	subs	r3, #48	; 0x30
 800654e:	2b09      	cmp	r3, #9
 8006550:	d94d      	bls.n	80065ee <_vfiprintf_r+0x1a6>
 8006552:	b1b0      	cbz	r0, 8006582 <_vfiprintf_r+0x13a>
 8006554:	9207      	str	r2, [sp, #28]
 8006556:	e014      	b.n	8006582 <_vfiprintf_r+0x13a>
 8006558:	eba0 0308 	sub.w	r3, r0, r8
 800655c:	fa09 f303 	lsl.w	r3, r9, r3
 8006560:	4313      	orrs	r3, r2
 8006562:	9304      	str	r3, [sp, #16]
 8006564:	46a2      	mov	sl, r4
 8006566:	e7d2      	b.n	800650e <_vfiprintf_r+0xc6>
 8006568:	9b03      	ldr	r3, [sp, #12]
 800656a:	1d19      	adds	r1, r3, #4
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	9103      	str	r1, [sp, #12]
 8006570:	2b00      	cmp	r3, #0
 8006572:	bfbb      	ittet	lt
 8006574:	425b      	neglt	r3, r3
 8006576:	f042 0202 	orrlt.w	r2, r2, #2
 800657a:	9307      	strge	r3, [sp, #28]
 800657c:	9307      	strlt	r3, [sp, #28]
 800657e:	bfb8      	it	lt
 8006580:	9204      	strlt	r2, [sp, #16]
 8006582:	7823      	ldrb	r3, [r4, #0]
 8006584:	2b2e      	cmp	r3, #46	; 0x2e
 8006586:	d10c      	bne.n	80065a2 <_vfiprintf_r+0x15a>
 8006588:	7863      	ldrb	r3, [r4, #1]
 800658a:	2b2a      	cmp	r3, #42	; 0x2a
 800658c:	d134      	bne.n	80065f8 <_vfiprintf_r+0x1b0>
 800658e:	9b03      	ldr	r3, [sp, #12]
 8006590:	1d1a      	adds	r2, r3, #4
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	9203      	str	r2, [sp, #12]
 8006596:	2b00      	cmp	r3, #0
 8006598:	bfb8      	it	lt
 800659a:	f04f 33ff 	movlt.w	r3, #4294967295
 800659e:	3402      	adds	r4, #2
 80065a0:	9305      	str	r3, [sp, #20]
 80065a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006678 <_vfiprintf_r+0x230>
 80065a6:	7821      	ldrb	r1, [r4, #0]
 80065a8:	2203      	movs	r2, #3
 80065aa:	4650      	mov	r0, sl
 80065ac:	f7f9 fe10 	bl	80001d0 <memchr>
 80065b0:	b138      	cbz	r0, 80065c2 <_vfiprintf_r+0x17a>
 80065b2:	9b04      	ldr	r3, [sp, #16]
 80065b4:	eba0 000a 	sub.w	r0, r0, sl
 80065b8:	2240      	movs	r2, #64	; 0x40
 80065ba:	4082      	lsls	r2, r0
 80065bc:	4313      	orrs	r3, r2
 80065be:	3401      	adds	r4, #1
 80065c0:	9304      	str	r3, [sp, #16]
 80065c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065c6:	4829      	ldr	r0, [pc, #164]	; (800666c <_vfiprintf_r+0x224>)
 80065c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065cc:	2206      	movs	r2, #6
 80065ce:	f7f9 fdff 	bl	80001d0 <memchr>
 80065d2:	2800      	cmp	r0, #0
 80065d4:	d03f      	beq.n	8006656 <_vfiprintf_r+0x20e>
 80065d6:	4b26      	ldr	r3, [pc, #152]	; (8006670 <_vfiprintf_r+0x228>)
 80065d8:	bb1b      	cbnz	r3, 8006622 <_vfiprintf_r+0x1da>
 80065da:	9b03      	ldr	r3, [sp, #12]
 80065dc:	3307      	adds	r3, #7
 80065de:	f023 0307 	bic.w	r3, r3, #7
 80065e2:	3308      	adds	r3, #8
 80065e4:	9303      	str	r3, [sp, #12]
 80065e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065e8:	443b      	add	r3, r7
 80065ea:	9309      	str	r3, [sp, #36]	; 0x24
 80065ec:	e768      	b.n	80064c0 <_vfiprintf_r+0x78>
 80065ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80065f2:	460c      	mov	r4, r1
 80065f4:	2001      	movs	r0, #1
 80065f6:	e7a6      	b.n	8006546 <_vfiprintf_r+0xfe>
 80065f8:	2300      	movs	r3, #0
 80065fa:	3401      	adds	r4, #1
 80065fc:	9305      	str	r3, [sp, #20]
 80065fe:	4619      	mov	r1, r3
 8006600:	f04f 0c0a 	mov.w	ip, #10
 8006604:	4620      	mov	r0, r4
 8006606:	f810 2b01 	ldrb.w	r2, [r0], #1
 800660a:	3a30      	subs	r2, #48	; 0x30
 800660c:	2a09      	cmp	r2, #9
 800660e:	d903      	bls.n	8006618 <_vfiprintf_r+0x1d0>
 8006610:	2b00      	cmp	r3, #0
 8006612:	d0c6      	beq.n	80065a2 <_vfiprintf_r+0x15a>
 8006614:	9105      	str	r1, [sp, #20]
 8006616:	e7c4      	b.n	80065a2 <_vfiprintf_r+0x15a>
 8006618:	fb0c 2101 	mla	r1, ip, r1, r2
 800661c:	4604      	mov	r4, r0
 800661e:	2301      	movs	r3, #1
 8006620:	e7f0      	b.n	8006604 <_vfiprintf_r+0x1bc>
 8006622:	ab03      	add	r3, sp, #12
 8006624:	9300      	str	r3, [sp, #0]
 8006626:	462a      	mov	r2, r5
 8006628:	4b12      	ldr	r3, [pc, #72]	; (8006674 <_vfiprintf_r+0x22c>)
 800662a:	a904      	add	r1, sp, #16
 800662c:	4630      	mov	r0, r6
 800662e:	f3af 8000 	nop.w
 8006632:	4607      	mov	r7, r0
 8006634:	1c78      	adds	r0, r7, #1
 8006636:	d1d6      	bne.n	80065e6 <_vfiprintf_r+0x19e>
 8006638:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800663a:	07d9      	lsls	r1, r3, #31
 800663c:	d405      	bmi.n	800664a <_vfiprintf_r+0x202>
 800663e:	89ab      	ldrh	r3, [r5, #12]
 8006640:	059a      	lsls	r2, r3, #22
 8006642:	d402      	bmi.n	800664a <_vfiprintf_r+0x202>
 8006644:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006646:	f7ff fc75 	bl	8005f34 <__retarget_lock_release_recursive>
 800664a:	89ab      	ldrh	r3, [r5, #12]
 800664c:	065b      	lsls	r3, r3, #25
 800664e:	f53f af1d 	bmi.w	800648c <_vfiprintf_r+0x44>
 8006652:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006654:	e71c      	b.n	8006490 <_vfiprintf_r+0x48>
 8006656:	ab03      	add	r3, sp, #12
 8006658:	9300      	str	r3, [sp, #0]
 800665a:	462a      	mov	r2, r5
 800665c:	4b05      	ldr	r3, [pc, #20]	; (8006674 <_vfiprintf_r+0x22c>)
 800665e:	a904      	add	r1, sp, #16
 8006660:	4630      	mov	r0, r6
 8006662:	f000 f879 	bl	8006758 <_printf_i>
 8006666:	e7e4      	b.n	8006632 <_vfiprintf_r+0x1ea>
 8006668:	080083f8 	.word	0x080083f8
 800666c:	08008402 	.word	0x08008402
 8006670:	00000000 	.word	0x00000000
 8006674:	08006423 	.word	0x08006423
 8006678:	080083fe 	.word	0x080083fe

0800667c <_printf_common>:
 800667c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006680:	4616      	mov	r6, r2
 8006682:	4699      	mov	r9, r3
 8006684:	688a      	ldr	r2, [r1, #8]
 8006686:	690b      	ldr	r3, [r1, #16]
 8006688:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800668c:	4293      	cmp	r3, r2
 800668e:	bfb8      	it	lt
 8006690:	4613      	movlt	r3, r2
 8006692:	6033      	str	r3, [r6, #0]
 8006694:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006698:	4607      	mov	r7, r0
 800669a:	460c      	mov	r4, r1
 800669c:	b10a      	cbz	r2, 80066a2 <_printf_common+0x26>
 800669e:	3301      	adds	r3, #1
 80066a0:	6033      	str	r3, [r6, #0]
 80066a2:	6823      	ldr	r3, [r4, #0]
 80066a4:	0699      	lsls	r1, r3, #26
 80066a6:	bf42      	ittt	mi
 80066a8:	6833      	ldrmi	r3, [r6, #0]
 80066aa:	3302      	addmi	r3, #2
 80066ac:	6033      	strmi	r3, [r6, #0]
 80066ae:	6825      	ldr	r5, [r4, #0]
 80066b0:	f015 0506 	ands.w	r5, r5, #6
 80066b4:	d106      	bne.n	80066c4 <_printf_common+0x48>
 80066b6:	f104 0a19 	add.w	sl, r4, #25
 80066ba:	68e3      	ldr	r3, [r4, #12]
 80066bc:	6832      	ldr	r2, [r6, #0]
 80066be:	1a9b      	subs	r3, r3, r2
 80066c0:	42ab      	cmp	r3, r5
 80066c2:	dc26      	bgt.n	8006712 <_printf_common+0x96>
 80066c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80066c8:	1e13      	subs	r3, r2, #0
 80066ca:	6822      	ldr	r2, [r4, #0]
 80066cc:	bf18      	it	ne
 80066ce:	2301      	movne	r3, #1
 80066d0:	0692      	lsls	r2, r2, #26
 80066d2:	d42b      	bmi.n	800672c <_printf_common+0xb0>
 80066d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80066d8:	4649      	mov	r1, r9
 80066da:	4638      	mov	r0, r7
 80066dc:	47c0      	blx	r8
 80066de:	3001      	adds	r0, #1
 80066e0:	d01e      	beq.n	8006720 <_printf_common+0xa4>
 80066e2:	6823      	ldr	r3, [r4, #0]
 80066e4:	6922      	ldr	r2, [r4, #16]
 80066e6:	f003 0306 	and.w	r3, r3, #6
 80066ea:	2b04      	cmp	r3, #4
 80066ec:	bf02      	ittt	eq
 80066ee:	68e5      	ldreq	r5, [r4, #12]
 80066f0:	6833      	ldreq	r3, [r6, #0]
 80066f2:	1aed      	subeq	r5, r5, r3
 80066f4:	68a3      	ldr	r3, [r4, #8]
 80066f6:	bf0c      	ite	eq
 80066f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066fc:	2500      	movne	r5, #0
 80066fe:	4293      	cmp	r3, r2
 8006700:	bfc4      	itt	gt
 8006702:	1a9b      	subgt	r3, r3, r2
 8006704:	18ed      	addgt	r5, r5, r3
 8006706:	2600      	movs	r6, #0
 8006708:	341a      	adds	r4, #26
 800670a:	42b5      	cmp	r5, r6
 800670c:	d11a      	bne.n	8006744 <_printf_common+0xc8>
 800670e:	2000      	movs	r0, #0
 8006710:	e008      	b.n	8006724 <_printf_common+0xa8>
 8006712:	2301      	movs	r3, #1
 8006714:	4652      	mov	r2, sl
 8006716:	4649      	mov	r1, r9
 8006718:	4638      	mov	r0, r7
 800671a:	47c0      	blx	r8
 800671c:	3001      	adds	r0, #1
 800671e:	d103      	bne.n	8006728 <_printf_common+0xac>
 8006720:	f04f 30ff 	mov.w	r0, #4294967295
 8006724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006728:	3501      	adds	r5, #1
 800672a:	e7c6      	b.n	80066ba <_printf_common+0x3e>
 800672c:	18e1      	adds	r1, r4, r3
 800672e:	1c5a      	adds	r2, r3, #1
 8006730:	2030      	movs	r0, #48	; 0x30
 8006732:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006736:	4422      	add	r2, r4
 8006738:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800673c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006740:	3302      	adds	r3, #2
 8006742:	e7c7      	b.n	80066d4 <_printf_common+0x58>
 8006744:	2301      	movs	r3, #1
 8006746:	4622      	mov	r2, r4
 8006748:	4649      	mov	r1, r9
 800674a:	4638      	mov	r0, r7
 800674c:	47c0      	blx	r8
 800674e:	3001      	adds	r0, #1
 8006750:	d0e6      	beq.n	8006720 <_printf_common+0xa4>
 8006752:	3601      	adds	r6, #1
 8006754:	e7d9      	b.n	800670a <_printf_common+0x8e>
	...

08006758 <_printf_i>:
 8006758:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800675c:	7e0f      	ldrb	r7, [r1, #24]
 800675e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006760:	2f78      	cmp	r7, #120	; 0x78
 8006762:	4691      	mov	r9, r2
 8006764:	4680      	mov	r8, r0
 8006766:	460c      	mov	r4, r1
 8006768:	469a      	mov	sl, r3
 800676a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800676e:	d807      	bhi.n	8006780 <_printf_i+0x28>
 8006770:	2f62      	cmp	r7, #98	; 0x62
 8006772:	d80a      	bhi.n	800678a <_printf_i+0x32>
 8006774:	2f00      	cmp	r7, #0
 8006776:	f000 80d4 	beq.w	8006922 <_printf_i+0x1ca>
 800677a:	2f58      	cmp	r7, #88	; 0x58
 800677c:	f000 80c0 	beq.w	8006900 <_printf_i+0x1a8>
 8006780:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006784:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006788:	e03a      	b.n	8006800 <_printf_i+0xa8>
 800678a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800678e:	2b15      	cmp	r3, #21
 8006790:	d8f6      	bhi.n	8006780 <_printf_i+0x28>
 8006792:	a101      	add	r1, pc, #4	; (adr r1, 8006798 <_printf_i+0x40>)
 8006794:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006798:	080067f1 	.word	0x080067f1
 800679c:	08006805 	.word	0x08006805
 80067a0:	08006781 	.word	0x08006781
 80067a4:	08006781 	.word	0x08006781
 80067a8:	08006781 	.word	0x08006781
 80067ac:	08006781 	.word	0x08006781
 80067b0:	08006805 	.word	0x08006805
 80067b4:	08006781 	.word	0x08006781
 80067b8:	08006781 	.word	0x08006781
 80067bc:	08006781 	.word	0x08006781
 80067c0:	08006781 	.word	0x08006781
 80067c4:	08006909 	.word	0x08006909
 80067c8:	08006831 	.word	0x08006831
 80067cc:	080068c3 	.word	0x080068c3
 80067d0:	08006781 	.word	0x08006781
 80067d4:	08006781 	.word	0x08006781
 80067d8:	0800692b 	.word	0x0800692b
 80067dc:	08006781 	.word	0x08006781
 80067e0:	08006831 	.word	0x08006831
 80067e4:	08006781 	.word	0x08006781
 80067e8:	08006781 	.word	0x08006781
 80067ec:	080068cb 	.word	0x080068cb
 80067f0:	682b      	ldr	r3, [r5, #0]
 80067f2:	1d1a      	adds	r2, r3, #4
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	602a      	str	r2, [r5, #0]
 80067f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006800:	2301      	movs	r3, #1
 8006802:	e09f      	b.n	8006944 <_printf_i+0x1ec>
 8006804:	6820      	ldr	r0, [r4, #0]
 8006806:	682b      	ldr	r3, [r5, #0]
 8006808:	0607      	lsls	r7, r0, #24
 800680a:	f103 0104 	add.w	r1, r3, #4
 800680e:	6029      	str	r1, [r5, #0]
 8006810:	d501      	bpl.n	8006816 <_printf_i+0xbe>
 8006812:	681e      	ldr	r6, [r3, #0]
 8006814:	e003      	b.n	800681e <_printf_i+0xc6>
 8006816:	0646      	lsls	r6, r0, #25
 8006818:	d5fb      	bpl.n	8006812 <_printf_i+0xba>
 800681a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800681e:	2e00      	cmp	r6, #0
 8006820:	da03      	bge.n	800682a <_printf_i+0xd2>
 8006822:	232d      	movs	r3, #45	; 0x2d
 8006824:	4276      	negs	r6, r6
 8006826:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800682a:	485a      	ldr	r0, [pc, #360]	; (8006994 <_printf_i+0x23c>)
 800682c:	230a      	movs	r3, #10
 800682e:	e012      	b.n	8006856 <_printf_i+0xfe>
 8006830:	682b      	ldr	r3, [r5, #0]
 8006832:	6820      	ldr	r0, [r4, #0]
 8006834:	1d19      	adds	r1, r3, #4
 8006836:	6029      	str	r1, [r5, #0]
 8006838:	0605      	lsls	r5, r0, #24
 800683a:	d501      	bpl.n	8006840 <_printf_i+0xe8>
 800683c:	681e      	ldr	r6, [r3, #0]
 800683e:	e002      	b.n	8006846 <_printf_i+0xee>
 8006840:	0641      	lsls	r1, r0, #25
 8006842:	d5fb      	bpl.n	800683c <_printf_i+0xe4>
 8006844:	881e      	ldrh	r6, [r3, #0]
 8006846:	4853      	ldr	r0, [pc, #332]	; (8006994 <_printf_i+0x23c>)
 8006848:	2f6f      	cmp	r7, #111	; 0x6f
 800684a:	bf0c      	ite	eq
 800684c:	2308      	moveq	r3, #8
 800684e:	230a      	movne	r3, #10
 8006850:	2100      	movs	r1, #0
 8006852:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006856:	6865      	ldr	r5, [r4, #4]
 8006858:	60a5      	str	r5, [r4, #8]
 800685a:	2d00      	cmp	r5, #0
 800685c:	bfa2      	ittt	ge
 800685e:	6821      	ldrge	r1, [r4, #0]
 8006860:	f021 0104 	bicge.w	r1, r1, #4
 8006864:	6021      	strge	r1, [r4, #0]
 8006866:	b90e      	cbnz	r6, 800686c <_printf_i+0x114>
 8006868:	2d00      	cmp	r5, #0
 800686a:	d04b      	beq.n	8006904 <_printf_i+0x1ac>
 800686c:	4615      	mov	r5, r2
 800686e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006872:	fb03 6711 	mls	r7, r3, r1, r6
 8006876:	5dc7      	ldrb	r7, [r0, r7]
 8006878:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800687c:	4637      	mov	r7, r6
 800687e:	42bb      	cmp	r3, r7
 8006880:	460e      	mov	r6, r1
 8006882:	d9f4      	bls.n	800686e <_printf_i+0x116>
 8006884:	2b08      	cmp	r3, #8
 8006886:	d10b      	bne.n	80068a0 <_printf_i+0x148>
 8006888:	6823      	ldr	r3, [r4, #0]
 800688a:	07de      	lsls	r6, r3, #31
 800688c:	d508      	bpl.n	80068a0 <_printf_i+0x148>
 800688e:	6923      	ldr	r3, [r4, #16]
 8006890:	6861      	ldr	r1, [r4, #4]
 8006892:	4299      	cmp	r1, r3
 8006894:	bfde      	ittt	le
 8006896:	2330      	movle	r3, #48	; 0x30
 8006898:	f805 3c01 	strble.w	r3, [r5, #-1]
 800689c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80068a0:	1b52      	subs	r2, r2, r5
 80068a2:	6122      	str	r2, [r4, #16]
 80068a4:	f8cd a000 	str.w	sl, [sp]
 80068a8:	464b      	mov	r3, r9
 80068aa:	aa03      	add	r2, sp, #12
 80068ac:	4621      	mov	r1, r4
 80068ae:	4640      	mov	r0, r8
 80068b0:	f7ff fee4 	bl	800667c <_printf_common>
 80068b4:	3001      	adds	r0, #1
 80068b6:	d14a      	bne.n	800694e <_printf_i+0x1f6>
 80068b8:	f04f 30ff 	mov.w	r0, #4294967295
 80068bc:	b004      	add	sp, #16
 80068be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068c2:	6823      	ldr	r3, [r4, #0]
 80068c4:	f043 0320 	orr.w	r3, r3, #32
 80068c8:	6023      	str	r3, [r4, #0]
 80068ca:	4833      	ldr	r0, [pc, #204]	; (8006998 <_printf_i+0x240>)
 80068cc:	2778      	movs	r7, #120	; 0x78
 80068ce:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80068d2:	6823      	ldr	r3, [r4, #0]
 80068d4:	6829      	ldr	r1, [r5, #0]
 80068d6:	061f      	lsls	r7, r3, #24
 80068d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80068dc:	d402      	bmi.n	80068e4 <_printf_i+0x18c>
 80068de:	065f      	lsls	r7, r3, #25
 80068e0:	bf48      	it	mi
 80068e2:	b2b6      	uxthmi	r6, r6
 80068e4:	07df      	lsls	r7, r3, #31
 80068e6:	bf48      	it	mi
 80068e8:	f043 0320 	orrmi.w	r3, r3, #32
 80068ec:	6029      	str	r1, [r5, #0]
 80068ee:	bf48      	it	mi
 80068f0:	6023      	strmi	r3, [r4, #0]
 80068f2:	b91e      	cbnz	r6, 80068fc <_printf_i+0x1a4>
 80068f4:	6823      	ldr	r3, [r4, #0]
 80068f6:	f023 0320 	bic.w	r3, r3, #32
 80068fa:	6023      	str	r3, [r4, #0]
 80068fc:	2310      	movs	r3, #16
 80068fe:	e7a7      	b.n	8006850 <_printf_i+0xf8>
 8006900:	4824      	ldr	r0, [pc, #144]	; (8006994 <_printf_i+0x23c>)
 8006902:	e7e4      	b.n	80068ce <_printf_i+0x176>
 8006904:	4615      	mov	r5, r2
 8006906:	e7bd      	b.n	8006884 <_printf_i+0x12c>
 8006908:	682b      	ldr	r3, [r5, #0]
 800690a:	6826      	ldr	r6, [r4, #0]
 800690c:	6961      	ldr	r1, [r4, #20]
 800690e:	1d18      	adds	r0, r3, #4
 8006910:	6028      	str	r0, [r5, #0]
 8006912:	0635      	lsls	r5, r6, #24
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	d501      	bpl.n	800691c <_printf_i+0x1c4>
 8006918:	6019      	str	r1, [r3, #0]
 800691a:	e002      	b.n	8006922 <_printf_i+0x1ca>
 800691c:	0670      	lsls	r0, r6, #25
 800691e:	d5fb      	bpl.n	8006918 <_printf_i+0x1c0>
 8006920:	8019      	strh	r1, [r3, #0]
 8006922:	2300      	movs	r3, #0
 8006924:	6123      	str	r3, [r4, #16]
 8006926:	4615      	mov	r5, r2
 8006928:	e7bc      	b.n	80068a4 <_printf_i+0x14c>
 800692a:	682b      	ldr	r3, [r5, #0]
 800692c:	1d1a      	adds	r2, r3, #4
 800692e:	602a      	str	r2, [r5, #0]
 8006930:	681d      	ldr	r5, [r3, #0]
 8006932:	6862      	ldr	r2, [r4, #4]
 8006934:	2100      	movs	r1, #0
 8006936:	4628      	mov	r0, r5
 8006938:	f7f9 fc4a 	bl	80001d0 <memchr>
 800693c:	b108      	cbz	r0, 8006942 <_printf_i+0x1ea>
 800693e:	1b40      	subs	r0, r0, r5
 8006940:	6060      	str	r0, [r4, #4]
 8006942:	6863      	ldr	r3, [r4, #4]
 8006944:	6123      	str	r3, [r4, #16]
 8006946:	2300      	movs	r3, #0
 8006948:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800694c:	e7aa      	b.n	80068a4 <_printf_i+0x14c>
 800694e:	6923      	ldr	r3, [r4, #16]
 8006950:	462a      	mov	r2, r5
 8006952:	4649      	mov	r1, r9
 8006954:	4640      	mov	r0, r8
 8006956:	47d0      	blx	sl
 8006958:	3001      	adds	r0, #1
 800695a:	d0ad      	beq.n	80068b8 <_printf_i+0x160>
 800695c:	6823      	ldr	r3, [r4, #0]
 800695e:	079b      	lsls	r3, r3, #30
 8006960:	d413      	bmi.n	800698a <_printf_i+0x232>
 8006962:	68e0      	ldr	r0, [r4, #12]
 8006964:	9b03      	ldr	r3, [sp, #12]
 8006966:	4298      	cmp	r0, r3
 8006968:	bfb8      	it	lt
 800696a:	4618      	movlt	r0, r3
 800696c:	e7a6      	b.n	80068bc <_printf_i+0x164>
 800696e:	2301      	movs	r3, #1
 8006970:	4632      	mov	r2, r6
 8006972:	4649      	mov	r1, r9
 8006974:	4640      	mov	r0, r8
 8006976:	47d0      	blx	sl
 8006978:	3001      	adds	r0, #1
 800697a:	d09d      	beq.n	80068b8 <_printf_i+0x160>
 800697c:	3501      	adds	r5, #1
 800697e:	68e3      	ldr	r3, [r4, #12]
 8006980:	9903      	ldr	r1, [sp, #12]
 8006982:	1a5b      	subs	r3, r3, r1
 8006984:	42ab      	cmp	r3, r5
 8006986:	dcf2      	bgt.n	800696e <_printf_i+0x216>
 8006988:	e7eb      	b.n	8006962 <_printf_i+0x20a>
 800698a:	2500      	movs	r5, #0
 800698c:	f104 0619 	add.w	r6, r4, #25
 8006990:	e7f5      	b.n	800697e <_printf_i+0x226>
 8006992:	bf00      	nop
 8006994:	08008409 	.word	0x08008409
 8006998:	0800841a 	.word	0x0800841a

0800699c <__sflush_r>:
 800699c:	898a      	ldrh	r2, [r1, #12]
 800699e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069a2:	4605      	mov	r5, r0
 80069a4:	0710      	lsls	r0, r2, #28
 80069a6:	460c      	mov	r4, r1
 80069a8:	d458      	bmi.n	8006a5c <__sflush_r+0xc0>
 80069aa:	684b      	ldr	r3, [r1, #4]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	dc05      	bgt.n	80069bc <__sflush_r+0x20>
 80069b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	dc02      	bgt.n	80069bc <__sflush_r+0x20>
 80069b6:	2000      	movs	r0, #0
 80069b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069be:	2e00      	cmp	r6, #0
 80069c0:	d0f9      	beq.n	80069b6 <__sflush_r+0x1a>
 80069c2:	2300      	movs	r3, #0
 80069c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80069c8:	682f      	ldr	r7, [r5, #0]
 80069ca:	6a21      	ldr	r1, [r4, #32]
 80069cc:	602b      	str	r3, [r5, #0]
 80069ce:	d032      	beq.n	8006a36 <__sflush_r+0x9a>
 80069d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80069d2:	89a3      	ldrh	r3, [r4, #12]
 80069d4:	075a      	lsls	r2, r3, #29
 80069d6:	d505      	bpl.n	80069e4 <__sflush_r+0x48>
 80069d8:	6863      	ldr	r3, [r4, #4]
 80069da:	1ac0      	subs	r0, r0, r3
 80069dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80069de:	b10b      	cbz	r3, 80069e4 <__sflush_r+0x48>
 80069e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80069e2:	1ac0      	subs	r0, r0, r3
 80069e4:	2300      	movs	r3, #0
 80069e6:	4602      	mov	r2, r0
 80069e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069ea:	6a21      	ldr	r1, [r4, #32]
 80069ec:	4628      	mov	r0, r5
 80069ee:	47b0      	blx	r6
 80069f0:	1c43      	adds	r3, r0, #1
 80069f2:	89a3      	ldrh	r3, [r4, #12]
 80069f4:	d106      	bne.n	8006a04 <__sflush_r+0x68>
 80069f6:	6829      	ldr	r1, [r5, #0]
 80069f8:	291d      	cmp	r1, #29
 80069fa:	d82b      	bhi.n	8006a54 <__sflush_r+0xb8>
 80069fc:	4a29      	ldr	r2, [pc, #164]	; (8006aa4 <__sflush_r+0x108>)
 80069fe:	410a      	asrs	r2, r1
 8006a00:	07d6      	lsls	r6, r2, #31
 8006a02:	d427      	bmi.n	8006a54 <__sflush_r+0xb8>
 8006a04:	2200      	movs	r2, #0
 8006a06:	6062      	str	r2, [r4, #4]
 8006a08:	04d9      	lsls	r1, r3, #19
 8006a0a:	6922      	ldr	r2, [r4, #16]
 8006a0c:	6022      	str	r2, [r4, #0]
 8006a0e:	d504      	bpl.n	8006a1a <__sflush_r+0x7e>
 8006a10:	1c42      	adds	r2, r0, #1
 8006a12:	d101      	bne.n	8006a18 <__sflush_r+0x7c>
 8006a14:	682b      	ldr	r3, [r5, #0]
 8006a16:	b903      	cbnz	r3, 8006a1a <__sflush_r+0x7e>
 8006a18:	6560      	str	r0, [r4, #84]	; 0x54
 8006a1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a1c:	602f      	str	r7, [r5, #0]
 8006a1e:	2900      	cmp	r1, #0
 8006a20:	d0c9      	beq.n	80069b6 <__sflush_r+0x1a>
 8006a22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a26:	4299      	cmp	r1, r3
 8006a28:	d002      	beq.n	8006a30 <__sflush_r+0x94>
 8006a2a:	4628      	mov	r0, r5
 8006a2c:	f7ff fa92 	bl	8005f54 <_free_r>
 8006a30:	2000      	movs	r0, #0
 8006a32:	6360      	str	r0, [r4, #52]	; 0x34
 8006a34:	e7c0      	b.n	80069b8 <__sflush_r+0x1c>
 8006a36:	2301      	movs	r3, #1
 8006a38:	4628      	mov	r0, r5
 8006a3a:	47b0      	blx	r6
 8006a3c:	1c41      	adds	r1, r0, #1
 8006a3e:	d1c8      	bne.n	80069d2 <__sflush_r+0x36>
 8006a40:	682b      	ldr	r3, [r5, #0]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d0c5      	beq.n	80069d2 <__sflush_r+0x36>
 8006a46:	2b1d      	cmp	r3, #29
 8006a48:	d001      	beq.n	8006a4e <__sflush_r+0xb2>
 8006a4a:	2b16      	cmp	r3, #22
 8006a4c:	d101      	bne.n	8006a52 <__sflush_r+0xb6>
 8006a4e:	602f      	str	r7, [r5, #0]
 8006a50:	e7b1      	b.n	80069b6 <__sflush_r+0x1a>
 8006a52:	89a3      	ldrh	r3, [r4, #12]
 8006a54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a58:	81a3      	strh	r3, [r4, #12]
 8006a5a:	e7ad      	b.n	80069b8 <__sflush_r+0x1c>
 8006a5c:	690f      	ldr	r7, [r1, #16]
 8006a5e:	2f00      	cmp	r7, #0
 8006a60:	d0a9      	beq.n	80069b6 <__sflush_r+0x1a>
 8006a62:	0793      	lsls	r3, r2, #30
 8006a64:	680e      	ldr	r6, [r1, #0]
 8006a66:	bf08      	it	eq
 8006a68:	694b      	ldreq	r3, [r1, #20]
 8006a6a:	600f      	str	r7, [r1, #0]
 8006a6c:	bf18      	it	ne
 8006a6e:	2300      	movne	r3, #0
 8006a70:	eba6 0807 	sub.w	r8, r6, r7
 8006a74:	608b      	str	r3, [r1, #8]
 8006a76:	f1b8 0f00 	cmp.w	r8, #0
 8006a7a:	dd9c      	ble.n	80069b6 <__sflush_r+0x1a>
 8006a7c:	6a21      	ldr	r1, [r4, #32]
 8006a7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006a80:	4643      	mov	r3, r8
 8006a82:	463a      	mov	r2, r7
 8006a84:	4628      	mov	r0, r5
 8006a86:	47b0      	blx	r6
 8006a88:	2800      	cmp	r0, #0
 8006a8a:	dc06      	bgt.n	8006a9a <__sflush_r+0xfe>
 8006a8c:	89a3      	ldrh	r3, [r4, #12]
 8006a8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a92:	81a3      	strh	r3, [r4, #12]
 8006a94:	f04f 30ff 	mov.w	r0, #4294967295
 8006a98:	e78e      	b.n	80069b8 <__sflush_r+0x1c>
 8006a9a:	4407      	add	r7, r0
 8006a9c:	eba8 0800 	sub.w	r8, r8, r0
 8006aa0:	e7e9      	b.n	8006a76 <__sflush_r+0xda>
 8006aa2:	bf00      	nop
 8006aa4:	dfbffffe 	.word	0xdfbffffe

08006aa8 <_fflush_r>:
 8006aa8:	b538      	push	{r3, r4, r5, lr}
 8006aaa:	690b      	ldr	r3, [r1, #16]
 8006aac:	4605      	mov	r5, r0
 8006aae:	460c      	mov	r4, r1
 8006ab0:	b913      	cbnz	r3, 8006ab8 <_fflush_r+0x10>
 8006ab2:	2500      	movs	r5, #0
 8006ab4:	4628      	mov	r0, r5
 8006ab6:	bd38      	pop	{r3, r4, r5, pc}
 8006ab8:	b118      	cbz	r0, 8006ac2 <_fflush_r+0x1a>
 8006aba:	6a03      	ldr	r3, [r0, #32]
 8006abc:	b90b      	cbnz	r3, 8006ac2 <_fflush_r+0x1a>
 8006abe:	f7ff f913 	bl	8005ce8 <__sinit>
 8006ac2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d0f3      	beq.n	8006ab2 <_fflush_r+0xa>
 8006aca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006acc:	07d0      	lsls	r0, r2, #31
 8006ace:	d404      	bmi.n	8006ada <_fflush_r+0x32>
 8006ad0:	0599      	lsls	r1, r3, #22
 8006ad2:	d402      	bmi.n	8006ada <_fflush_r+0x32>
 8006ad4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ad6:	f7ff fa2c 	bl	8005f32 <__retarget_lock_acquire_recursive>
 8006ada:	4628      	mov	r0, r5
 8006adc:	4621      	mov	r1, r4
 8006ade:	f7ff ff5d 	bl	800699c <__sflush_r>
 8006ae2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ae4:	07da      	lsls	r2, r3, #31
 8006ae6:	4605      	mov	r5, r0
 8006ae8:	d4e4      	bmi.n	8006ab4 <_fflush_r+0xc>
 8006aea:	89a3      	ldrh	r3, [r4, #12]
 8006aec:	059b      	lsls	r3, r3, #22
 8006aee:	d4e1      	bmi.n	8006ab4 <_fflush_r+0xc>
 8006af0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006af2:	f7ff fa1f 	bl	8005f34 <__retarget_lock_release_recursive>
 8006af6:	e7dd      	b.n	8006ab4 <_fflush_r+0xc>

08006af8 <__swbuf_r>:
 8006af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006afa:	460e      	mov	r6, r1
 8006afc:	4614      	mov	r4, r2
 8006afe:	4605      	mov	r5, r0
 8006b00:	b118      	cbz	r0, 8006b0a <__swbuf_r+0x12>
 8006b02:	6a03      	ldr	r3, [r0, #32]
 8006b04:	b90b      	cbnz	r3, 8006b0a <__swbuf_r+0x12>
 8006b06:	f7ff f8ef 	bl	8005ce8 <__sinit>
 8006b0a:	69a3      	ldr	r3, [r4, #24]
 8006b0c:	60a3      	str	r3, [r4, #8]
 8006b0e:	89a3      	ldrh	r3, [r4, #12]
 8006b10:	071a      	lsls	r2, r3, #28
 8006b12:	d525      	bpl.n	8006b60 <__swbuf_r+0x68>
 8006b14:	6923      	ldr	r3, [r4, #16]
 8006b16:	b31b      	cbz	r3, 8006b60 <__swbuf_r+0x68>
 8006b18:	6823      	ldr	r3, [r4, #0]
 8006b1a:	6922      	ldr	r2, [r4, #16]
 8006b1c:	1a98      	subs	r0, r3, r2
 8006b1e:	6963      	ldr	r3, [r4, #20]
 8006b20:	b2f6      	uxtb	r6, r6
 8006b22:	4283      	cmp	r3, r0
 8006b24:	4637      	mov	r7, r6
 8006b26:	dc04      	bgt.n	8006b32 <__swbuf_r+0x3a>
 8006b28:	4621      	mov	r1, r4
 8006b2a:	4628      	mov	r0, r5
 8006b2c:	f7ff ffbc 	bl	8006aa8 <_fflush_r>
 8006b30:	b9e0      	cbnz	r0, 8006b6c <__swbuf_r+0x74>
 8006b32:	68a3      	ldr	r3, [r4, #8]
 8006b34:	3b01      	subs	r3, #1
 8006b36:	60a3      	str	r3, [r4, #8]
 8006b38:	6823      	ldr	r3, [r4, #0]
 8006b3a:	1c5a      	adds	r2, r3, #1
 8006b3c:	6022      	str	r2, [r4, #0]
 8006b3e:	701e      	strb	r6, [r3, #0]
 8006b40:	6962      	ldr	r2, [r4, #20]
 8006b42:	1c43      	adds	r3, r0, #1
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d004      	beq.n	8006b52 <__swbuf_r+0x5a>
 8006b48:	89a3      	ldrh	r3, [r4, #12]
 8006b4a:	07db      	lsls	r3, r3, #31
 8006b4c:	d506      	bpl.n	8006b5c <__swbuf_r+0x64>
 8006b4e:	2e0a      	cmp	r6, #10
 8006b50:	d104      	bne.n	8006b5c <__swbuf_r+0x64>
 8006b52:	4621      	mov	r1, r4
 8006b54:	4628      	mov	r0, r5
 8006b56:	f7ff ffa7 	bl	8006aa8 <_fflush_r>
 8006b5a:	b938      	cbnz	r0, 8006b6c <__swbuf_r+0x74>
 8006b5c:	4638      	mov	r0, r7
 8006b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b60:	4621      	mov	r1, r4
 8006b62:	4628      	mov	r0, r5
 8006b64:	f000 f806 	bl	8006b74 <__swsetup_r>
 8006b68:	2800      	cmp	r0, #0
 8006b6a:	d0d5      	beq.n	8006b18 <__swbuf_r+0x20>
 8006b6c:	f04f 37ff 	mov.w	r7, #4294967295
 8006b70:	e7f4      	b.n	8006b5c <__swbuf_r+0x64>
	...

08006b74 <__swsetup_r>:
 8006b74:	b538      	push	{r3, r4, r5, lr}
 8006b76:	4b2a      	ldr	r3, [pc, #168]	; (8006c20 <__swsetup_r+0xac>)
 8006b78:	4605      	mov	r5, r0
 8006b7a:	6818      	ldr	r0, [r3, #0]
 8006b7c:	460c      	mov	r4, r1
 8006b7e:	b118      	cbz	r0, 8006b88 <__swsetup_r+0x14>
 8006b80:	6a03      	ldr	r3, [r0, #32]
 8006b82:	b90b      	cbnz	r3, 8006b88 <__swsetup_r+0x14>
 8006b84:	f7ff f8b0 	bl	8005ce8 <__sinit>
 8006b88:	89a3      	ldrh	r3, [r4, #12]
 8006b8a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b8e:	0718      	lsls	r0, r3, #28
 8006b90:	d422      	bmi.n	8006bd8 <__swsetup_r+0x64>
 8006b92:	06d9      	lsls	r1, r3, #27
 8006b94:	d407      	bmi.n	8006ba6 <__swsetup_r+0x32>
 8006b96:	2309      	movs	r3, #9
 8006b98:	602b      	str	r3, [r5, #0]
 8006b9a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006b9e:	81a3      	strh	r3, [r4, #12]
 8006ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ba4:	e034      	b.n	8006c10 <__swsetup_r+0x9c>
 8006ba6:	0758      	lsls	r0, r3, #29
 8006ba8:	d512      	bpl.n	8006bd0 <__swsetup_r+0x5c>
 8006baa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006bac:	b141      	cbz	r1, 8006bc0 <__swsetup_r+0x4c>
 8006bae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006bb2:	4299      	cmp	r1, r3
 8006bb4:	d002      	beq.n	8006bbc <__swsetup_r+0x48>
 8006bb6:	4628      	mov	r0, r5
 8006bb8:	f7ff f9cc 	bl	8005f54 <_free_r>
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	6363      	str	r3, [r4, #52]	; 0x34
 8006bc0:	89a3      	ldrh	r3, [r4, #12]
 8006bc2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006bc6:	81a3      	strh	r3, [r4, #12]
 8006bc8:	2300      	movs	r3, #0
 8006bca:	6063      	str	r3, [r4, #4]
 8006bcc:	6923      	ldr	r3, [r4, #16]
 8006bce:	6023      	str	r3, [r4, #0]
 8006bd0:	89a3      	ldrh	r3, [r4, #12]
 8006bd2:	f043 0308 	orr.w	r3, r3, #8
 8006bd6:	81a3      	strh	r3, [r4, #12]
 8006bd8:	6923      	ldr	r3, [r4, #16]
 8006bda:	b94b      	cbnz	r3, 8006bf0 <__swsetup_r+0x7c>
 8006bdc:	89a3      	ldrh	r3, [r4, #12]
 8006bde:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006be2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006be6:	d003      	beq.n	8006bf0 <__swsetup_r+0x7c>
 8006be8:	4621      	mov	r1, r4
 8006bea:	4628      	mov	r0, r5
 8006bec:	f000 f899 	bl	8006d22 <__smakebuf_r>
 8006bf0:	89a0      	ldrh	r0, [r4, #12]
 8006bf2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006bf6:	f010 0301 	ands.w	r3, r0, #1
 8006bfa:	d00a      	beq.n	8006c12 <__swsetup_r+0x9e>
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	60a3      	str	r3, [r4, #8]
 8006c00:	6963      	ldr	r3, [r4, #20]
 8006c02:	425b      	negs	r3, r3
 8006c04:	61a3      	str	r3, [r4, #24]
 8006c06:	6923      	ldr	r3, [r4, #16]
 8006c08:	b943      	cbnz	r3, 8006c1c <__swsetup_r+0xa8>
 8006c0a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006c0e:	d1c4      	bne.n	8006b9a <__swsetup_r+0x26>
 8006c10:	bd38      	pop	{r3, r4, r5, pc}
 8006c12:	0781      	lsls	r1, r0, #30
 8006c14:	bf58      	it	pl
 8006c16:	6963      	ldrpl	r3, [r4, #20]
 8006c18:	60a3      	str	r3, [r4, #8]
 8006c1a:	e7f4      	b.n	8006c06 <__swsetup_r+0x92>
 8006c1c:	2000      	movs	r0, #0
 8006c1e:	e7f7      	b.n	8006c10 <__swsetup_r+0x9c>
 8006c20:	2000006c 	.word	0x2000006c

08006c24 <memmove>:
 8006c24:	4288      	cmp	r0, r1
 8006c26:	b510      	push	{r4, lr}
 8006c28:	eb01 0402 	add.w	r4, r1, r2
 8006c2c:	d902      	bls.n	8006c34 <memmove+0x10>
 8006c2e:	4284      	cmp	r4, r0
 8006c30:	4623      	mov	r3, r4
 8006c32:	d807      	bhi.n	8006c44 <memmove+0x20>
 8006c34:	1e43      	subs	r3, r0, #1
 8006c36:	42a1      	cmp	r1, r4
 8006c38:	d008      	beq.n	8006c4c <memmove+0x28>
 8006c3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006c42:	e7f8      	b.n	8006c36 <memmove+0x12>
 8006c44:	4402      	add	r2, r0
 8006c46:	4601      	mov	r1, r0
 8006c48:	428a      	cmp	r2, r1
 8006c4a:	d100      	bne.n	8006c4e <memmove+0x2a>
 8006c4c:	bd10      	pop	{r4, pc}
 8006c4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006c52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006c56:	e7f7      	b.n	8006c48 <memmove+0x24>

08006c58 <_sbrk_r>:
 8006c58:	b538      	push	{r3, r4, r5, lr}
 8006c5a:	4d06      	ldr	r5, [pc, #24]	; (8006c74 <_sbrk_r+0x1c>)
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	4604      	mov	r4, r0
 8006c60:	4608      	mov	r0, r1
 8006c62:	602b      	str	r3, [r5, #0]
 8006c64:	f7fb f866 	bl	8001d34 <_sbrk>
 8006c68:	1c43      	adds	r3, r0, #1
 8006c6a:	d102      	bne.n	8006c72 <_sbrk_r+0x1a>
 8006c6c:	682b      	ldr	r3, [r5, #0]
 8006c6e:	b103      	cbz	r3, 8006c72 <_sbrk_r+0x1a>
 8006c70:	6023      	str	r3, [r4, #0]
 8006c72:	bd38      	pop	{r3, r4, r5, pc}
 8006c74:	20000718 	.word	0x20000718

08006c78 <_realloc_r>:
 8006c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c7c:	4680      	mov	r8, r0
 8006c7e:	4614      	mov	r4, r2
 8006c80:	460e      	mov	r6, r1
 8006c82:	b921      	cbnz	r1, 8006c8e <_realloc_r+0x16>
 8006c84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c88:	4611      	mov	r1, r2
 8006c8a:	f7ff b9cf 	b.w	800602c <_malloc_r>
 8006c8e:	b92a      	cbnz	r2, 8006c9c <_realloc_r+0x24>
 8006c90:	f7ff f960 	bl	8005f54 <_free_r>
 8006c94:	4625      	mov	r5, r4
 8006c96:	4628      	mov	r0, r5
 8006c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c9c:	f000 f8a0 	bl	8006de0 <_malloc_usable_size_r>
 8006ca0:	4284      	cmp	r4, r0
 8006ca2:	4607      	mov	r7, r0
 8006ca4:	d802      	bhi.n	8006cac <_realloc_r+0x34>
 8006ca6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006caa:	d812      	bhi.n	8006cd2 <_realloc_r+0x5a>
 8006cac:	4621      	mov	r1, r4
 8006cae:	4640      	mov	r0, r8
 8006cb0:	f7ff f9bc 	bl	800602c <_malloc_r>
 8006cb4:	4605      	mov	r5, r0
 8006cb6:	2800      	cmp	r0, #0
 8006cb8:	d0ed      	beq.n	8006c96 <_realloc_r+0x1e>
 8006cba:	42bc      	cmp	r4, r7
 8006cbc:	4622      	mov	r2, r4
 8006cbe:	4631      	mov	r1, r6
 8006cc0:	bf28      	it	cs
 8006cc2:	463a      	movcs	r2, r7
 8006cc4:	f7ff f937 	bl	8005f36 <memcpy>
 8006cc8:	4631      	mov	r1, r6
 8006cca:	4640      	mov	r0, r8
 8006ccc:	f7ff f942 	bl	8005f54 <_free_r>
 8006cd0:	e7e1      	b.n	8006c96 <_realloc_r+0x1e>
 8006cd2:	4635      	mov	r5, r6
 8006cd4:	e7df      	b.n	8006c96 <_realloc_r+0x1e>

08006cd6 <__swhatbuf_r>:
 8006cd6:	b570      	push	{r4, r5, r6, lr}
 8006cd8:	460c      	mov	r4, r1
 8006cda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cde:	2900      	cmp	r1, #0
 8006ce0:	b096      	sub	sp, #88	; 0x58
 8006ce2:	4615      	mov	r5, r2
 8006ce4:	461e      	mov	r6, r3
 8006ce6:	da0d      	bge.n	8006d04 <__swhatbuf_r+0x2e>
 8006ce8:	89a3      	ldrh	r3, [r4, #12]
 8006cea:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006cee:	f04f 0100 	mov.w	r1, #0
 8006cf2:	bf0c      	ite	eq
 8006cf4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006cf8:	2340      	movne	r3, #64	; 0x40
 8006cfa:	2000      	movs	r0, #0
 8006cfc:	6031      	str	r1, [r6, #0]
 8006cfe:	602b      	str	r3, [r5, #0]
 8006d00:	b016      	add	sp, #88	; 0x58
 8006d02:	bd70      	pop	{r4, r5, r6, pc}
 8006d04:	466a      	mov	r2, sp
 8006d06:	f000 f849 	bl	8006d9c <_fstat_r>
 8006d0a:	2800      	cmp	r0, #0
 8006d0c:	dbec      	blt.n	8006ce8 <__swhatbuf_r+0x12>
 8006d0e:	9901      	ldr	r1, [sp, #4]
 8006d10:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006d14:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006d18:	4259      	negs	r1, r3
 8006d1a:	4159      	adcs	r1, r3
 8006d1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d20:	e7eb      	b.n	8006cfa <__swhatbuf_r+0x24>

08006d22 <__smakebuf_r>:
 8006d22:	898b      	ldrh	r3, [r1, #12]
 8006d24:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d26:	079d      	lsls	r5, r3, #30
 8006d28:	4606      	mov	r6, r0
 8006d2a:	460c      	mov	r4, r1
 8006d2c:	d507      	bpl.n	8006d3e <__smakebuf_r+0x1c>
 8006d2e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006d32:	6023      	str	r3, [r4, #0]
 8006d34:	6123      	str	r3, [r4, #16]
 8006d36:	2301      	movs	r3, #1
 8006d38:	6163      	str	r3, [r4, #20]
 8006d3a:	b002      	add	sp, #8
 8006d3c:	bd70      	pop	{r4, r5, r6, pc}
 8006d3e:	ab01      	add	r3, sp, #4
 8006d40:	466a      	mov	r2, sp
 8006d42:	f7ff ffc8 	bl	8006cd6 <__swhatbuf_r>
 8006d46:	9900      	ldr	r1, [sp, #0]
 8006d48:	4605      	mov	r5, r0
 8006d4a:	4630      	mov	r0, r6
 8006d4c:	f7ff f96e 	bl	800602c <_malloc_r>
 8006d50:	b948      	cbnz	r0, 8006d66 <__smakebuf_r+0x44>
 8006d52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d56:	059a      	lsls	r2, r3, #22
 8006d58:	d4ef      	bmi.n	8006d3a <__smakebuf_r+0x18>
 8006d5a:	f023 0303 	bic.w	r3, r3, #3
 8006d5e:	f043 0302 	orr.w	r3, r3, #2
 8006d62:	81a3      	strh	r3, [r4, #12]
 8006d64:	e7e3      	b.n	8006d2e <__smakebuf_r+0xc>
 8006d66:	89a3      	ldrh	r3, [r4, #12]
 8006d68:	6020      	str	r0, [r4, #0]
 8006d6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d6e:	81a3      	strh	r3, [r4, #12]
 8006d70:	9b00      	ldr	r3, [sp, #0]
 8006d72:	6163      	str	r3, [r4, #20]
 8006d74:	9b01      	ldr	r3, [sp, #4]
 8006d76:	6120      	str	r0, [r4, #16]
 8006d78:	b15b      	cbz	r3, 8006d92 <__smakebuf_r+0x70>
 8006d7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d7e:	4630      	mov	r0, r6
 8006d80:	f000 f81e 	bl	8006dc0 <_isatty_r>
 8006d84:	b128      	cbz	r0, 8006d92 <__smakebuf_r+0x70>
 8006d86:	89a3      	ldrh	r3, [r4, #12]
 8006d88:	f023 0303 	bic.w	r3, r3, #3
 8006d8c:	f043 0301 	orr.w	r3, r3, #1
 8006d90:	81a3      	strh	r3, [r4, #12]
 8006d92:	89a3      	ldrh	r3, [r4, #12]
 8006d94:	431d      	orrs	r5, r3
 8006d96:	81a5      	strh	r5, [r4, #12]
 8006d98:	e7cf      	b.n	8006d3a <__smakebuf_r+0x18>
	...

08006d9c <_fstat_r>:
 8006d9c:	b538      	push	{r3, r4, r5, lr}
 8006d9e:	4d07      	ldr	r5, [pc, #28]	; (8006dbc <_fstat_r+0x20>)
 8006da0:	2300      	movs	r3, #0
 8006da2:	4604      	mov	r4, r0
 8006da4:	4608      	mov	r0, r1
 8006da6:	4611      	mov	r1, r2
 8006da8:	602b      	str	r3, [r5, #0]
 8006daa:	f7fa ff9a 	bl	8001ce2 <_fstat>
 8006dae:	1c43      	adds	r3, r0, #1
 8006db0:	d102      	bne.n	8006db8 <_fstat_r+0x1c>
 8006db2:	682b      	ldr	r3, [r5, #0]
 8006db4:	b103      	cbz	r3, 8006db8 <_fstat_r+0x1c>
 8006db6:	6023      	str	r3, [r4, #0]
 8006db8:	bd38      	pop	{r3, r4, r5, pc}
 8006dba:	bf00      	nop
 8006dbc:	20000718 	.word	0x20000718

08006dc0 <_isatty_r>:
 8006dc0:	b538      	push	{r3, r4, r5, lr}
 8006dc2:	4d06      	ldr	r5, [pc, #24]	; (8006ddc <_isatty_r+0x1c>)
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	4604      	mov	r4, r0
 8006dc8:	4608      	mov	r0, r1
 8006dca:	602b      	str	r3, [r5, #0]
 8006dcc:	f7fa ff99 	bl	8001d02 <_isatty>
 8006dd0:	1c43      	adds	r3, r0, #1
 8006dd2:	d102      	bne.n	8006dda <_isatty_r+0x1a>
 8006dd4:	682b      	ldr	r3, [r5, #0]
 8006dd6:	b103      	cbz	r3, 8006dda <_isatty_r+0x1a>
 8006dd8:	6023      	str	r3, [r4, #0]
 8006dda:	bd38      	pop	{r3, r4, r5, pc}
 8006ddc:	20000718 	.word	0x20000718

08006de0 <_malloc_usable_size_r>:
 8006de0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006de4:	1f18      	subs	r0, r3, #4
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	bfbc      	itt	lt
 8006dea:	580b      	ldrlt	r3, [r1, r0]
 8006dec:	18c0      	addlt	r0, r0, r3
 8006dee:	4770      	bx	lr

08006df0 <exp>:
 8006df0:	b538      	push	{r3, r4, r5, lr}
 8006df2:	ed2d 8b02 	vpush	{d8}
 8006df6:	ec55 4b10 	vmov	r4, r5, d0
 8006dfa:	f000 f895 	bl	8006f28 <__ieee754_exp>
 8006dfe:	eeb0 8a40 	vmov.f32	s16, s0
 8006e02:	eef0 8a60 	vmov.f32	s17, s1
 8006e06:	ec45 4b10 	vmov	d0, r4, r5
 8006e0a:	f000 f877 	bl	8006efc <finite>
 8006e0e:	b168      	cbz	r0, 8006e2c <exp+0x3c>
 8006e10:	a317      	add	r3, pc, #92	; (adr r3, 8006e70 <exp+0x80>)
 8006e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e16:	4620      	mov	r0, r4
 8006e18:	4629      	mov	r1, r5
 8006e1a:	f7f9 fe75 	bl	8000b08 <__aeabi_dcmpgt>
 8006e1e:	b160      	cbz	r0, 8006e3a <exp+0x4a>
 8006e20:	f7ff f85c 	bl	8005edc <__errno>
 8006e24:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8006e60 <exp+0x70>
 8006e28:	2322      	movs	r3, #34	; 0x22
 8006e2a:	6003      	str	r3, [r0, #0]
 8006e2c:	eeb0 0a48 	vmov.f32	s0, s16
 8006e30:	eef0 0a68 	vmov.f32	s1, s17
 8006e34:	ecbd 8b02 	vpop	{d8}
 8006e38:	bd38      	pop	{r3, r4, r5, pc}
 8006e3a:	a30f      	add	r3, pc, #60	; (adr r3, 8006e78 <exp+0x88>)
 8006e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e40:	4620      	mov	r0, r4
 8006e42:	4629      	mov	r1, r5
 8006e44:	f7f9 fe42 	bl	8000acc <__aeabi_dcmplt>
 8006e48:	2800      	cmp	r0, #0
 8006e4a:	d0ef      	beq.n	8006e2c <exp+0x3c>
 8006e4c:	f7ff f846 	bl	8005edc <__errno>
 8006e50:	2322      	movs	r3, #34	; 0x22
 8006e52:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8006e68 <exp+0x78>
 8006e56:	6003      	str	r3, [r0, #0]
 8006e58:	e7e8      	b.n	8006e2c <exp+0x3c>
 8006e5a:	bf00      	nop
 8006e5c:	f3af 8000 	nop.w
 8006e60:	00000000 	.word	0x00000000
 8006e64:	7ff00000 	.word	0x7ff00000
	...
 8006e70:	fefa39ef 	.word	0xfefa39ef
 8006e74:	40862e42 	.word	0x40862e42
 8006e78:	d52d3051 	.word	0xd52d3051
 8006e7c:	c0874910 	.word	0xc0874910

08006e80 <log>:
 8006e80:	b538      	push	{r3, r4, r5, lr}
 8006e82:	ed2d 8b02 	vpush	{d8}
 8006e86:	ec55 4b10 	vmov	r4, r5, d0
 8006e8a:	f000 f9d1 	bl	8007230 <__ieee754_log>
 8006e8e:	4622      	mov	r2, r4
 8006e90:	462b      	mov	r3, r5
 8006e92:	4620      	mov	r0, r4
 8006e94:	4629      	mov	r1, r5
 8006e96:	eeb0 8a40 	vmov.f32	s16, s0
 8006e9a:	eef0 8a60 	vmov.f32	s17, s1
 8006e9e:	f7f9 fe3d 	bl	8000b1c <__aeabi_dcmpun>
 8006ea2:	b998      	cbnz	r0, 8006ecc <log+0x4c>
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	4620      	mov	r0, r4
 8006eaa:	4629      	mov	r1, r5
 8006eac:	f7f9 fe2c 	bl	8000b08 <__aeabi_dcmpgt>
 8006eb0:	b960      	cbnz	r0, 8006ecc <log+0x4c>
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	4620      	mov	r0, r4
 8006eb8:	4629      	mov	r1, r5
 8006eba:	f7f9 fdfd 	bl	8000ab8 <__aeabi_dcmpeq>
 8006ebe:	b160      	cbz	r0, 8006eda <log+0x5a>
 8006ec0:	f7ff f80c 	bl	8005edc <__errno>
 8006ec4:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8006ef0 <log+0x70>
 8006ec8:	2322      	movs	r3, #34	; 0x22
 8006eca:	6003      	str	r3, [r0, #0]
 8006ecc:	eeb0 0a48 	vmov.f32	s0, s16
 8006ed0:	eef0 0a68 	vmov.f32	s1, s17
 8006ed4:	ecbd 8b02 	vpop	{d8}
 8006ed8:	bd38      	pop	{r3, r4, r5, pc}
 8006eda:	f7fe ffff 	bl	8005edc <__errno>
 8006ede:	ecbd 8b02 	vpop	{d8}
 8006ee2:	2321      	movs	r3, #33	; 0x21
 8006ee4:	6003      	str	r3, [r0, #0]
 8006ee6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006eea:	4803      	ldr	r0, [pc, #12]	; (8006ef8 <log+0x78>)
 8006eec:	f000 b814 	b.w	8006f18 <nan>
 8006ef0:	00000000 	.word	0x00000000
 8006ef4:	fff00000 	.word	0xfff00000
 8006ef8:	080083fd 	.word	0x080083fd

08006efc <finite>:
 8006efc:	b082      	sub	sp, #8
 8006efe:	ed8d 0b00 	vstr	d0, [sp]
 8006f02:	9801      	ldr	r0, [sp, #4]
 8006f04:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8006f08:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006f0c:	0fc0      	lsrs	r0, r0, #31
 8006f0e:	b002      	add	sp, #8
 8006f10:	4770      	bx	lr
 8006f12:	0000      	movs	r0, r0
 8006f14:	0000      	movs	r0, r0
	...

08006f18 <nan>:
 8006f18:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006f20 <nan+0x8>
 8006f1c:	4770      	bx	lr
 8006f1e:	bf00      	nop
 8006f20:	00000000 	.word	0x00000000
 8006f24:	7ff80000 	.word	0x7ff80000

08006f28 <__ieee754_exp>:
 8006f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f2c:	ec55 4b10 	vmov	r4, r5, d0
 8006f30:	49b5      	ldr	r1, [pc, #724]	; (8007208 <__ieee754_exp+0x2e0>)
 8006f32:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8006f36:	428a      	cmp	r2, r1
 8006f38:	ed2d 8b04 	vpush	{d8-d9}
 8006f3c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8006f40:	d93b      	bls.n	8006fba <__ieee754_exp+0x92>
 8006f42:	49b2      	ldr	r1, [pc, #712]	; (800720c <__ieee754_exp+0x2e4>)
 8006f44:	428a      	cmp	r2, r1
 8006f46:	d916      	bls.n	8006f76 <__ieee754_exp+0x4e>
 8006f48:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006f4c:	4323      	orrs	r3, r4
 8006f4e:	ee10 2a10 	vmov	r2, s0
 8006f52:	d007      	beq.n	8006f64 <__ieee754_exp+0x3c>
 8006f54:	462b      	mov	r3, r5
 8006f56:	4620      	mov	r0, r4
 8006f58:	4629      	mov	r1, r5
 8006f5a:	f7f9 f98f 	bl	800027c <__adddf3>
 8006f5e:	4604      	mov	r4, r0
 8006f60:	460d      	mov	r5, r1
 8006f62:	e002      	b.n	8006f6a <__ieee754_exp+0x42>
 8006f64:	b10e      	cbz	r6, 8006f6a <__ieee754_exp+0x42>
 8006f66:	2400      	movs	r4, #0
 8006f68:	2500      	movs	r5, #0
 8006f6a:	ecbd 8b04 	vpop	{d8-d9}
 8006f6e:	ec45 4b10 	vmov	d0, r4, r5
 8006f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f76:	a38e      	add	r3, pc, #568	; (adr r3, 80071b0 <__ieee754_exp+0x288>)
 8006f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f7c:	ee10 0a10 	vmov	r0, s0
 8006f80:	4629      	mov	r1, r5
 8006f82:	f7f9 fdc1 	bl	8000b08 <__aeabi_dcmpgt>
 8006f86:	4607      	mov	r7, r0
 8006f88:	b130      	cbz	r0, 8006f98 <__ieee754_exp+0x70>
 8006f8a:	ecbd 8b04 	vpop	{d8-d9}
 8006f8e:	2000      	movs	r0, #0
 8006f90:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f94:	f000 bb2d 	b.w	80075f2 <__math_oflow>
 8006f98:	a387      	add	r3, pc, #540	; (adr r3, 80071b8 <__ieee754_exp+0x290>)
 8006f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f9e:	4620      	mov	r0, r4
 8006fa0:	4629      	mov	r1, r5
 8006fa2:	f7f9 fd93 	bl	8000acc <__aeabi_dcmplt>
 8006fa6:	2800      	cmp	r0, #0
 8006fa8:	f000 808b 	beq.w	80070c2 <__ieee754_exp+0x19a>
 8006fac:	ecbd 8b04 	vpop	{d8-d9}
 8006fb0:	4638      	mov	r0, r7
 8006fb2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fb6:	f000 bb13 	b.w	80075e0 <__math_uflow>
 8006fba:	4b95      	ldr	r3, [pc, #596]	; (8007210 <__ieee754_exp+0x2e8>)
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	f240 80ac 	bls.w	800711a <__ieee754_exp+0x1f2>
 8006fc2:	4b94      	ldr	r3, [pc, #592]	; (8007214 <__ieee754_exp+0x2ec>)
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d87c      	bhi.n	80070c2 <__ieee754_exp+0x19a>
 8006fc8:	4b93      	ldr	r3, [pc, #588]	; (8007218 <__ieee754_exp+0x2f0>)
 8006fca:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd2:	ee10 0a10 	vmov	r0, s0
 8006fd6:	4629      	mov	r1, r5
 8006fd8:	f7f9 f94e 	bl	8000278 <__aeabi_dsub>
 8006fdc:	4b8f      	ldr	r3, [pc, #572]	; (800721c <__ieee754_exp+0x2f4>)
 8006fde:	00f7      	lsls	r7, r6, #3
 8006fe0:	443b      	add	r3, r7
 8006fe2:	ed93 7b00 	vldr	d7, [r3]
 8006fe6:	f1c6 0a01 	rsb	sl, r6, #1
 8006fea:	4680      	mov	r8, r0
 8006fec:	4689      	mov	r9, r1
 8006fee:	ebaa 0a06 	sub.w	sl, sl, r6
 8006ff2:	eeb0 8a47 	vmov.f32	s16, s14
 8006ff6:	eef0 8a67 	vmov.f32	s17, s15
 8006ffa:	ec53 2b18 	vmov	r2, r3, d8
 8006ffe:	4640      	mov	r0, r8
 8007000:	4649      	mov	r1, r9
 8007002:	f7f9 f939 	bl	8000278 <__aeabi_dsub>
 8007006:	4604      	mov	r4, r0
 8007008:	460d      	mov	r5, r1
 800700a:	4622      	mov	r2, r4
 800700c:	462b      	mov	r3, r5
 800700e:	4620      	mov	r0, r4
 8007010:	4629      	mov	r1, r5
 8007012:	f7f9 fae9 	bl	80005e8 <__aeabi_dmul>
 8007016:	a36a      	add	r3, pc, #424	; (adr r3, 80071c0 <__ieee754_exp+0x298>)
 8007018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800701c:	4606      	mov	r6, r0
 800701e:	460f      	mov	r7, r1
 8007020:	f7f9 fae2 	bl	80005e8 <__aeabi_dmul>
 8007024:	a368      	add	r3, pc, #416	; (adr r3, 80071c8 <__ieee754_exp+0x2a0>)
 8007026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800702a:	f7f9 f925 	bl	8000278 <__aeabi_dsub>
 800702e:	4632      	mov	r2, r6
 8007030:	463b      	mov	r3, r7
 8007032:	f7f9 fad9 	bl	80005e8 <__aeabi_dmul>
 8007036:	a366      	add	r3, pc, #408	; (adr r3, 80071d0 <__ieee754_exp+0x2a8>)
 8007038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800703c:	f7f9 f91e 	bl	800027c <__adddf3>
 8007040:	4632      	mov	r2, r6
 8007042:	463b      	mov	r3, r7
 8007044:	f7f9 fad0 	bl	80005e8 <__aeabi_dmul>
 8007048:	a363      	add	r3, pc, #396	; (adr r3, 80071d8 <__ieee754_exp+0x2b0>)
 800704a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800704e:	f7f9 f913 	bl	8000278 <__aeabi_dsub>
 8007052:	4632      	mov	r2, r6
 8007054:	463b      	mov	r3, r7
 8007056:	f7f9 fac7 	bl	80005e8 <__aeabi_dmul>
 800705a:	a361      	add	r3, pc, #388	; (adr r3, 80071e0 <__ieee754_exp+0x2b8>)
 800705c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007060:	f7f9 f90c 	bl	800027c <__adddf3>
 8007064:	4632      	mov	r2, r6
 8007066:	463b      	mov	r3, r7
 8007068:	f7f9 fabe 	bl	80005e8 <__aeabi_dmul>
 800706c:	4602      	mov	r2, r0
 800706e:	460b      	mov	r3, r1
 8007070:	4620      	mov	r0, r4
 8007072:	4629      	mov	r1, r5
 8007074:	f7f9 f900 	bl	8000278 <__aeabi_dsub>
 8007078:	4602      	mov	r2, r0
 800707a:	460b      	mov	r3, r1
 800707c:	4606      	mov	r6, r0
 800707e:	460f      	mov	r7, r1
 8007080:	4620      	mov	r0, r4
 8007082:	4629      	mov	r1, r5
 8007084:	f7f9 fab0 	bl	80005e8 <__aeabi_dmul>
 8007088:	ec41 0b19 	vmov	d9, r0, r1
 800708c:	f1ba 0f00 	cmp.w	sl, #0
 8007090:	d15d      	bne.n	800714e <__ieee754_exp+0x226>
 8007092:	2200      	movs	r2, #0
 8007094:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007098:	4630      	mov	r0, r6
 800709a:	4639      	mov	r1, r7
 800709c:	f7f9 f8ec 	bl	8000278 <__aeabi_dsub>
 80070a0:	4602      	mov	r2, r0
 80070a2:	460b      	mov	r3, r1
 80070a4:	ec51 0b19 	vmov	r0, r1, d9
 80070a8:	f7f9 fbc8 	bl	800083c <__aeabi_ddiv>
 80070ac:	4622      	mov	r2, r4
 80070ae:	462b      	mov	r3, r5
 80070b0:	f7f9 f8e2 	bl	8000278 <__aeabi_dsub>
 80070b4:	4602      	mov	r2, r0
 80070b6:	460b      	mov	r3, r1
 80070b8:	2000      	movs	r0, #0
 80070ba:	4959      	ldr	r1, [pc, #356]	; (8007220 <__ieee754_exp+0x2f8>)
 80070bc:	f7f9 f8dc 	bl	8000278 <__aeabi_dsub>
 80070c0:	e74d      	b.n	8006f5e <__ieee754_exp+0x36>
 80070c2:	4b58      	ldr	r3, [pc, #352]	; (8007224 <__ieee754_exp+0x2fc>)
 80070c4:	4620      	mov	r0, r4
 80070c6:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80070ca:	4629      	mov	r1, r5
 80070cc:	a346      	add	r3, pc, #280	; (adr r3, 80071e8 <__ieee754_exp+0x2c0>)
 80070ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d2:	f7f9 fa89 	bl	80005e8 <__aeabi_dmul>
 80070d6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80070da:	f7f9 f8cf 	bl	800027c <__adddf3>
 80070de:	f7f9 fd33 	bl	8000b48 <__aeabi_d2iz>
 80070e2:	4682      	mov	sl, r0
 80070e4:	f7f9 fa16 	bl	8000514 <__aeabi_i2d>
 80070e8:	a341      	add	r3, pc, #260	; (adr r3, 80071f0 <__ieee754_exp+0x2c8>)
 80070ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ee:	4606      	mov	r6, r0
 80070f0:	460f      	mov	r7, r1
 80070f2:	f7f9 fa79 	bl	80005e8 <__aeabi_dmul>
 80070f6:	4602      	mov	r2, r0
 80070f8:	460b      	mov	r3, r1
 80070fa:	4620      	mov	r0, r4
 80070fc:	4629      	mov	r1, r5
 80070fe:	f7f9 f8bb 	bl	8000278 <__aeabi_dsub>
 8007102:	a33d      	add	r3, pc, #244	; (adr r3, 80071f8 <__ieee754_exp+0x2d0>)
 8007104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007108:	4680      	mov	r8, r0
 800710a:	4689      	mov	r9, r1
 800710c:	4630      	mov	r0, r6
 800710e:	4639      	mov	r1, r7
 8007110:	f7f9 fa6a 	bl	80005e8 <__aeabi_dmul>
 8007114:	ec41 0b18 	vmov	d8, r0, r1
 8007118:	e76f      	b.n	8006ffa <__ieee754_exp+0xd2>
 800711a:	4b43      	ldr	r3, [pc, #268]	; (8007228 <__ieee754_exp+0x300>)
 800711c:	429a      	cmp	r2, r3
 800711e:	d811      	bhi.n	8007144 <__ieee754_exp+0x21c>
 8007120:	a337      	add	r3, pc, #220	; (adr r3, 8007200 <__ieee754_exp+0x2d8>)
 8007122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007126:	ee10 0a10 	vmov	r0, s0
 800712a:	4629      	mov	r1, r5
 800712c:	f7f9 f8a6 	bl	800027c <__adddf3>
 8007130:	4b3b      	ldr	r3, [pc, #236]	; (8007220 <__ieee754_exp+0x2f8>)
 8007132:	2200      	movs	r2, #0
 8007134:	f7f9 fce8 	bl	8000b08 <__aeabi_dcmpgt>
 8007138:	b138      	cbz	r0, 800714a <__ieee754_exp+0x222>
 800713a:	4b39      	ldr	r3, [pc, #228]	; (8007220 <__ieee754_exp+0x2f8>)
 800713c:	2200      	movs	r2, #0
 800713e:	4620      	mov	r0, r4
 8007140:	4629      	mov	r1, r5
 8007142:	e70a      	b.n	8006f5a <__ieee754_exp+0x32>
 8007144:	f04f 0a00 	mov.w	sl, #0
 8007148:	e75f      	b.n	800700a <__ieee754_exp+0xe2>
 800714a:	4682      	mov	sl, r0
 800714c:	e75d      	b.n	800700a <__ieee754_exp+0xe2>
 800714e:	4632      	mov	r2, r6
 8007150:	463b      	mov	r3, r7
 8007152:	2000      	movs	r0, #0
 8007154:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007158:	f7f9 f88e 	bl	8000278 <__aeabi_dsub>
 800715c:	4602      	mov	r2, r0
 800715e:	460b      	mov	r3, r1
 8007160:	ec51 0b19 	vmov	r0, r1, d9
 8007164:	f7f9 fb6a 	bl	800083c <__aeabi_ddiv>
 8007168:	4602      	mov	r2, r0
 800716a:	460b      	mov	r3, r1
 800716c:	ec51 0b18 	vmov	r0, r1, d8
 8007170:	f7f9 f882 	bl	8000278 <__aeabi_dsub>
 8007174:	4642      	mov	r2, r8
 8007176:	464b      	mov	r3, r9
 8007178:	f7f9 f87e 	bl	8000278 <__aeabi_dsub>
 800717c:	4602      	mov	r2, r0
 800717e:	460b      	mov	r3, r1
 8007180:	2000      	movs	r0, #0
 8007182:	4927      	ldr	r1, [pc, #156]	; (8007220 <__ieee754_exp+0x2f8>)
 8007184:	f7f9 f878 	bl	8000278 <__aeabi_dsub>
 8007188:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800718c:	4592      	cmp	sl, r2
 800718e:	db02      	blt.n	8007196 <__ieee754_exp+0x26e>
 8007190:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8007194:	e6e3      	b.n	8006f5e <__ieee754_exp+0x36>
 8007196:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800719a:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800719e:	2200      	movs	r2, #0
 80071a0:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 80071a4:	f7f9 fa20 	bl	80005e8 <__aeabi_dmul>
 80071a8:	e6d9      	b.n	8006f5e <__ieee754_exp+0x36>
 80071aa:	bf00      	nop
 80071ac:	f3af 8000 	nop.w
 80071b0:	fefa39ef 	.word	0xfefa39ef
 80071b4:	40862e42 	.word	0x40862e42
 80071b8:	d52d3051 	.word	0xd52d3051
 80071bc:	c0874910 	.word	0xc0874910
 80071c0:	72bea4d0 	.word	0x72bea4d0
 80071c4:	3e663769 	.word	0x3e663769
 80071c8:	c5d26bf1 	.word	0xc5d26bf1
 80071cc:	3ebbbd41 	.word	0x3ebbbd41
 80071d0:	af25de2c 	.word	0xaf25de2c
 80071d4:	3f11566a 	.word	0x3f11566a
 80071d8:	16bebd93 	.word	0x16bebd93
 80071dc:	3f66c16c 	.word	0x3f66c16c
 80071e0:	5555553e 	.word	0x5555553e
 80071e4:	3fc55555 	.word	0x3fc55555
 80071e8:	652b82fe 	.word	0x652b82fe
 80071ec:	3ff71547 	.word	0x3ff71547
 80071f0:	fee00000 	.word	0xfee00000
 80071f4:	3fe62e42 	.word	0x3fe62e42
 80071f8:	35793c76 	.word	0x35793c76
 80071fc:	3dea39ef 	.word	0x3dea39ef
 8007200:	8800759c 	.word	0x8800759c
 8007204:	7e37e43c 	.word	0x7e37e43c
 8007208:	40862e41 	.word	0x40862e41
 800720c:	7fefffff 	.word	0x7fefffff
 8007210:	3fd62e42 	.word	0x3fd62e42
 8007214:	3ff0a2b1 	.word	0x3ff0a2b1
 8007218:	08008440 	.word	0x08008440
 800721c:	08008450 	.word	0x08008450
 8007220:	3ff00000 	.word	0x3ff00000
 8007224:	08008430 	.word	0x08008430
 8007228:	3defffff 	.word	0x3defffff
 800722c:	00000000 	.word	0x00000000

08007230 <__ieee754_log>:
 8007230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007234:	ec51 0b10 	vmov	r0, r1, d0
 8007238:	ed2d 8b04 	vpush	{d8-d9}
 800723c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8007240:	b083      	sub	sp, #12
 8007242:	460d      	mov	r5, r1
 8007244:	da29      	bge.n	800729a <__ieee754_log+0x6a>
 8007246:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800724a:	4303      	orrs	r3, r0
 800724c:	ee10 2a10 	vmov	r2, s0
 8007250:	d10c      	bne.n	800726c <__ieee754_log+0x3c>
 8007252:	49cf      	ldr	r1, [pc, #828]	; (8007590 <__ieee754_log+0x360>)
 8007254:	2200      	movs	r2, #0
 8007256:	2300      	movs	r3, #0
 8007258:	2000      	movs	r0, #0
 800725a:	f7f9 faef 	bl	800083c <__aeabi_ddiv>
 800725e:	ec41 0b10 	vmov	d0, r0, r1
 8007262:	b003      	add	sp, #12
 8007264:	ecbd 8b04 	vpop	{d8-d9}
 8007268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800726c:	2900      	cmp	r1, #0
 800726e:	da05      	bge.n	800727c <__ieee754_log+0x4c>
 8007270:	460b      	mov	r3, r1
 8007272:	f7f9 f801 	bl	8000278 <__aeabi_dsub>
 8007276:	2200      	movs	r2, #0
 8007278:	2300      	movs	r3, #0
 800727a:	e7ee      	b.n	800725a <__ieee754_log+0x2a>
 800727c:	4bc5      	ldr	r3, [pc, #788]	; (8007594 <__ieee754_log+0x364>)
 800727e:	2200      	movs	r2, #0
 8007280:	f7f9 f9b2 	bl	80005e8 <__aeabi_dmul>
 8007284:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8007288:	460d      	mov	r5, r1
 800728a:	4ac3      	ldr	r2, [pc, #780]	; (8007598 <__ieee754_log+0x368>)
 800728c:	4295      	cmp	r5, r2
 800728e:	dd06      	ble.n	800729e <__ieee754_log+0x6e>
 8007290:	4602      	mov	r2, r0
 8007292:	460b      	mov	r3, r1
 8007294:	f7f8 fff2 	bl	800027c <__adddf3>
 8007298:	e7e1      	b.n	800725e <__ieee754_log+0x2e>
 800729a:	2300      	movs	r3, #0
 800729c:	e7f5      	b.n	800728a <__ieee754_log+0x5a>
 800729e:	152c      	asrs	r4, r5, #20
 80072a0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80072a4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80072a8:	441c      	add	r4, r3
 80072aa:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 80072ae:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 80072b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80072b6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 80072ba:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 80072be:	ea42 0105 	orr.w	r1, r2, r5
 80072c2:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 80072c6:	2200      	movs	r2, #0
 80072c8:	4bb4      	ldr	r3, [pc, #720]	; (800759c <__ieee754_log+0x36c>)
 80072ca:	f7f8 ffd5 	bl	8000278 <__aeabi_dsub>
 80072ce:	1cab      	adds	r3, r5, #2
 80072d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072d4:	2b02      	cmp	r3, #2
 80072d6:	4682      	mov	sl, r0
 80072d8:	468b      	mov	fp, r1
 80072da:	f04f 0200 	mov.w	r2, #0
 80072de:	dc53      	bgt.n	8007388 <__ieee754_log+0x158>
 80072e0:	2300      	movs	r3, #0
 80072e2:	f7f9 fbe9 	bl	8000ab8 <__aeabi_dcmpeq>
 80072e6:	b1d0      	cbz	r0, 800731e <__ieee754_log+0xee>
 80072e8:	2c00      	cmp	r4, #0
 80072ea:	f000 8122 	beq.w	8007532 <__ieee754_log+0x302>
 80072ee:	4620      	mov	r0, r4
 80072f0:	f7f9 f910 	bl	8000514 <__aeabi_i2d>
 80072f4:	a390      	add	r3, pc, #576	; (adr r3, 8007538 <__ieee754_log+0x308>)
 80072f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072fa:	4606      	mov	r6, r0
 80072fc:	460f      	mov	r7, r1
 80072fe:	f7f9 f973 	bl	80005e8 <__aeabi_dmul>
 8007302:	a38f      	add	r3, pc, #572	; (adr r3, 8007540 <__ieee754_log+0x310>)
 8007304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007308:	4604      	mov	r4, r0
 800730a:	460d      	mov	r5, r1
 800730c:	4630      	mov	r0, r6
 800730e:	4639      	mov	r1, r7
 8007310:	f7f9 f96a 	bl	80005e8 <__aeabi_dmul>
 8007314:	4602      	mov	r2, r0
 8007316:	460b      	mov	r3, r1
 8007318:	4620      	mov	r0, r4
 800731a:	4629      	mov	r1, r5
 800731c:	e7ba      	b.n	8007294 <__ieee754_log+0x64>
 800731e:	a38a      	add	r3, pc, #552	; (adr r3, 8007548 <__ieee754_log+0x318>)
 8007320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007324:	4650      	mov	r0, sl
 8007326:	4659      	mov	r1, fp
 8007328:	f7f9 f95e 	bl	80005e8 <__aeabi_dmul>
 800732c:	4602      	mov	r2, r0
 800732e:	460b      	mov	r3, r1
 8007330:	2000      	movs	r0, #0
 8007332:	499b      	ldr	r1, [pc, #620]	; (80075a0 <__ieee754_log+0x370>)
 8007334:	f7f8 ffa0 	bl	8000278 <__aeabi_dsub>
 8007338:	4652      	mov	r2, sl
 800733a:	4606      	mov	r6, r0
 800733c:	460f      	mov	r7, r1
 800733e:	465b      	mov	r3, fp
 8007340:	4650      	mov	r0, sl
 8007342:	4659      	mov	r1, fp
 8007344:	f7f9 f950 	bl	80005e8 <__aeabi_dmul>
 8007348:	4602      	mov	r2, r0
 800734a:	460b      	mov	r3, r1
 800734c:	4630      	mov	r0, r6
 800734e:	4639      	mov	r1, r7
 8007350:	f7f9 f94a 	bl	80005e8 <__aeabi_dmul>
 8007354:	4606      	mov	r6, r0
 8007356:	460f      	mov	r7, r1
 8007358:	b914      	cbnz	r4, 8007360 <__ieee754_log+0x130>
 800735a:	4632      	mov	r2, r6
 800735c:	463b      	mov	r3, r7
 800735e:	e0a2      	b.n	80074a6 <__ieee754_log+0x276>
 8007360:	4620      	mov	r0, r4
 8007362:	f7f9 f8d7 	bl	8000514 <__aeabi_i2d>
 8007366:	a374      	add	r3, pc, #464	; (adr r3, 8007538 <__ieee754_log+0x308>)
 8007368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800736c:	4680      	mov	r8, r0
 800736e:	4689      	mov	r9, r1
 8007370:	f7f9 f93a 	bl	80005e8 <__aeabi_dmul>
 8007374:	a372      	add	r3, pc, #456	; (adr r3, 8007540 <__ieee754_log+0x310>)
 8007376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737a:	4604      	mov	r4, r0
 800737c:	460d      	mov	r5, r1
 800737e:	4640      	mov	r0, r8
 8007380:	4649      	mov	r1, r9
 8007382:	f7f9 f931 	bl	80005e8 <__aeabi_dmul>
 8007386:	e0a7      	b.n	80074d8 <__ieee754_log+0x2a8>
 8007388:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800738c:	f7f8 ff76 	bl	800027c <__adddf3>
 8007390:	4602      	mov	r2, r0
 8007392:	460b      	mov	r3, r1
 8007394:	4650      	mov	r0, sl
 8007396:	4659      	mov	r1, fp
 8007398:	f7f9 fa50 	bl	800083c <__aeabi_ddiv>
 800739c:	ec41 0b18 	vmov	d8, r0, r1
 80073a0:	4620      	mov	r0, r4
 80073a2:	f7f9 f8b7 	bl	8000514 <__aeabi_i2d>
 80073a6:	ec53 2b18 	vmov	r2, r3, d8
 80073aa:	ec41 0b19 	vmov	d9, r0, r1
 80073ae:	ec51 0b18 	vmov	r0, r1, d8
 80073b2:	f7f9 f919 	bl	80005e8 <__aeabi_dmul>
 80073b6:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 80073ba:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 80073be:	9301      	str	r3, [sp, #4]
 80073c0:	4602      	mov	r2, r0
 80073c2:	460b      	mov	r3, r1
 80073c4:	4680      	mov	r8, r0
 80073c6:	4689      	mov	r9, r1
 80073c8:	f7f9 f90e 	bl	80005e8 <__aeabi_dmul>
 80073cc:	a360      	add	r3, pc, #384	; (adr r3, 8007550 <__ieee754_log+0x320>)
 80073ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d2:	4606      	mov	r6, r0
 80073d4:	460f      	mov	r7, r1
 80073d6:	f7f9 f907 	bl	80005e8 <__aeabi_dmul>
 80073da:	a35f      	add	r3, pc, #380	; (adr r3, 8007558 <__ieee754_log+0x328>)
 80073dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e0:	f7f8 ff4c 	bl	800027c <__adddf3>
 80073e4:	4632      	mov	r2, r6
 80073e6:	463b      	mov	r3, r7
 80073e8:	f7f9 f8fe 	bl	80005e8 <__aeabi_dmul>
 80073ec:	a35c      	add	r3, pc, #368	; (adr r3, 8007560 <__ieee754_log+0x330>)
 80073ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f2:	f7f8 ff43 	bl	800027c <__adddf3>
 80073f6:	4632      	mov	r2, r6
 80073f8:	463b      	mov	r3, r7
 80073fa:	f7f9 f8f5 	bl	80005e8 <__aeabi_dmul>
 80073fe:	a35a      	add	r3, pc, #360	; (adr r3, 8007568 <__ieee754_log+0x338>)
 8007400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007404:	f7f8 ff3a 	bl	800027c <__adddf3>
 8007408:	4642      	mov	r2, r8
 800740a:	464b      	mov	r3, r9
 800740c:	f7f9 f8ec 	bl	80005e8 <__aeabi_dmul>
 8007410:	a357      	add	r3, pc, #348	; (adr r3, 8007570 <__ieee754_log+0x340>)
 8007412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007416:	4680      	mov	r8, r0
 8007418:	4689      	mov	r9, r1
 800741a:	4630      	mov	r0, r6
 800741c:	4639      	mov	r1, r7
 800741e:	f7f9 f8e3 	bl	80005e8 <__aeabi_dmul>
 8007422:	a355      	add	r3, pc, #340	; (adr r3, 8007578 <__ieee754_log+0x348>)
 8007424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007428:	f7f8 ff28 	bl	800027c <__adddf3>
 800742c:	4632      	mov	r2, r6
 800742e:	463b      	mov	r3, r7
 8007430:	f7f9 f8da 	bl	80005e8 <__aeabi_dmul>
 8007434:	a352      	add	r3, pc, #328	; (adr r3, 8007580 <__ieee754_log+0x350>)
 8007436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800743a:	f7f8 ff1f 	bl	800027c <__adddf3>
 800743e:	4632      	mov	r2, r6
 8007440:	463b      	mov	r3, r7
 8007442:	f7f9 f8d1 	bl	80005e8 <__aeabi_dmul>
 8007446:	460b      	mov	r3, r1
 8007448:	4602      	mov	r2, r0
 800744a:	4649      	mov	r1, r9
 800744c:	4640      	mov	r0, r8
 800744e:	f7f8 ff15 	bl	800027c <__adddf3>
 8007452:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8007456:	9b01      	ldr	r3, [sp, #4]
 8007458:	3551      	adds	r5, #81	; 0x51
 800745a:	431d      	orrs	r5, r3
 800745c:	2d00      	cmp	r5, #0
 800745e:	4680      	mov	r8, r0
 8007460:	4689      	mov	r9, r1
 8007462:	dd48      	ble.n	80074f6 <__ieee754_log+0x2c6>
 8007464:	4b4e      	ldr	r3, [pc, #312]	; (80075a0 <__ieee754_log+0x370>)
 8007466:	2200      	movs	r2, #0
 8007468:	4650      	mov	r0, sl
 800746a:	4659      	mov	r1, fp
 800746c:	f7f9 f8bc 	bl	80005e8 <__aeabi_dmul>
 8007470:	4652      	mov	r2, sl
 8007472:	465b      	mov	r3, fp
 8007474:	f7f9 f8b8 	bl	80005e8 <__aeabi_dmul>
 8007478:	4602      	mov	r2, r0
 800747a:	460b      	mov	r3, r1
 800747c:	4606      	mov	r6, r0
 800747e:	460f      	mov	r7, r1
 8007480:	4640      	mov	r0, r8
 8007482:	4649      	mov	r1, r9
 8007484:	f7f8 fefa 	bl	800027c <__adddf3>
 8007488:	ec53 2b18 	vmov	r2, r3, d8
 800748c:	f7f9 f8ac 	bl	80005e8 <__aeabi_dmul>
 8007490:	4680      	mov	r8, r0
 8007492:	4689      	mov	r9, r1
 8007494:	b964      	cbnz	r4, 80074b0 <__ieee754_log+0x280>
 8007496:	4602      	mov	r2, r0
 8007498:	460b      	mov	r3, r1
 800749a:	4630      	mov	r0, r6
 800749c:	4639      	mov	r1, r7
 800749e:	f7f8 feeb 	bl	8000278 <__aeabi_dsub>
 80074a2:	4602      	mov	r2, r0
 80074a4:	460b      	mov	r3, r1
 80074a6:	4650      	mov	r0, sl
 80074a8:	4659      	mov	r1, fp
 80074aa:	f7f8 fee5 	bl	8000278 <__aeabi_dsub>
 80074ae:	e6d6      	b.n	800725e <__ieee754_log+0x2e>
 80074b0:	a321      	add	r3, pc, #132	; (adr r3, 8007538 <__ieee754_log+0x308>)
 80074b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b6:	ec51 0b19 	vmov	r0, r1, d9
 80074ba:	f7f9 f895 	bl	80005e8 <__aeabi_dmul>
 80074be:	a320      	add	r3, pc, #128	; (adr r3, 8007540 <__ieee754_log+0x310>)
 80074c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c4:	4604      	mov	r4, r0
 80074c6:	460d      	mov	r5, r1
 80074c8:	ec51 0b19 	vmov	r0, r1, d9
 80074cc:	f7f9 f88c 	bl	80005e8 <__aeabi_dmul>
 80074d0:	4642      	mov	r2, r8
 80074d2:	464b      	mov	r3, r9
 80074d4:	f7f8 fed2 	bl	800027c <__adddf3>
 80074d8:	4602      	mov	r2, r0
 80074da:	460b      	mov	r3, r1
 80074dc:	4630      	mov	r0, r6
 80074de:	4639      	mov	r1, r7
 80074e0:	f7f8 feca 	bl	8000278 <__aeabi_dsub>
 80074e4:	4652      	mov	r2, sl
 80074e6:	465b      	mov	r3, fp
 80074e8:	f7f8 fec6 	bl	8000278 <__aeabi_dsub>
 80074ec:	4602      	mov	r2, r0
 80074ee:	460b      	mov	r3, r1
 80074f0:	4620      	mov	r0, r4
 80074f2:	4629      	mov	r1, r5
 80074f4:	e7d9      	b.n	80074aa <__ieee754_log+0x27a>
 80074f6:	4602      	mov	r2, r0
 80074f8:	460b      	mov	r3, r1
 80074fa:	4650      	mov	r0, sl
 80074fc:	4659      	mov	r1, fp
 80074fe:	f7f8 febb 	bl	8000278 <__aeabi_dsub>
 8007502:	ec53 2b18 	vmov	r2, r3, d8
 8007506:	f7f9 f86f 	bl	80005e8 <__aeabi_dmul>
 800750a:	4606      	mov	r6, r0
 800750c:	460f      	mov	r7, r1
 800750e:	2c00      	cmp	r4, #0
 8007510:	f43f af23 	beq.w	800735a <__ieee754_log+0x12a>
 8007514:	a308      	add	r3, pc, #32	; (adr r3, 8007538 <__ieee754_log+0x308>)
 8007516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800751a:	ec51 0b19 	vmov	r0, r1, d9
 800751e:	f7f9 f863 	bl	80005e8 <__aeabi_dmul>
 8007522:	a307      	add	r3, pc, #28	; (adr r3, 8007540 <__ieee754_log+0x310>)
 8007524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007528:	4604      	mov	r4, r0
 800752a:	460d      	mov	r5, r1
 800752c:	ec51 0b19 	vmov	r0, r1, d9
 8007530:	e727      	b.n	8007382 <__ieee754_log+0x152>
 8007532:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8007588 <__ieee754_log+0x358>
 8007536:	e694      	b.n	8007262 <__ieee754_log+0x32>
 8007538:	fee00000 	.word	0xfee00000
 800753c:	3fe62e42 	.word	0x3fe62e42
 8007540:	35793c76 	.word	0x35793c76
 8007544:	3dea39ef 	.word	0x3dea39ef
 8007548:	55555555 	.word	0x55555555
 800754c:	3fd55555 	.word	0x3fd55555
 8007550:	df3e5244 	.word	0xdf3e5244
 8007554:	3fc2f112 	.word	0x3fc2f112
 8007558:	96cb03de 	.word	0x96cb03de
 800755c:	3fc74664 	.word	0x3fc74664
 8007560:	94229359 	.word	0x94229359
 8007564:	3fd24924 	.word	0x3fd24924
 8007568:	55555593 	.word	0x55555593
 800756c:	3fe55555 	.word	0x3fe55555
 8007570:	d078c69f 	.word	0xd078c69f
 8007574:	3fc39a09 	.word	0x3fc39a09
 8007578:	1d8e78af 	.word	0x1d8e78af
 800757c:	3fcc71c5 	.word	0x3fcc71c5
 8007580:	9997fa04 	.word	0x9997fa04
 8007584:	3fd99999 	.word	0x3fd99999
	...
 8007590:	c3500000 	.word	0xc3500000
 8007594:	43500000 	.word	0x43500000
 8007598:	7fefffff 	.word	0x7fefffff
 800759c:	3ff00000 	.word	0x3ff00000
 80075a0:	3fe00000 	.word	0x3fe00000

080075a4 <with_errno>:
 80075a4:	b570      	push	{r4, r5, r6, lr}
 80075a6:	4604      	mov	r4, r0
 80075a8:	460d      	mov	r5, r1
 80075aa:	4616      	mov	r6, r2
 80075ac:	f7fe fc96 	bl	8005edc <__errno>
 80075b0:	4629      	mov	r1, r5
 80075b2:	6006      	str	r6, [r0, #0]
 80075b4:	4620      	mov	r0, r4
 80075b6:	bd70      	pop	{r4, r5, r6, pc}

080075b8 <xflow>:
 80075b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80075ba:	4614      	mov	r4, r2
 80075bc:	461d      	mov	r5, r3
 80075be:	b108      	cbz	r0, 80075c4 <xflow+0xc>
 80075c0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80075c4:	e9cd 2300 	strd	r2, r3, [sp]
 80075c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80075cc:	4620      	mov	r0, r4
 80075ce:	4629      	mov	r1, r5
 80075d0:	f7f9 f80a 	bl	80005e8 <__aeabi_dmul>
 80075d4:	2222      	movs	r2, #34	; 0x22
 80075d6:	b003      	add	sp, #12
 80075d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80075dc:	f7ff bfe2 	b.w	80075a4 <with_errno>

080075e0 <__math_uflow>:
 80075e0:	b508      	push	{r3, lr}
 80075e2:	2200      	movs	r2, #0
 80075e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80075e8:	f7ff ffe6 	bl	80075b8 <xflow>
 80075ec:	ec41 0b10 	vmov	d0, r0, r1
 80075f0:	bd08      	pop	{r3, pc}

080075f2 <__math_oflow>:
 80075f2:	b508      	push	{r3, lr}
 80075f4:	2200      	movs	r2, #0
 80075f6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80075fa:	f7ff ffdd 	bl	80075b8 <xflow>
 80075fe:	ec41 0b10 	vmov	d0, r0, r1
 8007602:	bd08      	pop	{r3, pc}

08007604 <_init>:
 8007604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007606:	bf00      	nop
 8007608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800760a:	bc08      	pop	{r3}
 800760c:	469e      	mov	lr, r3
 800760e:	4770      	bx	lr

08007610 <_fini>:
 8007610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007612:	bf00      	nop
 8007614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007616:	bc08      	pop	{r3}
 8007618:	469e      	mov	lr, r3
 800761a:	4770      	bx	lr
